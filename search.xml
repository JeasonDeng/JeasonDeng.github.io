<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端发展</title>
    <url>/2016/06/03/00-%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95/</url>
    <content><![CDATA[<h1 id="前端到底是个啥？"><a href="#前端到底是个啥？" class="headerlink" title="前端到底是个啥？"></a>前端到底是个啥？</h1><p>针对 web 开发的前端而言</p>
<ul>
<li>针对浏览器的开发，浏览器呈现出来的页面就是前端</li>
<li>它的实质是前端代码在浏览器端被编译、运行、渲染</li>
<li>前端代码主要由三个部分构成：HTML + CSS + JavaScript<span id="more"></span></li>
</ul>
<h1 id="前后端分工"><a href="#前后端分工" class="headerlink" title="前后端分工"></a>前后端分工</h1><p><img src="https://segmentfault.com/img/bVbxgak?w=1534&h=862"></p>
<h1 id="前端开发发展史"><a href="#前端开发发展史" class="headerlink" title="前端开发发展史"></a>前端开发发展史</h1><ol>
<li><p>多页面项目</p>
<ul>
<li><p>一个页面对应一个 html 页面，html 页面内显式地引入 js、css 文件</p>
</li>
<li><p>通过模版引擎将 js 数据动态地渲染到页面上</p>
</li>
<li><p>各页面的切换由 a 链接或 location.href 实现</p>
</li>
<li><p>切换页面时，会刷新界面，重新发起请求</p>
<blockquote>
<p>src</p>
<p>|—— images</p>
<p>|—— js</p>
<p>|—— css</p>
<p>|—— index.html</p>
<p>|—— about.html</p>
<p>|—— list.html</p>
</blockquote>
</li>
</ul>
</li>
<li><p>SPA</p>
<ul>
<li>利用 Vue、 React 框架生成的项目</li>
<li>只有一个主界面，各个页面由组件实现，页面间的切换由路由实现</li>
<li>路由切换时，不会刷新界面，用户体验好</li>
</ul>
</li>
</ol>
<h1 id="前端项目的产出"><a href="#前端项目的产出" class="headerlink" title="前端项目的产出"></a>前端项目的产出</h1><p>前端项目<strong>最终</strong>打包上线的都是 html+CSS + JS 的静态资源包</p>
<ul>
<li>因为前端项目依赖于浏览器运行</li>
<li>而浏览器只认识 html、css、js 代码</li>
</ul>
<p>也就是说前端开发中用到的各种技术都是对 html、css、js 的一些预处理操作，是对程序员友好的一些技术手段</p>
<h1 id="处理技术"><a href="#处理技术" class="headerlink" title="处理技术"></a>处理技术</h1><table>
<thead>
<tr>
<th></th>
<th align="left">技术名词</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>HTML</td>
<td align="left">模版引擎                                       (art-template、EJS)</td>
<td>把 js 数据传到 html 中展示出来，<strong>动态生成 html 结构</strong></td>
</tr>
<tr>
<td>CSS</td>
<td align="left">less、stylus</td>
<td>扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展</td>
</tr>
<tr>
<td>JS</td>
<td align="left">ES6+</td>
<td>是 JavaScript 的下一个版本标准，扩展了 ES5 的语法</td>
</tr>
<tr>
<td>HTML + JS</td>
<td align="left">React</td>
<td>前端框架，混合了 HTML 和 JS 语法，实现虚拟 DOM 来构建用户界面</td>
</tr>
<tr>
<td>HTML + JS + CSS</td>
<td align="left">Vue</td>
<td>前端框架，混合了 HTML、CSS 和 JS 语法，实现虚拟 DOM 来构建用户界面</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>前端基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Less</title>
    <url>/2016/06/11/03-Less/</url>
    <content><![CDATA[<h1 id="什么是-less"><a href="#什么是-less" class="headerlink" title="什么是 less?"></a>什么是 less?</h1><p><a href="http://lesscss.cn/">官网</a></p>
<p>Less 是一门 CSS 预处理语言, 它扩展了 CSS 语言, 增加了变量、Mixin、函数等特性, 使 CSS 更容易维护和扩展</p>
<p>Less 可以运行在 Node 或浏览器端</p>
<span id="more"></span>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>⚠️ 最好在 less 文件开头加</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="浏览器端用法"><a href="#浏览器端用法" class="headerlink" title="浏览器端用法"></a>浏览器端用法</h2><p>less 无法在浏览器端直接使用</p>
<ul>
<li><p>解决方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下两行必须写在头部 head 标签里; 并且 link 的 type 属性必须写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/less&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.less&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;less.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>less 自带监听模式 (无刷新预览效果, <strong>有延迟</strong>)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 紧挨着上面两行之后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>less.watch();<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>解决原理</p>
<blockquote>
<ol>
<li><p>浏览器端通过发送请求到服务端 </p>
</li>
<li><p>拿到 less 文件的内容 </p>
</li>
<li><p>然后再通过 less.js 解析 less 文件内容</p>
</li>
<li><p>将解析后的结果追加到 html 中 (会在 html 中生成 style 标签)</p>
</li>
</ol>
</blockquote>
</li>
</ul>
<p>所以, 引入 less 文件的网页 <code>必须以 http 形式打开</code></p>
<h1 id="less-编译"><a href="#less-编译" class="headerlink" title="less 编译"></a>less 编译</h1><h2 id="命令行编译"><a href="#命令行编译" class="headerlink" title="命令行编译"></a>命令行编译</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lessc style.less style.css</span><br></pre></td></tr></table></figure>

<h2 id="Koala工具编译"><a href="#Koala工具编译" class="headerlink" title="Koala工具编译"></a>Koala工具编译</h2><p><a href="http://koala-app.com/index-zh.html">Koala</a></p>
<p>⚠️ 拖目录, 不要拖文件</p>
<h1 id="less-语法"><a href="#less-语法" class="headerlink" title="less 语法"></a>less 语法</h1><h2 id="less-中的注释"><a href="#less-中的注释" class="headerlink" title="less 中的注释"></a>less 中的注释</h2><ol>
<li><p>以 // 开头的注释, 不会被编译到 css 文件中</p>
</li>
<li><p>以 /**/ 开头的注释, 会被编译到 css 文件中</p>
</li>
<li><p>建议使用 <code>/**/</code></p>
</li>
</ol>
<h2 id="less-中的变量"><a href="#less-中的变量" class="headerlink" title="less 中的变量"></a>less 中的变量</h2><p>使用 @ 来声明一个变量 —— <code>@pink: pink;</code></p>
<ul>
<li><p>变量是 <code>块级作用域</code></p>
</li>
<li><p>属性值作为变量 —— 直接使用 @pink</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#ccc</span>;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>选择器或属性名作为变量 —— @{ 变量名 }</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@className:</span> .box;</span><br><span class="line"><span class="variable">@&#123;className&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>作为 URL —— @{ url }</p>
</li>
<li><p>变量的延迟加载</p>
</li>
</ul>
<h2 id="less-的混入-Mixin"><a href="#less-的混入-Mixin" class="headerlink" title="less 的混入(Mixin)"></a>less 的混入(Mixin)</h2><p>将一系列属性从一个规则集引入到另一个规则集的方式</p>
<ul>
<li>混入的定义在 less 规范里有明确的指定, 使用 <code>.</code> 来定义</li>
</ul>
<h3 id="类混入"><a href="#类混入" class="headerlink" title="类混入"></a>类混入</h3><p>也叫 <code>普通混入</code></p>
<ul>
<li><p>缺点</p>
<ul>
<li>类混入定义的样式会被编译到 css 文件中</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.w50</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f_left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类混入 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="selector-class">.w50</span>();    <span class="comment">/* 相当于函数调用 */</span></span><br><span class="line">    <span class="selector-class">.f_left</span>();</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="函数混入"><a href="#函数混入" class="headerlink" title="函数混入"></a>函数混入</h3><p>可以带参数, 也可以不带参数</p>
<ul>
<li><p>不会被编译到 css 文件中</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不带参数 */</span></span><br><span class="line"><span class="selector-class">.w50</span>() &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带参数的混入在调用时, 必须传参 */</span></span><br><span class="line"><span class="selector-class">.f</span>(<span class="variable">@direction</span>) &#123;</span><br><span class="line">    <span class="attribute">float</span>: <span class="variable">@direction</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带默认参数, 调用时可传可不传 */</span></span><br><span class="line"><span class="selector-class">.bordeRadius</span>(<span class="variable">@radius</span>: <span class="number">100px</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多个参数 */</span></span><br><span class="line"><span class="selector-class">.m</span>(<span class="variable">@v</span>: <span class="number">0</span>, <span class="variable">@h</span>) &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">@v</span> <span class="variable">@h</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数混入 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="selector-class">.w50</span>();    <span class="comment">/* 相当于函数调用 */</span></span><br><span class="line">    <span class="selector-class">.f</span>(left);</span><br><span class="line">    <span class="selector-class">.borderRadius</span>();</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">      <span class="selector-class">.m</span>(<span class="variable">@h</span>: auto); <span class="comment">/* 命名参数 当实参与形参个数不一致时, 可以采用这种命名参数形式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>匹配模式</strong></p>
<ul>
<li>调用 .triangle(L, 10px, red) 时<ul>
<li>第一个参数为 <code>@_</code> 的混合(<em>放共用的重复代码</em>) 会自动调用</li>
<li>然后再调用同名的 .triangle(L, @w, @c)</li>
</ul>
</li>
</ul>
<p><img src="/images/%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F.png"></p>
</li>
<li><p>argumrnts 变量</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@a</span>, <span class="variable">@b</span>, <span class="variable">@c</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-class">.sjx</span> &#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">1px</span>, solid, black);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="less-的嵌套"><a href="#less-的嵌套" class="headerlink" title="less 的嵌套"></a>less 的嵌套</h2><p>基本嵌套规则</p>
<ul>
<li><p><strong>&amp; 的使用 —— 同级</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">          <span class="attribute">color</span>: red;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="less-中使用媒体查询"><a href="#less-中使用媒体查询" class="headerlink" title="less 中使用媒体查询"></a>less 中使用媒体查询</h2><p>⚠️ 多个 @media 之间使用分号</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mixins.less</span></span><br><span class="line"><span class="selector-class">.1-px</span>(<span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">@color</span>;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">2</span>)&#123;</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(.<span class="number">5</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(.<span class="number">5</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(.<span class="number">333333</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="attribute">transform</span>: scaleY(.<span class="number">33333</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="导入-import"><a href="#导入-import" class="headerlink" title="导入 import"></a>导入 import</h2><p>使用 @import “文件名”;</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* variables.less */</span></span><br><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"><span class="variable">@mainColor:</span> <span class="number">#e32322</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main.less */</span></span><br><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;variables&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;mixin&quot;</span></span><br></pre></td></tr></table></figure>

<p>⚠️ less 中的 @import 和 css 中的 @import 不一样</p>
<p>less 中 —— 合并代码</p>
<p>css 中 —— 发请求</p>
<h2 id="less-的运算函数"><a href="#less-的运算函数" class="headerlink" title="less 的运算函数"></a>less 的运算函数</h2><p>在 less 中可以进行 <code>加减乘除</code> 的运算, <em>计算的一方带单位就可以了</em></p>
<ul>
<li><p>在 less 中可以使用 <a href="http://lesscss.cn/functions/">内置函数</a> 进行运算</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sjx</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: (<span class="number">100</span> + <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@num:</span> <span class="number">8</span>;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> * <span class="variable">@num</span>;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span> / <span class="variable">@num</span>;</span><br><span class="line">        <span class="attribute">color</span>: lighten(red, <span class="number">20%</span>); <span class="comment">/* 比红色亮 20% */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="less-继承"><a href="#less-继承" class="headerlink" title="less 继承"></a>less 继承</h2><p>继承 <strong>只能继承类样式, 不能加 () 来传递参数</strong></p>
<ul>
<li><p>比混合性能高, 没有混合灵活</p>
</li>
<li><p>语法</p>
<ol>
<li><p>.a:extend(.b) { … }</p>
</li>
<li><p>.a {</p>
<p>​  &amp;:extend(.b all);</p>
<p>​  …</p>
<p>}</p>
<p><code>all</code> 表示继承与 b 相关的所有样式</p>
</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// extend.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./juzhong-extend.less&#x27;</span>;</span><br><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="selector-class">.inner</span> &#123;</span><br><span class="line">        <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.juzhong all);</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background</span>: pink;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">background</span>: deeppink;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// juzhong-extend.less</span></span><br><span class="line"><span class="selector-class">.juzhong</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="less-避免编译"><a href="#less-避免编译" class="headerlink" title="less 避免编译"></a>less 避免编译</h2><p>使用 ~ “属性值” 避免被编译</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="string">~&quot;cacl(100 + 100px)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Flex布局</title>
    <url>/2016/06/21/06-Flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="flex-布局是什么"><a href="#flex-布局是什么" class="headerlink" title="flex 布局是什么?"></a>flex 布局是什么?</h1><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性</p>
<blockquote>
<p>布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model">盒状模型</a>，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display"><code>display</code></a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"><code>position</code></a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float"><code>float</code></a>属性。它对于那些特殊布局非常不方便，比如，<a href="https://css-tricks.com/centering-css-complete-guide/">垂直居中</a>就不容易实现</p>
</blockquote>
<span id="more"></span>
<p>任何一个容器都可以指定为 Flex 布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行内元素也可以使用 flex 布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⚠️ <strong>设为 flex 布局后, 子元素的 float、clear、vertical-align 属性将失效</strong></p>
<h1 id="教程参考"><a href="#教程参考" class="headerlink" title="教程参考"></a>教程参考</h1><p><a href="https://www.runoob.com/w3cnote/flex-grammar.html">菜鸟教程</a></p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>采用 Flex 布局的元素，称为 Flex 容器（flex container）, 简称”<strong>容器</strong>“。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”<strong>项目</strong>“</p>
<p><img src="/images/flex.png"></p>
<ul>
<li>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）<ul>
<li>主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code></li>
<li>交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code></li>
</ul>
</li>
<li><strong>项目默认沿主轴排列</strong></li>
<li>单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code></li>
</ul>
<h1 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h1><p>以下 6 个属性设置在 <code>容器</code> 上</p>
<ul>
<li>flex-firection</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
<h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>row (<strong>默认值</strong>)</td>
<td>主轴为水平方向, 起点在左端</td>
</tr>
<tr>
<td>row-reverse</td>
<td>主轴为水平方向, 起点在右端</td>
</tr>
<tr>
<td>column</td>
<td>主轴为垂直方向, 起点在顶部</td>
</tr>
<tr>
<td>column-reverse</td>
<td>主轴为垂直方向, 起点在底部</td>
</tr>
</tbody></table>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>默认情况下, 项目都排列在一条线上</p>
<blockquote>
<p>flex-wrap 属性定义如果在一条线上排不下,  如何换行</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>nowrap(默认)</p>
<ul>
<li><p>不换行</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/07/9da1f23965756568b4c6ea7124db7b9a.png"></p>
</li>
</ul>
</li>
<li><p>wrap</p>
<ul>
<li><p>换行, 第一行在上方</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/07/3c6b3c8b8fe5e26bca6fb57538cf72d9.jpg"></p>
</li>
</ul>
</li>
<li><p>wrap-reverse</p>
<ul>
<li><p>换行, 第一行在下方</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/07/fb4cf2bab8b6b744b64f6d7a99cd577c.jpg"></p>
</li>
</ul>
</li>
</ul>
<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 <code>row nowrap</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">flex-flow</span>: row nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p>justify-content 属性定义了<strong>项目在主轴上的对齐方式</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png"></p>
<h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p>align-items 属性定义<strong>项目在交叉轴上如何对齐</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png"></p>
<h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p>align-content 属性定义了多根轴线(<em>就是<strong>要换行</strong></em>)的对齐方式。<em>如果项目只有一根轴线，该属性不起作用</em></p>
<ul>
<li><font color=#c40>把所有 items 当作一个整体来看待， 就是看这个整体在交叉轴上的对齐方式</font></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png"></p>
<h1 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h1><p>以下 6 个属性设置在 <code>项目</code> 上</p>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
<h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p>order 属性定义项目的排列顺序。<strong>数值越小，排列越靠前</strong>，默认为 0</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p>flex-grow 属性定义项目的<font color=#c40><strong>放大比例</strong></font>，默认为 0，即如果 <em>存在剩余空间</em>，也不放大</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果所有项目的 flex-grow 属性都为 1，则它们将<strong>等分剩余空间</strong>（如果有的话）</p>
<ul>
<li>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍</li>
</ul>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/07/f41c08bb35962ed79e7686f735d6cd78.png"></p>
</li>
</ul>
<h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p>flex-shrink 属性定义了项目的<font color=#c40><strong>缩小比例</strong></font>，默认为1，即如果 <em>空间不足</em>，该项目将缩小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小</p>
<ul>
<li>先计算总共超出多少，再分别按比例缩小超出部分</li>
</ul>
</li>
<li><p>如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小</p>
</li>
<li><p>负值对该属性无效</p>
</li>
</ul>
<h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）</p>
<p>浏览器根据这个属性，计算主轴是否有多余空间</p>
<p>它的默认值为auto，即项目的本来大小</p>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。<strong>后两个属性可选</strong></p>
<ul>
<li><p>该属性有三个常用值</p>
<ul>
<li><p>auto —— 相当于 1 1 auto</p>
</li>
<li><p>none —— 相当于 0 0 auto</p>
</li>
<li><p><strong>1 —— 相当于 1 1 0%</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>; <span class="comment">/* 可以实现等分布局, 相当于将所有项目的 flex-basis 置为 0, 再等分 */</span></span><br><span class="line">    <span class="comment">/* 等价于</span></span><br><span class="line"><span class="comment">        flex-grow: 1;</span></span><br><span class="line"><span class="comment">        flex-shrink: 1;</span></span><br><span class="line"><span class="comment">        flex-basis: 0%;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>⚠️ <code>flex: 1; </code><strong>只能用于单行等分</strong>的情况；如果有换行就不起作用</p>
<h1 id="flex-不要和定位混用"><a href="#flex-不要和定位混用" class="headerlink" title="flex 不要和定位混用"></a>flex 不要和定位混用</h1><p><strong>有定位属性的元素就不再具有 flex 布局的特性了</strong></p>
<h1 id="flex-布局元素的高度问题"><a href="#flex-布局元素的高度问题" class="headerlink" title="flex 布局元素的高度问题"></a>flex 布局元素的高度问题</h1><p>flex 布局的元素的高度问题</p>
<ul>
<li>如果本身设置了 height, 则按设置的来；</li>
<li>如果本身没有设置 height, height 跟父元素一致；</li>
<li>如果父元素也没有设置 height, 则跟同一行的元素的最大高度一致</li>
</ul>
<h1 id="flex-实现栅格布局"><a href="#flex-实现栅格布局" class="headerlink" title="flex 实现栅格布局"></a>flex 实现栅格布局</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span>占满一行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span>两列均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span>两列均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>三列均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>三列均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span>三列均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span>四列均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span>四列均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span>四列均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span>四列均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>任意均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span>......<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>任意均分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col-12</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col-6</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col-4</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">33.3333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col-3</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.col</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端适配</title>
    <url>/2016/06/22/07-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h1 id="移动端适配基本概念"><a href="#移动端适配基本概念" class="headerlink" title="移动端适配基本概念"></a>移动端适配基本概念</h1><p><a href="https://blog.csdn.net/qq_34629352/article/details/104959500">参考</a></p>
<h2 id="视口-viewport"><a href="#视口-viewport" class="headerlink" title="视口 viewport"></a>视口 viewport</h2><p>一个虚拟的区域, 就是设备上用来显示网页的那一块区域</p>
<ul>
<li>浏览器承载 viewport , viewport 承载网页, <code>viewport 默认会对网页进行缩放来呈现完整内容</code><ul>
<li><em>可能造成元素太小看不清</em><span id="more"></span></li>
</ul>
</li>
</ul>
<h3 id="布局适口"><a href="#布局适口" class="headerlink" title="布局适口"></a>布局适口</h3><p>用来布局的区域</p>
<blockquote>
<p>有自己的默认值，可以通过 width=device-width 或 initial-scale 来重新设置</p>
<p>当发生冲突时，取较大的值</p>
</blockquote>
<ul>
<li>PC 端<ul>
<li>布局视口默认和视觉视口等大</li>
<li>进行网页放大时，布局视口变小；缩小时，布局视口变大(<em>缩放时的是每个像素点的大小</em>)</li>
</ul>
</li>
<li>移动端<ul>
<li>各个设备有自己固定的布局适口大小 (iphone 为 980px)</li>
<li>进行缩放时，布局适口不会变化(<em>物理像素值不会变化</em>)</li>
</ul>
</li>
</ul>
<h3 id="视觉适口"><a href="#视觉适口" class="headerlink" title="视觉适口"></a>视觉适口</h3><p>用户能看到的区域</p>
<blockquote>
<p>默认情况下是等于设备宽的，只有设置了 initial-scale 才会改变大小</p>
<p>当布局视口的内容超出视觉视口时，才会出现滚动条</p>
</blockquote>
<ul>
<li>PC 端<ul>
<li>用户可任意缩放</li>
</ul>
</li>
<li>移动端<ul>
<li>通过 initial-scale 来设置缩放(<em>相对于设备宽</em>)</li>
</ul>
</li>
</ul>
<h3 id="适配方案要求"><a href="#适配方案要求" class="headerlink" title="适配方案要求"></a>适配方案要求</h3><ol>
<li><p>网页宽度必须和浏览器保持一致 (防止出现水平滚动条)</p>
</li>
<li><p>默认显示的缩放比例和 PC 端保持一致</p>
</li>
<li><p>不允许用户自行缩放网页</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0,user-scalable=no&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">device-width           —— 视觉视口大小</span></span><br><span class="line"><span class="comment">width=device-width     —— 改变的是布局视口大小</span></span><br><span class="line"><span class="comment">initial-scale          —— 设备独立像素对视觉视口(布局视口)的比例</span></span><br><span class="line"><span class="comment">initial-scale=1.0      —— 同时改变布局视口和视觉视口大小都为设备像素的 1 倍</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="理想适口"><a href="#理想适口" class="headerlink" title="理想适口"></a>理想适口</h3><p>让 layout viewport (布局视口)的宽度等于设备宽度</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="完美视口"><a href="#完美视口" class="headerlink" title="完美视口"></a>完美视口</h3><p>同时不让系统对网页进行缩放</p>
<blockquote>
<p>默认视觉视口宽度就是等于设备宽度的</p>
<p>设置 initial-scale 是同时在设置布局视口和视觉视口的宽度</p>
<p>当元素超出视觉视口宽度时，就会出现滚动条</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="物理像素-屏幕的分辨率"><a href="#物理像素-屏幕的分辨率" class="headerlink" title="物理像素(屏幕的分辨率)"></a>物理像素(屏幕的分辨率)</h2><p><strong>设备能控制显示的最小单元</strong>，可以把物理像素看成是对应的像素点</p>
<blockquote>
<p>物理像素是一个抽象单位，我们不能说 1 个物理像素有多大，这还跟设备分辨率有关</p>
</blockquote>
<ul>
<li>eg 屏幕的分辨率 (<em>1366 x 768 ect.</em>) 可以理解为物理像素</li>
</ul>
<h2 id="设备分辨率-PPI"><a href="#设备分辨率-PPI" class="headerlink" title="设备分辨率 PPI"></a>设备分辨率 PPI</h2><p>设备的分辨率指的是每英寸显示屏上像素点个数</p>
<p>计算公式为 PPI = 物理像素/物理尺寸</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iPhone6 的分辨率为 </span></span><br><span class="line"><span class="number">326</span> = √(<span class="number">750</span>^<span class="number">2</span> + <span class="number">1334</span>^<span class="number">2</span>) / <span class="number">4.7</span></span><br></pre></td></tr></table></figure>

<h2 id="设备独立像素-amp-css像素"><a href="#设备独立像素-amp-css像素" class="headerlink" title="设备独立像素 &amp; css像素"></a>设备独立像素 &amp; css像素</h2><p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用并控制的虚拟像素</p>
<ul>
<li>我们写 CSS 时所用的像素，它是一个抽像的单位</li>
<li>css 像素是浏览器特有的概念</li>
</ul>
<h2 id="设备像素比-dpr"><a href="#设备像素比-dpr" class="headerlink" title="设备像素比 dpr"></a>设备像素比 dpr</h2><p>设备像素比 = 物理像素 / css 像素</p>
<ul>
<li><em>在普通屏幕下1个 CSS像素对应1个物理像素，而在Retina屏幕下，1个CSS像素对应的却是4个物理像素</em></li>
</ul>
<h2 id="dpr-amp-DPI-amp-PPI"><a href="#dpr-amp-DPI-amp-PPI" class="headerlink" title="dpr &amp; DPI &amp; PPI"></a>dpr &amp; DPI &amp; PPI</h2><p>dpr —— 设备像素比，物理像素/设备独立像素 = dpr， 一般以 Iphon6 的 dpr 为准 dpr = 2</p>
<p>PPI ——  一英寸显示屏上的像素点个数 (iPhone6 为 326 = √(750^2 + 1334^2) / 4.7)</p>
<p>DPI —— 最早指的是打印机在单位面积上打印的墨点数，墨点越多越清晰</p>
<h2 id="位图像素"><a href="#位图像素" class="headerlink" title="位图像素"></a>位图像素</h2><p>1 个位图像素是一个栅格图像上最小的数据单元</p>
<h1 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h1><p>所谓的移动端适配，就是让页面在不同尺寸的移动设备上展现出理想的视觉效果<br><a href="https://zhuanlan.zhihu.com/p/80692165">参考</a></p>
<h2 id="viewport-适配"><a href="#viewport-适配" class="headerlink" title="viewport 适配"></a>viewport 适配</h2><p>原理</p>
<blockquote>
<p>视口默认会对网页内容进行缩放来呈现内容，利用 initial-scale 来设置布局视口和视觉视口的大小后，网页内容再进行缩放；同一个元素在不同设备上的 css 像素是一样的，但是缩放比是不一样的</p>
</blockquote>
<ol>
<li>根据设计稿标准（750px 宽度）开发页面，写完后页面及元素自动缩放，适配不同的设备</li>
</ol>
<ul>
<li>在 initial-scale 上做文章，<strong>initial-scale = 设备的宽度 / 设计稿的宽度</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设计稿尺寸</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> WIDTH = <span class="number">750</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> mobileAdapter = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 为了适配其他屏幕，需要动态的设置 initial-scale 的值</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> scale = screen.width / WIDTH</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> content = <span class="string">`initial-scale=<span class="subst">$&#123;scale&#125;</span>, maximum-scale=<span class="subst">$&#123;scale&#125;</span>, minimum-scale=<span class="subst">$&#123;scale&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> meta = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;meta[name=viewport]&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!meta) &#123;</span></span><br><span class="line"><span class="javascript">        meta = <span class="built_in">document</span>.createElement(<span class="string">&#x27;meta&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        meta.setAttribute(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;viewport&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.head.appendChild(meta)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      meta.setAttribute(<span class="string">&#x27;content&#x27;</span>,content)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    mobileAdapter()</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 屏幕翻转时再次执行</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onorientationchange = mobileAdapter </span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>优点</p>
<ul>
<li>元素尺寸直接按设计稿来</li>
</ul>
<p>缺点</p>
<ul>
<li>边线问题，不同尺寸下，边线的粗细是不一样的（等比缩放后），全部元素都是等比缩放，实际显示效果可能不太好</li>
</ul>
<h2 id="vw-wh-部分等比缩放"><a href="#vw-wh-部分等比缩放" class="headerlink" title="vw/wh(部分等比缩放)"></a>vw/wh(部分等比缩放)</h2><p>原理</p>
<blockquote>
<p>浏览器默认将设备宽度分为 100 份，对于不同的设备，每一份的宽度是不一样的，以 vw 为单位的同一个元素在不同设备上的 css 像素也是不一样的</p>
</blockquote>
<ol>
<li>开发者拿到设计稿（<em>假设设计稿尺寸为750px，设计稿的元素标注是基于此宽度标注</em>）</li>
<li>开始开发，对设计稿的标注进行转换，把 px 换成 vw<ul>
<li>比如页面元素字体标注的大小是 28px，换成 vw 为 (100/750)*28 vw</li>
</ul>
</li>
<li>对于需要等比缩放的元素，CSS 使用转换后的单位 vw</li>
<li>对于不需要缩放的元素，比如边框阴影，使用固定单位 px</li>
</ol>
<p>为了开发方便，利用自定义属性，CSS变量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> WIDTH = <span class="number">750</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//:root &#123; --width: 0.133333 &#125; 1像素等于多少 vw</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">&#x27;--width&#x27;</span>, (<span class="number">100</span> / WIDTH)) </span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意此时，meta 里就不要去设置缩放了</p>
<p>业务代码里就可以写</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">28vw</span> * <span class="built_in">var</span>(--width));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现了按需缩放</p>
<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>原理</p>
<blockquote>
<p>根据设备宽度给不同的设备设置不同的 rem(<em>根元素字体大小</em>)，以 rem 为单位的同一个元素在不同设备上的 css 像素是不一样的</p>
</blockquote>
<ol>
<li>开发者拿到设计稿（<em>假设设计稿尺寸为750px，设计稿的元素标是基于此宽度标注</em>）</li>
<li>开始开发，对设计稿的标注进行转换</li>
<li>对于需要等比缩放的元素，CSS 使用转换后的单位 rem</li>
<li>对于不需要缩放的元素，比如边框阴影，使用固定单位 px</li>
</ol>
<p>根据不同屏幕宽度，设置 html 的 font-size 值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设计稿尺寸</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> WIDTH = <span class="number">750</span> </span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> setView = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.documentElement.style.fontSize = (<span class="number">100</span> * screen.width / WIDTH) + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onorientationchange = setView</span></span><br><span class="line"><span class="javascript">    setView()</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于需要等比缩放的元素，CSS 使用转换后的单位 rem</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">28rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于不需要缩放的元素，比如边框阴影，使用固定单位px</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">span</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⚠️ <strong>以上的三种适配方案，都是等比缩放</strong></p>
<ul>
<li>放到 ipad 上时（设计稿以手机屏幕设计的），页面元素会很大很丑</li>
<li>有些场景下，并不需要页面整体缩放（viewport 自动处理的也很好了），所以有时只需要合理的布局即可</li>
</ul>
<h3 id="rem-amp-less-适配方案"><a href="#rem-amp-less-适配方案" class="headerlink" title="rem &amp; less 适配方案"></a>rem &amp; less 适配方案</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// variables.less</span></span><br><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主流设备尺寸列表, 可根据需要增减</span></span><br><span class="line"><span class="variable">@adapterDeviceList:</span> <span class="number">750px</span>, <span class="number">720px</span>, <span class="number">640px</span>, <span class="number">540px</span>, <span class="number">480px</span>, <span class="number">424px</span>, <span class="number">414px</span>, <span class="number">400px</span>, <span class="number">384px</span>, <span class="number">375px</span>, <span class="number">360px</span>, <span class="number">320px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计稿尺寸, 可根据需要修改</span></span><br><span class="line"><span class="variable">@psdWidth:</span> <span class="number">750px</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 预设基准值, 可根据需要修改</span></span><br><span class="line"><span class="variable">@baseRem:</span> <span class="number">100px</span>; <span class="comment">// 当基准值设为 100px 时, 对 750px 的设计稿, 只需对 设计稿尺寸/ 100 就转成了对应的rem 尺寸</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设备种类长度 </span></span><br><span class="line"><span class="variable">@len:</span> length(<span class="variable">@adapterDeviceList</span>); <span class="comment">// less 内置函数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mixins.less</span></span><br><span class="line"><span class="comment">// less没有循环语法</span></span><br><span class="line"><span class="comment">// 我们可以使用函数的迭代</span></span><br><span class="line"><span class="comment">// 根据数组长度停止当前循环</span></span><br><span class="line"><span class="comment">// 函数的执行有条件</span></span><br><span class="line"><span class="comment">// less 里 @index 是从 1 开始的</span></span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="variable">@index</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: extract(<span class="variable">@adapterDeviceList</span>, <span class="variable">@index</span>)) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="variable">@baseRem</span> / <span class="variable">@psdWidth</span> * extract(<span class="variable">@adapterDeviceList</span>, <span class="variable">@index</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="selector-class">.adapter</span>(<span class="variable">@index</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// adapter.less</span></span><br><span class="line"><span class="selector-class">.adapter</span>(<span class="variable">@len</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;variables&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;mixins&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;adapter&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="弹性盒布局-合理布局"><a href="#弹性盒布局-合理布局" class="headerlink" title="弹性盒布局(合理布局)"></a>弹性盒布局(合理布局)</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 flex 布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对于多列的布局情形非常适合</strong></p>
<h2 id="百分比布局-宽度适配"><a href="#百分比布局-宽度适配" class="headerlink" title="百分比布局(宽度适配)"></a>百分比布局(宽度适配)</h2><p>只做到了宽度适配</p>
<h2 id="响应式布局-媒体查询"><a href="#响应式布局-媒体查询" class="headerlink" title="响应式布局(媒体查询)"></a>响应式布局(媒体查询)</h2><p>核心还是利用 <code>媒体查询</code></p>
<ul>
<li>如果是大项目，自己写响应式代码不现实，尽量利用 Bootstrap</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于更复杂的场景，需要更灵活考虑，<strong>没有一种适配方式可以囊括所有场景</strong></p>
<h1 id="1px-细线边框"><a href="#1px-细线边框" class="headerlink" title="1px 细线边框"></a>1px 细线边框</h1><p>方式一—— rem + initial-scale</p>
<ul>
<li>所有元素先放大  dpr 倍，再缩放 1/dpr</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 设计稿宽度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> WIDTH = <span class="number">750</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1 rem</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.documentElement.style.fontSize = (<span class="number">100</span> * screen.width / WIDTH) * dpr + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> scale = <span class="number">1</span> / dpr</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> content = <span class="string">`initial-scale=<span class="subst">$&#123;scale&#125;</span>, maximum-scale=<span class="subst">$&#123;scale&#125;</span>, minimum-scale=<span class="subst">$&#123;scale&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> meta = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;meta[name=viewport]&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  meta.content = content</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1rem</span>;</span><br><span class="line">  heiht: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式二 —— 伪元素 + transform</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border-1px-bot</span>,</span><br><span class="line"><span class="selector-class">.border-1px-top</span>,</span><br><span class="line"><span class="selector-class">.border-1px-left</span>,</span><br><span class="line"><span class="selector-class">.border-1px-right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-1px-bot</span><span class="selector-pseudo">::after</span>,</span><br><span class="line"><span class="selector-class">.border-1px-top</span><span class="selector-pseudo">::after</span>,</span><br><span class="line"><span class="selector-class">.border-1px-left</span><span class="selector-pseudo">::after</span>,</span><br><span class="line"><span class="selector-class">.border-1px-right</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-1px-bot</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-1px-top</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-1px-left</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-1px-right</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">1.5</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-max-device-pixel-ratio</span>: <span class="number">2.49</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.border-1px-bot</span><span class="selector-pseudo">::after</span>,</span><br><span class="line">  <span class="selector-class">.border-1px-top</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.border-1px-left</span><span class="selector-pseudo">::after</span>,</span><br><span class="line">  <span class="selector-class">.border-1px-right</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(.<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2.5</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.border-1px-bot</span><span class="selector-pseudo">::after</span>,</span><br><span class="line">  <span class="selector-class">.border-1px-top</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(.<span class="number">33</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.border-1px-left</span><span class="selector-pseudo">::after</span>,</span><br><span class="line">  <span class="selector-class">.border-1px-right</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(.<span class="number">33</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;border-1px-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>移动端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串的常用方法</title>
    <url>/2016/06/25/09-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="字符串API"><a href="#字符串API" class="headerlink" title="字符串API"></a>字符串API</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">MDN String</a></p>
<span id="more"></span>

<h1 id="字符串的属性"><a href="#字符串的属性" class="headerlink" title="字符串的属性"></a>字符串的属性</h1><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><p>字符串的长度</p>
<h1 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h1><p><font color="#f20">都不会影响原字符串</font></p>
<h2 id="charAt-num"><a href="#charAt-num" class="headerlink" title="charAt(num)"></a>charAt(num)</h2><p>获取指定位置的字符</p>
<ul>
<li>返回值 —— 指定索引位置的字符<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">var</span> ret = str.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(ret) <span class="comment">// &#x27;h&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><p>连接字符串, <font color="#f20">作用和 + 一样</font></p>
<ul>
<li>可以有一个或多个参数</li>
<li>返回值 —— 新字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27; world&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str3 = str1.concat(str2, <span class="string">&#x27;hehe&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str3) <span class="comment">// &#x27;hello worldhehe&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a><strong>indexOf()</strong></h2><p>检查一个字符串中是否含有指定字符串</p>
<ul>
<li>可以指定第二个参数, 指定开始查找的位置</li>
<li>返回值 —— 指定字符串的起始索引<ul>
<li>如果不含有, 则返回 -1<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="keyword">var</span> index = str.indexOf(<span class="string">&#x27;wo&#x27;</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">str.indexOf(<span class="string">&#x27;w&#x27;</span>, <span class="number">5</span>) <span class="comment">// -1，没找到</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h2><p>判断一个字符串是否包含另一个字符</p>
<ul>
<li><font color="#f20">区分大小写</font></li>
<li>返回值 —— true / false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str.includes(<span class="string">&#x27;he&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p>截取字符串</p>
<ul>
<li>包含开始索引, 不包含结束索引<ul>
<li>如果省略第二个参数, 则截取到结尾</li>
<li>负数表示从后开始计算</li>
</ul>
</li>
<li>返回值 —— 截取的字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str2 = str.slice(<span class="number">1</span>, <span class="number">4</span>) <span class="comment">// &#x27;orl&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h2><p>截取字符串</p>
<ul>
<li>包含开始索引, 不包含结束索引<ul>
<li>不能接收负值做参数, </li>
<li>如果传递了负数, 默认使用 0, 还会调整参数的位置（ <em>如果第二个参数比第一个小,则自动交换位置</em> ）</li>
</ul>
</li>
<li>返回值 —— 截取的字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str  = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str.substring(<span class="number">1</span>, <span class="number">4</span>) <span class="comment">// ell</span></span><br><span class="line"></span><br><span class="line">str.substring(<span class="number">1</span>, -<span class="number">1</span>) <span class="comment">// 相当于 str.substring(0, 1) // h</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h2><p>截取字符串</p>
<ul>
<li>第一个参数表示开始索引，第二个参数表示截取个数</li>
<li>返回值 —— 截取的字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.substr(<span class="number">0</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h2><p>转大写</p>
<ul>
<li>返回值 —— 新的字符串</li>
</ul>
<h2 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h2><p>转小写</p>
<ul>
<li>返回值 —— 新的字符串</li>
</ul>
<h2 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h2><p>判断当前字符串是否是以另外一个给定的子字符串“结尾”</p>
<ul>
<li>返回值 —— true / false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;Cats are the best!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.endsWith(<span class="string">&#x27;!&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h2><p>判断当前字符串是否是以另外一个给定的子字符串“开头”</p>
<ul>
<li>返回值 —— true / false</li>
</ul>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h2><p>删除一个字符串的两端空白</p>
<ul>
<li>返回值 —— 新字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&#x27;   Hello world!   &#x27;</span></span><br><span class="line">greeting.trim()</span><br><span class="line"><span class="built_in">console</span>.log(greeting);</span><br><span class="line"><span class="comment">// expected output: &quot;   Hello world!   &quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="padStart"><a href="#padStart" class="headerlink" title="padStart()"></a>padStart()</h2><p>用给定的字符串填充当前字符串，以便达到给定的长度</p>
<ul>
<li><em>原字符串前边填充</em></li>
<li>返回值 —— 新的字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)) <span class="comment">//  &quot;05&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd()"></a>padEnd()</h2><p>用给定的字符串填充当前字符串，以便达到给定的长度</p>
<ul>
<li><em>原字符串后边填充</em></li>
<li>返回值 —— 新的字符串</li>
</ul>
<h2 id="可以传递正则表达式作为参数的方法"><a href="#可以传递正则表达式作为参数的方法" class="headerlink" title="可以传递正则表达式作为参数的方法"></a>可以传递正则表达式作为参数的方法</h2><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p>将字符串 <code>拆分为一个字符串数组</code></p>
<ul>
<li>需要一个字符串（或正则）作为参数<ul>
<li>如果传递一个空串, 则将字符串的每一个字符作为数组的元素</li>
<li>如果传递一个正则，<em>不需要指定全局模式</em></li>
</ul>
</li>
<li>返回值 —— 字符串数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;1a2b3c4d5e6f7&#x27;</span></span><br><span class="line"><span class="keyword">var</span> result = str.split(<span class="regexp">/[A-z]/</span>) <span class="comment">// 按字母拆分 str</span></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// [1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">replace()</a></h3><p>用新的字符串替换部分符合条件的字符</p>
<ul>
<li>第一个参数可以是字符串，也可以是正则表达式</li>
<li>返回值 —— 新字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;你好漂亮漂亮&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str1 = str.replace(<span class="regexp">/漂亮/g</span>, <span class="string">&#x27;丑&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str1) <span class="comment">// &#x27;你好丑丑&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;1a2b3c&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str4 = str3.replace(<span class="regexp">/[A-z]/g</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 去掉字符串中的字母</span></span><br><span class="line"><span class="built_in">console</span>.log(str4) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a>replaceAll()</h3><p>替换所有</p>
<ul>
<li>如果参数为正则，必须指定全局模式</li>
<li>返回值 —— 新字符串</li>
</ul>
<h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><p>查询符合正则的字符的索引</p>
<ul>
<li><font color="#f20">不能指定全局模式</font></li>
<li>返回值 —— 第一个匹配的索引<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="keyword">var</span> ret = str.search(<span class="regexp">/a[bef]c/</span>) <span class="comment">// 搜索字符串中是否含有 abc 或者 aec 或 afc</span></span><br><span class="line"><span class="built_in">console</span>.log(ret) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><p>根据正则表达式将字符串中符合条件的内容 <strong>提取</strong> 出来</p>
<ul>
<li>默认情况下, match 只会找到第一个符合要求的内容, 找到以后就停止检索</li>
<li>返回值 —— 数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;1a2b3c&#x27;</span></span><br><span class="line"><span class="keyword">var</span> ret = str.match(<span class="regexp">/[A-z]/ig</span>)  <span class="comment">//(全局找字母, 忽略大小写)</span></span><br><span class="line"><span class="built_in">console</span>.log(ret) <span class="comment">// [a, b, c]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="字符串常见算法"><a href="#字符串常见算法" class="headerlink" title="字符串常见算法"></a>字符串常见算法</h1><p>将 - 划线字符串转驼峰字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCamelStr</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = str.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length ; i++) &#123;</span><br><span class="line">    arr[i] = arr[i].charAt(<span class="number">0</span>).toUpperCase() + arr[i].slice(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = toCamelStr(<span class="string">&#x27;get-element-by-id&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JS 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的常用方法</title>
    <url>/2016/07/05/10-%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h1><p>​<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN Array</a></p>
<span id="more"></span>

<h1 id="Array-对象的方法"><a href="#Array-对象的方法" class="headerlink" title="Array 对象的方法"></a>Array 对象的方法</h1><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from()</a></h2><ul>
<li>从类数组对象或者可迭代对象中创建一个新的数组实例</li>
<li>返回值 —— 一个新数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.从字符串生成</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">&#x27;foo&#x27;</span>) <span class="comment">// [&#x27;f&#x27;, &#x27;o&#x27;, &#x27;o&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.map 函数生成</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x + x) <span class="comment">// [2, 4, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.从类数组生成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="built_in">Array</span>.from(btns).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><ul>
<li>用来判断某个变量是否是一个数组对象</li>
<li>返回值 —— true /false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([]) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><ul>
<li>创建一个具有可变数量参数的新数组实例</li>
<li>返回值 —— 一个新数组</li>
</ul>
<p>⚠️ 与 Array() 的区别</p>
<ul>
<li>当传递单个数字参数时，Array.of() 是创建一个只有该数字的数组，而 Array() 是创建一个长度为该数字的空数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>)       <span class="comment">// [7] </span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">7</span>)         <span class="comment">// [ , , , , , , ]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)    <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Array-实例的方法"><a href="#Array-实例的方法" class="headerlink" title="Array 实例的方法"></a>Array 实例的方法</h1><h2 id="直接影响原数组的方法"><a href="#直接影响原数组的方法" class="headerlink" title="直接影响原数组的方法"></a>直接影响原数组的方法</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><ul>
<li>向数组最后添加一个或多个元素</li>
<li>返回值 —— 新数组的长度<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">arr.push(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = arr.push(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="built_in">console</span>.log(ret) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><ul>
<li>pop() <ul>
<li>删除数组最后一个元素</li>
<li>返回值 —— <code>被删除的元素</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = arr1.pop()</span><br><span class="line"><span class="built_in">console</span>.log(ret, arr1) <span class="comment">// 3  [1, 2]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><ul>
<li>向数组的最前面添加一个或多个元素</li>
<li>返回值 —— <code>新数组的长度</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> ret = arr2.unshift(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">cosnole.log(ret, arr2) <span class="comment">// 4  [3, 4, 1, 2]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><ul>
<li>删除数组的第一个元素</li>
<li>返回值 —— <code>被删除的元素</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> ret = arr3.shift()</span><br><span class="line">cosnole.log(ret, arr3) <span class="comment">// 1  [2]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="splice-start-howmany-item1…"><a href="#splice-start-howmany-item1…" class="headerlink" title="splice(start, howmany[, item1… ])"></a><strong>splice</strong>(start, howmany[, item1… ])</h3><ul>
<li><p>可以实现数组的 <strong>增 / 删 / 改</strong></p>
</li>
<li><p>第一个参数 —— 开始索引<br>第二个参数 —— 删除的个数<br>第三个(及以后的)参数 —— 从删除位置插入新元素</p>
</li>
<li><p>返回值 —— 被删除的元素数组, 如果没有被删除的元素返回空数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果只有两个参数，就是删除操作</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;angel&#x27;</span>, <span class="string">&#x27;clown&#x27;</span>, <span class="string">&#x27;drum&#x27;</span>, <span class="string">&#x27;mandarin&#x27;</span>, <span class="string">&#x27;sturgeon&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> removed = arr.splice(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr, removed) <span class="comment">// [&#x27;angel&#x27;, &#x27;clown&#x27;, &#x27;drum&#x27;, &#x27;sturgeon&#x27;] [&#x27;mandarin&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有三个以上参数，且第二个参数为 0，就是新增操作</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> removed = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr, removed) <span class="comment">// [1, 4, 2, 3] []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有三个以上参数，且第二个参数不为 0，就是改操作</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> removed = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr, removed) <span class="comment">// [1, 4] [2, 3]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] == arr[i]) &#123;</span><br><span class="line">            <span class="comment">// 如果相等, 则证明出现了重复元素, 则删除 j 位置对应的元素</span></span><br><span class="line">            arr.splice(j, <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 当删除了 j 所在位置的元素后, 后边的元素会自动补位</span></span><br><span class="line">            <span class="comment">// 此时将不再比较这个位置的元素,我们需要在比较一次 j 所在位置的元素</span></span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p>反转数组</p>
<ul>
<li>返回值 —— 反转后的新数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.reverse() </span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="sort-fn"><a href="#sort-fn" class="headerlink" title="sort([fn])"></a>sort([fn])</h3><p>数组排序</p>
<ul>
<li><p><font color=#c00>默认按照 Unicode 编码排序</font></p>
<ul>
<li>对数字排序，需要指定比较函数</li>
<li><strong>对对象元素按某个属性排序</strong>，也要指定排序函数</li>
</ul>
</li>
<li><p><strong>会直接修改原数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 非数字排序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;acd&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">arr.sort() <span class="comment">// [abc&#x27;, &#x27;acd&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数字排序 - 要指定比较函数</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">29</span>, <span class="number">3</span>]</span><br><span class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)  <span class="comment">// 升序排列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 按对象的某个属性排序</span></span><br><span class="line"><span class="keyword">var</span> items = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Edward&#x27;</span>, <span class="attr">value</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Sharpe&#x27;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;And&#x27;</span>, <span class="attr">value</span>: <span class="number">45</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;The&#x27;</span>, <span class="attr">value</span>: -<span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Magnetic&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Zeros&#x27;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by value</span></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (a.value - b.value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by name</span></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nameA = a.name.toUpperCase()  <span class="comment">// ignore upper and lowercase</span></span><br><span class="line">  <span class="keyword">var</span> nameB = b.name.toUpperCase()  <span class="comment">// ignore upper and lowercase</span></span><br><span class="line">  <span class="keyword">return</span> nameA - nameB</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="不影响原数组的方法"><a href="#不影响原数组的方法" class="headerlink" title="不影响原数组的方法"></a>不影响原数组的方法</h2><h3 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice(start[, end])"></a>slice(start[, end])</h3><ul>
<li>从数组中 <code>提取指定元素</code></li>
<li>参数是索引, 从开始到结束 (<strong>包含开始,不包含结束</strong>)<ul>
<li>如果传递负值, 则从后往前数</li>
</ul>
</li>
<li>返回值 —— 截取的新数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.slice(<span class="number">1</span>, <span class="number">4</span>) <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr1 = arr.slice(<span class="number">1</span>, -<span class="number">1</span>) <span class="comment">// [2, 3, 4]   -1 代表最后一个元素的索引</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><ul>
<li>连接两个或多个数组</li>
<li>返回值 —— 新数组<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = arr1.concat(arr2, arr3)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><ul>
<li>将数组转为字符串</li>
<li>可以指定一个字符作为数组元素连接符 (不指定则默认使用逗号连接)</li>
<li>返回值 —— 字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> ret = arr.join(<span class="string">&#x27;-&#x27;</span>) <span class="comment">// &#x27;1-2-3&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><h3 id="forEach-function-item-i-arr"><a href="#forEach-function-item-i-arr" class="headerlink" title="forEach(function(item[, i, arr]) { })"></a>forEach(function(item[, i, arr]) { })</h3><ul>
<li><strong>遍历数组</strong> (将数组中的每个元素都读取出来)</li>
<li>需要一个函数作为参数<ul>
<li><code>数组中有几个元素, 函数就会执行几次,</code> 每次执行时, 浏览器会把遍历到的元素以实参的形式传递进来;</li>
<li>我们可以定义形参, 来读取这些内容</li>
<li>第一个参数 —— 当前正在遍历的元素<br>第二个参数 —— 当前正在遍历的元素的索引<br>第三个参数 —— 当前数组</li>
</ul>
</li>
<li>返回值 —— undefined (<em>无返回值，默认返回 undefined</em>)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr4.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, i</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, i)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="map-function-item-index"><a href="#map-function-item-index" class="headerlink" title="map(function (item, index) {})"></a>map(function (item, index) {})</h3><ul>
<li>遍历数组</li>
<li>返回值 —— 由 <code>返回值</code> 生成的新数组<ul>
<li><font color=#c40>新数组和原数组长度一致, 一对一的关系</font></li>
<li>⚠️常用来对请求得到的数据进行进一步的筛选（<em>只取我们需要用到的属性</em>）<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item + <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr, arr1) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ret = response.data.items.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">name</span>: item.user_name,</span><br><span class="line">  <span class="attr">avatar</span>: item.pic</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="filter-function-item-index"><a href="#filter-function-item-index" class="headerlink" title="filter(function (item, index) {})"></a>filter(function (item, index) {})</h3><ul>
<li>遍历 <code>过滤出一个新的子数组</code>,</li>
<li>返回值 —— 条件为 true 的值组成的新数组<ul>
<li><font color=#c40>新数组是原数组的子数组, 长度可以比原数组小</font><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item &gt; <span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, arr2) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>] [<span class="number">6</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="数组的查找方法"><a href="#数组的查找方法" class="headerlink" title="数组的查找方法"></a>数组的查找方法</h2><h3 id="find-function-item-index-return-true"><a href="#find-function-item-index-return-true" class="headerlink" title="find(function (item, index) { return true })"></a>find(function (item, index) { return true })</h3><ul>
<li>找出第一个满足条件的值</li>
<li>返回值 —— 满足条件的第一个值或者 undefined (<em>没找到</em>)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.find(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">4</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="findIndex-function-item-index-return-true"><a href="#findIndex-function-item-index-return-true" class="headerlink" title="findIndex(function (item, index) { return true })"></a>findIndex(function (item, index) { return true })</h3><ul>
<li>找出第一个满足条件的值的索引 </li>
<li>返回值 —— 满足条件的第一个值的索引或者 -1 (<em>没有</em>)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> resultIndex = arr.findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">4</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="some-function-item-index-return-true"><a href="#some-function-item-index-return-true" class="headerlink" title="some(function (item, index) { return true })"></a>some(function (item, index) { return true })</h3><ul>
<li>数组中是否有符合条件的值</li>
<li>返回值 —— true /false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 id 删除元素</span></span><br><span class="line">arr.some(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item.id === <span class="number">4</span>) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 找到符合条件的后立即中止</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="indexOf-value"><a href="#indexOf-value" class="headerlink" title="indexOf(value)"></a>indexOf(value)</h3><ul>
<li>得到元素在数组中的第一个下标</li>
<li>返回值 —— 下标</li>
</ul>
<h3 id="lastIndexOf-value"><a href="#lastIndexOf-value" class="headerlink" title="lastIndexOf(value)"></a>lastIndexOf(value)</h3><ul>
<li>得到元素在数组中的最后一个下标</li>
<li>返回值 —— 下标<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">6</span>))  <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">6</span>)) <span class="comment">//5</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="includes-val"><a href="#includes-val" class="headerlink" title="includes(val)"></a>includes(val)</h3><ul>
<li>判断一个数组是否包含一个指定的值</li>
<li>返回值 —— true / false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.includes(<span class="number">2</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="数组累加-reduce"><a href="#数组累加-reduce" class="headerlink" title="数组累加 reduce()"></a>数组累加 reduce()</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</span><br><span class="line"><span class="comment">// 1. accumulator (acc) (累计器)</span></span><br><span class="line"><span class="comment">// 2. currentValue (cur) (当前值)</span></span><br><span class="line"><span class="comment">// 3. Current Index (idx) (当前索引)</span></span><br><span class="line"><span class="comment">// 4. Source Array (src) (源数组)</span></span><br><span class="line"><span class="comment">// 5. initialValue (初始值)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">参考</a></p>
<ul>
<li>函数累计处理的结果</li>
<li>返回值 —— 累计的结果</li>
<li><strong>返回值的类型 —— initialValue 的类型（最好提供）</strong>，如果未指定 initialValue，返回值类型由数组元素决定<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 求和</span></span><br><span class="line"><span class="keyword">var</span> total = [ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ].reduce(<span class="function">(<span class="params"> acc, cur </span>) =&gt;</span> acc + cur, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 二维数组转一维数组</span></span><br><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(b);</span><br><span class="line">  &#125;,</span><br><span class="line">  []</span><br><span class="line">);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 数组中元素出现的次数</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tiff&#x27;</span>, <span class="string">&#x27;Bruce&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countedNames = names.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">allNames, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (name <span class="keyword">in</span> allNames) &#123;</span><br><span class="line">    allNames[name]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    allNames[name] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> allNames;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="comment">// countedNames is:</span></span><br><span class="line"><span class="comment">// &#123; &#x27;Alice&#x27;: 2, &#x27;Bob&#x27;: 1, &#x27;Tiff&#x27;: 1, &#x27;Bruce&#x27;: 1 &#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>回调函数第一次执行时，<code>accumulator</code> 和<code>currentValue</code>的取值有两种情况：</p>
<p>​ 如果调用<code>reduce()</code>时提供了<code>initialValue</code>，<code>accumulator</code>取值为<code>initialValue</code>，<code>currentValue</code>取数组中的第一个值</p>
<p>​ 如果没有提供 <code>initialValue</code>，那么<code>accumulator</code>取数组中的第一个值，<code>currentValue</code>取数组中的第二个值</p>
</blockquote>
<h1 id="some-和-forEach-的区别"><a href="#some-和-forEach-的区别" class="headerlink" title="some 和 forEach 的区别"></a>some 和 forEach 的区别</h1><ol>
<li><p>返回值不同</p>
<ul>
<li>some 返回 true/false, forEach 返回 undefied</li>
</ul>
</li>
<li><p>遍历机制不同</p>
<ul>
<li>some 回调内如果指明了 return true，则当前遍历会终止</li>
<li>forEach 则会从头到尾遍历每一个元素<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;red&quot;</span>];</span><br><span class="line">     <span class="comment">// 1. forEach迭代 遍历</span></span><br><span class="line">     arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (item == <span class="string">&#x27;green&#x27;</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;找到了该元素&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 在forEach 里面 return 不会终止迭代</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">11</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 如果查询数组中唯一的元素, 用some方法更合适</span></span><br><span class="line">     arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (item == <span class="string">&quot;red&quot;</span>) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;找到了该元素:&quot;</span> + item);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//  在some 里面 遇到 return true 就是终止遍历 迭代效率更高</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="number">11</span>);</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h1 id="总结数组常用方法"><a href="#总结数组常用方法" class="headerlink" title="总结数组常用方法"></a>总结数组常用方法</h1><table>
<thead>
<tr>
<th align="center">方法名</th>
<th>回调的返回值</th>
<th>方法的返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">map</td>
<td>算术表达式*(item + 2)* / 任意类型</td>
<td>由回调的返回值生成新的数组</td>
</tr>
<tr>
<td align="center">filter</td>
<td>条件表达式 / true <em>(if(){…return true})</em></td>
<td>由使回调的返回值为 true 的数组元素生成新的数组</td>
</tr>
<tr>
<td align="center">find</td>
<td>条件表达式 / true <em>(if(){…return true})</em></td>
<td>使回调的返回值为 true 的数组元素</td>
</tr>
<tr>
<td align="center">findIndex</td>
<td>同上</td>
<td>使回调的返回值为 true 的数组元素的索引</td>
</tr>
<tr>
<td align="center">some</td>
<td>同上</td>
<td>true/false</td>
</tr>
<tr>
<td align="center">forEach</td>
<td>不需要返回值 <em>(可以指定，但没有意义)</em></td>
<td>undefined</td>
</tr>
<tr>
<td align="center">sort</td>
<td>a - b (升序)  /  b - a (降序)</td>
<td>undefined</td>
</tr>
</tbody></table>
<h1 id="数组常见算法"><a href="#数组常见算法" class="headerlink" title="数组常见算法"></a>数组常见算法</h1><h2 id="只取一个数组中元素的部分属性生成一个新数组"><a href="#只取一个数组中元素的部分属性生成一个新数组" class="headerlink" title="只取一个数组中元素的部分属性生成一个新数组"></a>只取一个数组中元素的部分属性生成一个新数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组 result 的每个元素为一个对象 &#123; name: &#x27;zs&#x27;, age: 18, id: 1, gender: 1 &#125;</span></span><br><span class="line"><span class="comment">// 求生成一个新数组，只包含 name 和 id 属性</span></span><br><span class="line"><span class="keyword">const</span> newResult = result.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123; <span class="attr">name</span>: item.name, <span class="attr">id</span>: item.id &#125;))</span><br></pre></td></tr></table></figure>

<h2 id="一维数组变二维数组"><a href="#一维数组变二维数组" class="headerlink" title="一维数组变二维数组"></a>一维数组变二维数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arr1 是一维数组，由 arr1 一个生成二维数组，二维数组的每个元素最大长度为 8</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [&#123;&#125;, &#123;&#125;, ...,&#123;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">let</span> innerArr = []</span><br><span class="line">  arr1.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果内部数组是空的，塞入外部数组</span></span><br><span class="line">    <span class="keyword">if</span> (innerArr.length === <span class="number">0</span>) &#123;</span><br><span class="line">      arr.push(innerArr)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    innerArr.push(item)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内部数组塞满后立即置空</span></span><br><span class="line">    <span class="keyword">if</span> (innerArr.length === <span class="number">8</span>) &#123;</span><br><span class="line">      innerArr = []</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多条件过滤"><a href="#多条件过滤" class="headerlink" title="多条件过滤"></a>多条件过滤</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组 ratings 存的是评论数据</span></span><br><span class="line"><span class="comment">// 每条评论有属性 rateType 0-满意 1-不满意；text-评论内容</span></span><br><span class="line"><span class="comment">// 需要根据 ‘全部’‘满意’‘不满意’ 以及 ‘只看有内容的评论’ 对数组进行过滤</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> selectType = <span class="number">2</span> <span class="comment">// 自定义变量表示选中的类型，可根据选择重新设置 0-满意 1-不满意 2-全部</span></span><br><span class="line"><span class="keyword">let</span> onlyText = <span class="literal">false</span> <span class="comment">// 自定义变量表示是否只看有内容的评论</span></span><br><span class="line"><span class="keyword">const</span> filterArr = ratings.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (selectType === <span class="number">2</span> || item.rateType === selectType) &amp;&amp; </span><br><span class="line">         (!onlyText || text.length &gt;<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JS 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>对象的常用方法</title>
    <url>/2016/07/06/11-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="对象的常用方法"><a href="#对象的常用方法" class="headerlink" title="对象的常用方法"></a>对象的常用方法</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">MDN Object</a></p>
<span id="more"></span>

<h1 id="Object-对象的方法"><a href="#Object-对象的方法" class="headerlink" title="Object 对象的方法"></a>Object 对象的方法</h1><h2 id="Object-assign-target-source"><a href="#Object-assign-target-source" class="headerlink" title="Object.assign(target, source)"></a>Object.assign(target, source)</h2><ul>
<li>用于将一个对象(source)上的所有属性驾到另一个对象(target)中</li>
<li>如果有相同属性，则覆盖之</li>
<li>返回值 —— 新的融合了所有源对象属性的对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">let</span> source = &#123; <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="number">5</span> &#125;</span><br><span class="line"></span><br><span class="line">target = <span class="built_in">Object</span>.assign(target, source)</span><br><span class="line"><span class="built_in">console</span>.log(target) <span class="comment">// &#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h2><ul>
<li>返回值 —— 由给定对象的自身可枚举<strong>属性组成的数组</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="attr">action</span>: &#123;</span><br><span class="line">    <span class="number">123</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="number">456</span>: <span class="string">&#x27;456&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))  <span class="comment">// [&#x27;name&#x27;, &#x27;age&#x27;, &#x27;action&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h2><p>返回值 —— 由给定对象的<strong>属性值组成的数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="attr">action</span>: &#123;</span><br><span class="line">    <span class="number">123</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="number">456</span>: <span class="string">&#x27;456&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)) <span class="comment">// [&#x27;张三&#x27;, 17, &#123; 123: &#x27;123&#x27;, 456: &#x27;456&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<h1 id="Object-实例的方法"><a href="#Object-实例的方法" class="headerlink" title="Object 实例的方法"></a>Object 实例的方法</h1><h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString()"></a>Object.prototype.toString()</h2><ul>
<li>返回值 —— 返回一个表示该对象的字符串<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">obj.toString() <span class="comment">// &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="使用-toString-检测数据类型"><a href="#使用-toString-检测数据类型" class="headerlink" title="使用 toString() 检测数据类型"></a>使用 <code>toString()</code> 检测数据类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString</span><br><span class="line"></span><br><span class="line">toString.call(<span class="string">&#x27;abcd&#x27;</span>)        <span class="comment">// &#x27;[object String]&#x27;</span></span><br><span class="line">toString.call(<span class="number">12</span>)            <span class="comment">// &#x27;[object Number]&#x27;</span></span><br><span class="line">toString.call(<span class="literal">true</span>)          <span class="comment">// &#x27;[object Boolean]&#x27;</span></span><br><span class="line">toString.call(<span class="literal">null</span>)          <span class="comment">// &#x27;[object Null]&#x27;</span></span><br><span class="line">toString.call(<span class="literal">undefined</span>)     <span class="comment">// &#x27;[object Undefined]&#x27;</span></span><br><span class="line"></span><br><span class="line">toString.call([<span class="number">1</span>, <span class="number">2</span>])        <span class="comment">// &#x27;[object Array]&#x27;</span></span><br><span class="line">toString.call(<span class="keyword">new</span> <span class="built_in">Function</span>)  <span class="comment">// &#x27;[object Function]&#x27;</span></span><br><span class="line">toString.call(<span class="keyword">new</span> <span class="built_in">Object</span>)    <span class="comment">// &#x27;[object Object]&#x27;</span></span><br><span class="line"></span><br><span class="line">toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>)      <span class="comment">// &#x27;[object Date]&#x27;</span></span><br><span class="line">toString.call(<span class="built_in">Math</span>)          <span class="comment">// &#x27;[object Math]&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="判断一个对象是否为空对象"><a href="#判断一个对象是否为空对象" class="headerlink" title="判断一个对象是否为空对象"></a>判断一个对象是否为空对象</h1><ol>
<li><p>JSON.stringify()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(obj) === <span class="string">&#x27;&#123;&#125;&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;是空对象&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Object.keys()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;空对象&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>JS 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2016/06/05/01-HTML/</url>
    <content><![CDATA[<h1 id="网站是什么"><a href="#网站是什么" class="headerlink" title="网站是什么"></a>网站是什么</h1><p><a href="http://c.biancheng.net/view/7410.html">参考资料</a></p>
<p>网站是由一个一个网页构成的，要想理解网站是什么，首先要理解网页是什么</p>
<p>可以认为，网站就是放在服务器上的一个文件夹，该文件夹中可以包含子文件夹以及各种各样的文件，这些文件都可以通过域名来访问</p>
<span id="more"></span>

<h2 id="网页是什么"><a href="#网页是什么" class="headerlink" title="网页是什么"></a>网页是什么</h2><p>网页其实就是放在服务器上的一个文件，当我们浏览网页时，浏览器向服务器发请求，然后对请求的结果进行解析，渲染出各种漂亮的界面，比如表格、图片、标题、列表等</p>
<p>网页的本质 —— <strong>由 HTML 代码构成的纯文本文件</strong></p>
<h1 id="网页的基本构成"><a href="#网页的基本构成" class="headerlink" title="网页的基本构成"></a>网页的基本构成</h1><p>结构</p>
<ul>
<li>HTML —— 用于描述页面的结构</li>
<li>使用 <strong><code>标签</code></strong> 的形式来标识网页中的不同组成部分</li>
<li><code>纯文本</code>只能保存文本内容</li>
</ul>
<p>表现</p>
<ul>
<li>CSS —— 用于控制页面中元素的样式</li>
</ul>
<p>行为</p>
<ul>
<li>JS —— 用于响应用户操作</li>
</ul>
<h1 id="什么是-HTML"><a href="#什么是-HTML" class="headerlink" title="什么是 HTML"></a>什么是 HTML</h1><p>HTML 全称 —— 超文本标记语言</p>
<p>HTML 可以将符合规范的字符串让浏览器解析生成网页，没有 html 包裹的字符是无法被浏览器识别的</p>
<p>HTML 是由一系列节点组成的，我们网页结构中的标签、注释、属性、文本都是节点</p>
<p>总结起来，<strong>HTML 就是将这些节点通过浏览器解析后生成网页的一种计算机语言</strong></p>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p><a href="http://www.w3school.com.cn/tags/index.asp"><strong>HTML 标签汇总</strong></a></p>
<h2 id="网页版本声明-doctype"><a href="#网页版本声明-doctype" class="headerlink" title="网页版本声明 doctype"></a>网页版本声明 doctype</h2><p>doctype</p>
<ul>
<li>加在网页最顶部</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html5 的版本声明 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="html-标签"><a href="#html-标签" class="headerlink" title="html 标签"></a>html 标签</h2><p>此元素可告知浏览器其自身是一个 HTML 文档</p>
<p>根标签, 一个网页中有且只有一个.网页中所有内容都应该写在根标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>lang 指明你的网页是英文还是中文网页，当指定值和本地浏览器默认值不一样时，浏览器会提示 <code>是否翻译为中文</code>, 可以不指定，也可以指定为 <code>zh-CN</code></p>
<table>
<thead>
<tr>
<th>常用属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>“en”</td>
<td>声明此网页为英文网页</td>
</tr>
<tr>
<td>“zh-CN”</td>
<td>声明此网页为中文网页</td>
</tr>
<tr>
<td>不写 lang</td>
<td>浏览器自行判断是否弹出<code>是否翻译</code></td>
</tr>
</tbody></table>
<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>meta、title、link、style 以及 script 标签是可以放在 head 标签内部的</p>
<h2 id="meta-标签"><a href="#meta-标签" class="headerlink" title="meta 标签"></a>meta 标签</h2><p>meta 标签内的信息不会显示在页面中</p>
<p>meta 标签有很多功能</p>
<ol>
<li>可以定义文档中的关键字</li>
<li>可以对文档进行描述</li>
<li>可以配合自身的属性设置网页的过期时间</li>
</ol>
<h3 id="meta-的-charset-属性"><a href="#meta-的-charset-属性" class="headerlink" title="meta 的 charset 属性"></a>meta 的 charset 属性</h3><p>用来定义页面的编码格式</p>
<table>
<thead>
<tr>
<th>常用属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ISO-8859-1</td>
<td>表示网页的默认编码格式</td>
</tr>
<tr>
<td>UTF-8</td>
<td>表示万国码，是目前最常用的编码格式</td>
</tr>
<tr>
<td>gb2312</td>
<td>表示国际汉字码，不包含繁体</td>
</tr>
<tr>
<td>gbk</td>
<td>表示国家标准扩展版。增加了繁体，包含所有亚洲字符集</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><ul>
<li><p>计算机只认识 0 和 1</p>
<ul>
<li>编码——依据一定的规则, 将字符转换成二进制编码的过程</li>
<li>解码——依据一定的规则,将二进制编码转换为字符的过程</li>
<li>字符集——编码和解码的规则<ul>
<li>常见的字符集<ul>
<li>ASCII</li>
<li>ISO-8859-1</li>
<li>GBK</li>
<li>GB2312</li>
<li>UTF-8 (最常用)</li>
<li>ANSI (自动以系统的默认编码来保存文件)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>产生乱码的原因</p>
<ul>
<li><p>编码和解码采用的字符集不同</p>
</li>
<li><p>解决方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="meta-的-name-属性"><a href="#meta-的-name-属性" class="headerlink" title="meta 的 name 属性"></a>meta 的 name 属性</h3><p>name 属性可以用来定义网页的关键字、描述、作者以及版权信息</p>
<table>
<thead>
<tr>
<th>常用属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>keywords</td>
<td>用来定义网页的关键字。关键字可以是多个，之间需要用英文逗号<code>,</code>隔开</td>
</tr>
<tr>
<td>description</td>
<td>用来定义网页的描述</td>
</tr>
<tr>
<td>author</td>
<td>用来定义网页的作者</td>
</tr>
<tr>
<td>copyright</td>
<td>用来定义网页的版权信息</td>
</tr>
<tr>
<td>viewport</td>
<td>优化移动浏览器的显示</td>
</tr>
<tr>
<td>theme-color</td>
<td>浏览器地址栏变色</td>
</tr>
<tr>
<td>format-detection</td>
<td>忽略页面中符合格式的字符识别为电话号码和邮箱</td>
</tr>
<tr>
<td>apple-mobile-web-app-capable</td>
<td>启用 WebApp 全屏模式</td>
</tr>
<tr>
<td>apple-mobile-web-app-status-bar-style</td>
<td>隐藏状态栏/设置状态栏颜色：只有在开启WebApp全屏模式时才生效(content的值为default | black | black-translucent)</td>
</tr>
</tbody></table>
<p>name 属性需要和 content 属性一起使用才能生效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&lt;head&gt;标签描述&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;这篇文章主要对&lt;head&gt;标签进行详细讲解&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;author&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;copyright&quot;</span> <span class="attr">content</span>=<span class="string">&quot;本站所有教程均为原创，版权所有，禁止转载。否则将追究法律责任。&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telphone=no, email=no&quot;</span>/&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="attr">content</span>=<span class="string">&quot;black-translucent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mea-的-http-equip-属性"><a href="#mea-的-http-equip-属性" class="headerlink" title="mea 的 http-equip 属性"></a>mea 的 http-equip 属性</h3><p>可以设置网页的过期时间，自动刷新</p>
<table>
<thead>
<tr>
<th>常用属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>expires</td>
<td>设置网页的过期时间</td>
</tr>
<tr>
<td>refresh</td>
<td>设置网页自动刷新的时间间隔，单位是秒</td>
</tr>
<tr>
<td>content-type</td>
<td>定义文件的类型，用来告诉浏览器该以什么格式和编码来解析此文件</td>
</tr>
<tr>
<td>X-UA-Compatible</td>
<td>避免 IE 使用兼容模式</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html&quot;</span>&gt;</span> 用来告诉浏览器本网页编写的是 HTML 代码，需要用 HTML 的格式来进行解析</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Dec 20 2090&quot;</span>&gt;</span> 定义网页于 2090 年 12 月 20 日过期</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;1000&quot;</span>&gt;</span> 设置了页面每隔 1000 秒就会进行一次刷新</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5s 后跳到百度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5;url=http://www.baidu.com&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>http-equiv 也需要搭配 content 属性来使用</p>
<h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p>用来表示文档的标题, 搜索引擎在检索页面时, 会首先检索 title 标签 中的内容</p>
<h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><link> 标签配合 href 属性来引用外部 CSS

<ul>
<li><p><strong>链入一个文档, 通过 rel 属性指定链入文档内容的类型</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>用来在内部编写 CSS 样式</p>
<h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>用来引入外部文件, 配合 src 属性</p>
<p><em>不建议写在 head 中</em></p>
<h3 id="href-和-src-的区别"><a href="#href-和-src-的区别" class="headerlink" title="href 和 src 的区别"></a>href 和 src 的区别</h3><ul>
<li>src 是 source 的简写，表示来源地址，用来引入地址中的内容。<strong>引入的内容会嵌入到当前标签所在的位置</strong>，所以浏览器在解析引入文件时，会停止对后续文档的处理，直到 src 的内容加载完毕</li>
<li>href 是 Hypertext Reference 的简写，表示超文本引用。在使用 href 时，浏览器不会停止解析当前文件。因为 href 属性中的内容只是与当前页面有关联，然后当前页面对它进行一次引用</li>
</ul>
<h1 id="a"><a href="#a" class="headerlink" title="a"></a>a</h1><p><a> 标签来表示超链接</p>
<p>href 属性用来指明要跳转到的 url，target 属性用来指明新页面的打开方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://c.biancheng.net&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>C语言中文网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="a-标签的-href-属性"><a href="#a-标签的-href-属性" class="headerlink" title="a 标签的 href 属性"></a>a 标签的 href 属性</h2><p>属性指定链接的目标，也就是要跳转到什么位置，href 可以有多种形式</p>
<p>href 使用的路径可以是绝对路径，也可以是相对路径</p>
<h2 id="a-标签的-target-属性"><a href="#a-标签的-target-属性" class="headerlink" title="a 标签的 target 属性"></a>a 标签的 target 属性</h2><p>使用 target 属性来改变目标窗口的打开方式</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>_self</td>
<td>默认，在现有的窗口中打开新页面，原窗口将被覆盖</td>
</tr>
<tr>
<td>_blank</td>
<td>在新的窗口中打开新页面</td>
</tr>
</tbody></table>
<h2 id="a-标签的默认样式"><a href="#a-标签的默认样式" class="headerlink" title="a 标签的默认样式"></a>a 标签的默认样式</h2><p>a 标签默认带有下划线，字体为蓝色</p>
<p>可以重置 a 标签的样式</p>
<h1 id="img"><a href="#img" class="headerlink" title="img"></a>img</h1><p>用来引入一张图片，src 属性的值可以是绝对路径，也可以是相对路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/logo.jpg&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>img 标签如果只指定宽度(或高度)，图片默认是等比缩放的</p>
<p>img 元素默认有 3px 下边距</p>
<ul>
<li>如何解决？<ol>
<li>display: block;</li>
<li>vertical-align: middle;</li>
<li>img 父元素设置 font-size: 0;</li>
</ol>
</li>
</ul>
<h1 id="form"><a href="#form" class="headerlink" title="form"></a>form</h1><p>HTML 中的表单不仅可以供用户填写信息还可以为用户提供信息，将用户信息提交给服务器</p>
<p>表单元素应该放在 <form> 标签中, form 不可以嵌套</p>
<table>
<thead>
<tr>
<th>form 常用属性</th>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>action</td>
<td>url</td>
<td>表单被提交到的位置</td>
</tr>
<tr>
<td>method</td>
<td>get / post</td>
<td>表单提交时的请求方式</td>
</tr>
<tr>
<td>autocomplete</td>
<td>“autocomplete”</td>
<td>输入提示</td>
</tr>
<tr>
<td>novalidate</td>
<td>“novalidate”</td>
<td>浏览器开启表单验证</td>
</tr>
<tr>
<td>enctype</td>
<td>“url-encoded” / “multipart/form-data”</td>
<td>提交的数据编码，有文件域时必须设置</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">name</span>=<span class="string">&quot;formName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>是自闭合标签，根据其 type 属性值的不同分为很多种，例如单行文本框、密码框、单选按钮、复选框、隐藏域、文件上传域、普通按钮、提交按钮以及重置按钮等</p>
<table>
<thead>
<tr>
<th>常用 type 值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>单行文本框</td>
</tr>
<tr>
<td>password</td>
<td>密码框</td>
</tr>
<tr>
<td>radio</td>
<td>单选按钮</td>
</tr>
<tr>
<td>checkbox</td>
<td>复选按钮</td>
</tr>
<tr>
<td>button</td>
<td>普通按钮</td>
</tr>
<tr>
<td>submit</td>
<td>带提交功能的按钮</td>
</tr>
<tr>
<td>reset</td>
<td>带重置功能的按钮</td>
</tr>
<tr>
<td>file</td>
<td>文件域</td>
</tr>
<tr>
<td>hidden</td>
<td>隐藏域</td>
</tr>
</tbody></table>
<p><strong>hidden 表示隐藏域，在页面中对于用户是不可见的，在表单中插入隐藏域可以方便收集或发送信息</strong></p>
<h2 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a>单行文本框</h2><p>type=”text” 就是单行文本框</p>
<p>⚠️ 当 input 内还有其他元素时，<strong>注意层级问题</strong></p>
<h3 id="maxlength"><a href="#maxlength" class="headerlink" title="maxlength"></a>maxlength</h3><p>maxlength —— 设置文本框中最多可以输入的字符数量（包括空格）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入...&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h2><ol>
<li>name 属性值应该相同</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://vip.biancheng.net/login.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">name</span>=<span class="string">&quot;formName&quot;</span>&gt;</span></span><br><span class="line">  性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>checked 属性用来设置页面加载时单选按钮的选中状态</p>
</li>
<li><p>value 值并不会显示在页面中, 但是提交表单时，提交给服务器的是 value 值</p>
</li>
</ol>
<h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span>足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">checked</span> /&gt;</span>羽毛球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span>篮球</span><br></pre></td></tr></table></figure>

<p>和单选按钮的区别</p>
<ul>
<li>提交表单时，单选按钮提交的是选中项的 value 字符串；而复选框提交的是选中项的 value 组成的数组</li>
</ul>
<h2 id="文件域"><a href="#文件域" class="headerlink" title="文件域"></a>文件域</h2><p>要保证文件可以正确提交给表单服务器, </p>
<ol>
<li><p>需要设置 form 的 enctype 属性为 multipart/form-data,</p>
</li>
<li><p>还需要指定文件类型 accept</p>
</li>
<li><p>必须是 post 请求</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://vip.biancheng.net/register.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="multiple"><a href="#multiple" class="headerlink" title="multiple"></a>multiple</h3><p>当给上传文件字段设置了 multiple 属性时，就表示可以同时选择多个文件一起上传</p>
<h3 id="常用的文件类型"><a href="#常用的文件类型" class="headerlink" title="常用的文件类型"></a>常用的文件类型</h3><table>
<thead>
<tr>
<th>常用文件类型</th>
<th>对应的 accept 属性值</th>
</tr>
</thead>
<tbody><tr>
<td>.jpg</td>
<td>image/jpg</td>
</tr>
<tr>
<td>.png</td>
<td>image/png</td>
</tr>
<tr>
<td>.gif</td>
<td>image/gif</td>
</tr>
<tr>
<td>.jpeg</td>
<td>image/jpeg</td>
</tr>
<tr>
<td>.html</td>
<td>text/html</td>
</tr>
<tr>
<td>.css</td>
<td>text/css</td>
</tr>
<tr>
<td>.js</td>
<td>text/javascript、application/javascript</td>
</tr>
<tr>
<td>.txt</td>
<td>text/plain</td>
</tr>
<tr>
<td>.zip</td>
<td>application/zip</td>
</tr>
<tr>
<td>.mp4</td>
<td>audio/mp4、video/mp4</td>
</tr>
</tbody></table>
<h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><p>多行文本框，又叫做文本域</p>
<p>文本域要想正确提交，也必须设置 name 属性</p>
<p>默认右下角显示缩放按钮，可以通过样式让其不可缩放 <code>resize:none;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://vip.biancheng.net/register.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    描述信息：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">style</span>=<span class="string">&quot;resize:none;&quot;</span>&gt;</span>此处是描述信息<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>下拉列表，配合 option 使用</p>
<p>下拉列表要想被正确提交，也需要设置 name 属性</p>
<ul>
<li><p>multiple —— 按住<code>ctrl</code>+鼠标左键就可以选择多个选项</p>
</li>
<li><p>selected —— 加给 option 实现某一项的预先选中</p>
</li>
<li><p>value —— 用来定义当下拉列表在提交时，发送给服务器的值</p>
</li>
<li><p>在 select 中可以使用 optgroup 对选项进行分组, 同一个 optgroup 中的选项是一组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">selected</span>&gt;</span>胡歌<span class="tag">&lt;/<span class="name">option</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>彭于晏<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>吴彦祖<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;男明星&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">selected</span>&gt;</span>胡歌<span class="tag">&lt;/<span class="name">option</span>&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>彭于晏<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>吴彦祖<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;女明星&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>胡歌<span class="tag">&lt;/<span class="name">option</span>&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>彭于晏<span class="tag">&lt;/<span class="name">option</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span>吴彦祖<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通按钮，不会提交表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交按钮，点击会提交表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 重置按钮，点击会清空表单数据, reset 按钮只能清空用户输入的内容，提前设置好的内容不会清空 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h2><p>可以指定一个 for 属性, 该属性值需要指定一个表单项的 id 值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="fieldset"><a href="#fieldset" class="headerlink" title="fieldset"></a>fieldset</h2><p>在表单中可以使用 fieldset 来为表单分组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span>    </span><br><span class="line">    密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="图像按钮"><a href="#图像按钮" class="headerlink" title="图像按钮"></a>图像按钮</h2><p>既有 img 的属性，也有提交按钮的功能</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;btn.jpg&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单元素的-name-属性"><a href="#表单元素的-name-属性" class="headerlink" title="表单元素的 name 属性"></a>表单元素的 name 属性</h2><p>HTML 规定如果表单要想正确地被提交给表单处理器，必须为每个字段都设置 name 属性</p>
<p>如果未设置，默认不提交其数据信息</p>
<h2 id="表单元素的-disabled-属性"><a href="#表单元素的-disabled-属性" class="headerlink" title="表单元素的 disabled 属性"></a>表单元素的 disabled 属性</h2><p>如果为 input 标签的某个控件设置了<code>disabled=&quot;disabled&quot;</code>，表示将禁用该控件，使其不能再获得焦点或被修改。被禁用后，它的值不会提交到后台</p>
<h2 id="表单元素的-readOnly-属性"><a href="#表单元素的-readOnly-属性" class="headerlink" title="表单元素的 readOnly 属性"></a>表单元素的 readOnly 属性</h2><p>一般用在单行文本框和密码框中</p>
<p>控件的值可以显示，但不能修改</p>
<h1 id="标题标签-h1-h6"><a href="#标题标签-h1-h6" class="headerlink" title="标题标签  h1 - h6"></a>标题标签  <code>h1 - h6</code></h1><p>对搜索引擎来说, h1 的重要性仅次于 title, 会影响到 SEO, 页面里只写一个 h1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="段落标签-p"><a href="#段落标签-p" class="headerlink" title="段落标签  p"></a>段落标签  p</h1><p>默认独占一行, 且有行高</p>
<ul>
<li><strong>内部不能嵌套 div</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    一个段落……</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="换行标签-br"><a href="#换行标签-br" class="headerlink" title="换行标签  br"></a>换行标签  <code>br</code></h1><p>在 HTML 中, 字符之间写再多的空格, 浏览器也会当成一个空格解析, 换行也会当作一个空格解析</p>
<ul>
<li><p>可以使用 br 标签来换行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    锄禾日当午,<span class="tag">&lt;<span class="name">br</span> /&gt;</span>    </span><br><span class="line">    汗滴禾下土,<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    谁知盘中餐,<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    粒粒皆辛苦.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="水平线-hr"><a href="#水平线-hr" class="headerlink" title="水平线  hr"></a>水平线  <code>hr</code></h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>hr 默认的颜色要通过 background-color 来设置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">hr &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#6EECB4</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="iframe-内联框架-iframe"><a href="#iframe-内联框架-iframe" class="headerlink" title="iframe 内联框架  iframe"></a>iframe 内联框架  <code>iframe</code></h1><p>可以在一个页面里, 引入一个外部页面</p>
<ul>
<li><p>内联框架的内容不会被搜索引擎检索到</p>
</li>
<li><p>src —— 相对路径</p>
</li>
<li><p>width —— 宽度</p>
</li>
<li><p>height —— 高度</p>
</li>
<li><p>name —— 名字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo01.html&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="center-标签-center-不常用"><a href="#center-标签-center-不常用" class="headerlink" title="center 标签  center (不常用)"></a>center 标签  <code>center</code> (不常用)</h1><p>内容会默认在页面中居中显示</p>
<ul>
<li><p>可以把所有要居中的内容放在 center 标签里</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h1><table>
<thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>em / i</td>
<td>倾斜</td>
</tr>
<tr>
<td>strong / b</td>
<td>加粗</td>
</tr>
<tr>
<td>ins / u</td>
<td>下划线</td>
</tr>
<tr>
<td>del / s</td>
<td>删除线</td>
</tr>
<tr>
<td>small</td>
<td>比父元素文字小</td>
</tr>
<tr>
<td>cite</td>
<td>带书名号的内容可以加上 cite</td>
</tr>
<tr>
<td>q</td>
<td>短引用(名人语录, 浏览器会为 q 标签的内容加上引号), 行内元素</td>
</tr>
<tr>
<td>block quote</td>
<td>长引用, 块级元素</td>
</tr>
<tr>
<td>sup</td>
<td>上标</td>
</tr>
<tr>
<td>sub</td>
<td>下标</td>
</tr>
<tr>
<td>pre</td>
<td>预格式标签, 怎么写的就怎么显示</td>
</tr>
<tr>
<td>code</td>
<td>代码段标签, (一般结合 pre 标签使用)</td>
</tr>
</tbody></table>
<h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><p>ul &gt; li</p>
<ul>
<li>通过 type 属性可以修改圆点的样式</li>
</ul>
<h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><p>ol &gt; li</p>
<ul>
<li>有序号, 通过 type 属性可以修改序号的类型</li>
<li>列表之间可以相互嵌套</li>
</ul>
<h1 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h1><p>对一些词汇或内容进行定义</p>
<ul>
<li><p>dl &gt; dt + dd</p>
</li>
<li><p>dt —— 被定义的内容</p>
</li>
<li><p>dd —— 对定义内容的描述</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>武汉市湖北省省会...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>拥有长江...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="表格-table"><a href="#表格-table" class="headerlink" title="表格  table"></a>表格  table</h1><p>用来表示一些<font color=#c00><code>格式化</code>的数据</font>的</p>
<ul>
<li><p>th 标签</p>
<ul>
<li>表头内容 (特殊的 td)</li>
<li>文字默认居中, 加粗</li>
</ul>
</li>
<li><p>colspan 横向合并单元格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>D3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>rowspan 横向合并单元格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>D3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>border-spacing (table 和 td 之间的距离)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
<li><p><font color=#c00>border-collapse (边框合并, <code>加给 table</code>)</font></p>
<ul>
<li>设置了 border-collapse, border-spacing 会失效</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure></li>
<li><p>如果表格中没有写 tbody, 浏览器会自动在表格中添加 tbody, 并将所有的 tr 都放到 tbody 中; </p>
<p>所以注意, <code>tr 并不是 table 的直接子元素</code></p>
</li>
</ul>
<h1 id="框架集"><a href="#框架集" class="headerlink" title="框架集"></a>框架集</h1><p>框架集和内联框架的作用类似, 都是用于在一个页面中引入其他外部的页面</p>
<ul>
<li><p>框架集可以同时引入<code>多个页面</code>, 内联框架只能引入一个</p>
</li>
<li><p>使用 frameset 来创建一个框架集</p>
<ul>
<li><p>frameset 不能和 body 出现在同一个页面中</p>
</li>
<li><p>frame 来指定要引入的页面</p>
<ul>
<li>rows —— 指定引入的框架一行一行地排列</li>
<li>cols —— 指定引入的框架一列一列地排列</li>
<li>这两个属性, frameset <code>必须选择一个</code></li>
<li>frameset 里可以嵌套 frameset</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;30%, *,  30%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;01.html&quot;</span> /&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;02.html&quot;</span> /&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">&quot;50%, 50%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;03.html&quot;</span> /&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;04.html&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>⚠️ 框架集不利于 SEO, 不能有自己的内容, 只能引入页面, 引入几个页面就要发送几次请求, 效率低</p>
</li>
</ul>
<h1 id="块元素和内联元素"><a href="#块元素和内联元素" class="headerlink" title="块元素和内联元素"></a>块元素和内联元素</h1><table>
<thead>
<tr>
<th>属性</th>
<th>代表元素</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>block</td>
<td>div、h1～h6、p、ul</td>
<td>独占一行, 无论它的内容有多少, 都会独占一行;用来对 <code>网页布局</code> 的 (网页分区)</td>
</tr>
<tr>
<td>inline-block</td>
<td>img、input、button</td>
<td>宽高由内容决定，可以设置宽高; 可以设置 padding、margin</td>
</tr>
<tr>
<td>inline</td>
<td>span、a、b、del</td>
<td>只占自身大小的元素，不可以设置宽高;只能设置横向上的 padding、margin</td>
</tr>
</tbody></table>
<ol>
<li><p>一般情况下, 只使用块元素包含内联元素, 而不会使用内联元素包含块元素</p>
</li>
<li><p>a  元素可以包含 <code>任意</code> 元素, 除了它本身</p>
</li>
<li><p>p 元素内不能放 <code>任何</code> 块级元素</p>
</li>
<li><p>inline-block 宽度默认由内容决定<br> 当子元素是块级元素时，子元素宽度由自身内容决定，不会独占一行<br> 当有多个块级子元素时，块级子元素的宽度会一样，等于宽度最大的那个</p>
</li>
</ol>
<h1 id="实体-特殊字符"><a href="#实体-特殊字符" class="headerlink" title="实体(特殊字符)"></a>实体(特殊字符)</h1><p><a href="http://www.w3school.com.cn/html/html_entities.asp">实体参考</a></p>
<ul>
<li><p>HTML 里一些特殊字符, 不能直接使用, 需要使用一些特殊的符号来表示, 这些特殊符号我们成为实体</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt; --&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &gt; --&gt;</span></span><br><span class="line"><span class="symbol">&amp;gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 空格 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 版权符号©️ --&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="标签的属性"><a href="#标签的属性" class="headerlink" title="标签的属性"></a>标签的属性</h1><p>属性</p>
<ul>
<li><p>实际上就是一个 <code>名值对</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>红色的字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>id 属性</p>
<ul>
<li> 每一个元素都可以设置, 该属性可以作为标签的唯一标识</li>
<li> id 属性在同一个页面中不能重复</li>
</ul>
</li>
<li><p>title 属性</p>
<ul>
<li>可以加给任意元素</li>
<li>当鼠标移上去的时候显示 title 的值</li>
</ul>
</li>
</ul>
<h1 id="URL-的构成"><a href="#URL-的构成" class="headerlink" title="URL 的构成"></a>URL 的构成</h1><p><a href="http://c.biancheng.net/view/7530.html">URL 参考</a></p>
<p>URL 由协议、主机名、域名、端口、路径、以及文件名这六个部分构成，其中端口可以省略</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scheme://host.domain:port/path/filename</span><br></pre></td></tr></table></figure>

<h1 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h1><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径以 <code>域名</code> 或 <code>盘符</code> 为参考点</p>
<p>绝对路径之所以称为绝对，是指<strong>当不同的页面引用同一个文件时，使用的路径都是一样的</strong></p>
<ol>
<li><p>本地绝对路径</p>
<p>本地绝对路径一般指从盘符开始，到文件名称结束</p>
</li>
<li><p>网络绝对路径</p>
<p>网络绝对路径指从网站的域名开始，到文件名结束，在使用时需要加上协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">①D:/Hbulider/HBuilder/tools/nview/index.js</span><br><span class="line">②C:/Users/admin/Desktop/C语言中文网/url/url.html</span><br><span class="line">③http://c.biancheng.net/view/7410.html</span><br><span class="line">④http://c.biancheng.net:80/view/7410.html</span><br><span class="line">⑤http://c.biancheng.net </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p><strong>相对路径以当前文件位置为参考点</strong>，到文件名称结束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=”./html/login.html”&gt;跳转到login.html&lt;/a&gt;</span><br><span class="line">&lt;a href=”html/login.html”&gt;跳转到login.html&lt;/a&gt;</span><br><span class="line">&lt;a href=”../html/login.html”&gt;跳转到login.html&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">./  表示同级目录，可以省略不写</span><br><span class="line">../ 表示上级目录 </span><br></pre></td></tr></table></figure>

<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><ul>
<li>IDE  (集成开发工具)<ul>
<li>DreamWeaver</li>
<li>WebStorm</li>
<li>Hbuilder  (国产)</li>
<li>Visual Studio Code</li>
</ul>
</li>
</ul>
<h1 id="项目中-logo-的固定布局方案"><a href="#项目中-logo-的固定布局方案" class="headerlink" title="项目中 logo 的固定布局方案"></a>项目中 logo 的固定布局方案</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 利于 SEO --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3</title>
    <url>/2016/06/15/04-CSS3/</url>
    <content><![CDATA[<h1 id="CSS3-选择器"><a href="#CSS3-选择器" class="headerlink" title="CSS3 选择器"></a>CSS3 选择器</h1><p><a href="http://www.w3school.com.cn/cssref/css_selectors.asp">选择器汇总</a></p>
<span id="more"></span>

<h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ol>
<li>id 选择器 (#)</li>
<li>类选择器 (.)</li>
<li>标签选择器 (标签名)</li>
<li>通配符选择器 (*)</li>
<li>后代选择器 (空格)</li>
<li>分组选择器 (,)</li>
</ol>
<h2 id="基本选择器扩展"><a href="#基本选择器扩展" class="headerlink" title="基本选择器扩展"></a>基本选择器扩展</h2><ol>
<li><p>子元素选择器 (&gt;)</p>
</li>
<li><p>兄弟选择器</p>
<ul>
<li><p>相邻 (<strong>紧跟</strong>) 兄弟 (+)</p>
</li>
<li><p>通用 (<strong>后边的所有</strong>) 兄弟选择器 (~)</p>
</li>
</ul>
</li>
</ol>
<h2 id="属性选择器-html-属性"><a href="#属性选择器-html-属性" class="headerlink" title="属性选择器(html 属性)"></a>属性选择器(html 属性)</h2><ul>
<li><p>存在选择器</p>
<ul>
<li>div[name]</li>
<li><em>属性名不要加引号</em></li>
</ul>
</li>
<li><p>值选择器</p>
<ul>
<li><p>div[name=”hello”]</p>
</li>
<li><p>div[name~=”hello”]</p>
<ul>
<li><p>name 属性值中含有 hello, <em>以空格分隔其他属性值</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[name~=<span class="string">&#x27;hehe&#x27;</span>]</span> <span class="comment">/* &lt;div name=&quot;hehe hah&quot;&gt;&lt;/div&gt;*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>div[name|=”hello”]</p>
<ul>
<li><p>name 属性值是 hello 或者以 hello- 开头</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[name|=<span class="string">&#x27;hehe&#x27;</span>]</span> <span class="comment">/* &lt;div name=&quot;hehe&quot;&gt;&lt;/div&gt; or &lt;div name=&quot;hehe-hah&quot;&gt;&lt;/div&gt;*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>div[name^=”hello”]</p>
<ul>
<li>name 属性值以 hello 开头</li>
</ul>
</li>
<li><p>div[name$=”hello”]</p>
<ul>
<li>name 属性值以 hello 结尾</li>
</ul>
</li>
<li><p>div[name*=”hello”]</p>
<ul>
<li>name 属性值包含 hello </li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="伪类与伪元素选择器"><a href="#伪类与伪元素选择器" class="headerlink" title="伪类与伪元素选择器"></a>伪类与伪元素选择器</h2><h3 id="伪类选择器-表示标签的某些特殊状态"><a href="#伪类选择器-表示标签的某些特殊状态" class="headerlink" title="伪类选择器 (表示标签的某些特殊状态)"></a>伪类选择器 (表示标签的某些特殊状态)</h3><ul>
<li><p>链接伪类</p>
<ul>
<li><p>只作用于 a 元素</p>
</li>
<li><p>:link</p>
</li>
<li><p>:visited</p>
<ul>
<li>只有以下属性可以被应用到已访问过的链接<ul>
<li>color</li>
<li>background-color</li>
<li>border-color</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>:target</strong> (使用 css 做选项卡)</p>
<ul>
<li><p>代表一个特殊的元素, 它的 id 是 URL 的片段标识符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-pseudo">:target</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#div1&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#div2&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#div3&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>动态伪类</p>
<ul>
<li>:hover</li>
<li>:active(点击按住时)</li>
</ul>
</li>
<li><p>⚠️:link 和 :visited 可以覆盖了所有的 a 标签的状态</p>
<ul>
<li>所以当 :link、:visited、:hover、:active 同时设置时, :link 和 :visited <code>不能放在最后</code></li>
</ul>
</li>
<li><p>表单伪类</p>
<ul>
<li>:enabled</li>
<li>:disabled</li>
<li>:checked</li>
<li>:focus</li>
</ul>
</li>
<li><p>结构性伪类</p>
<ul>
<li><p>:nth-child(index)   (index 从 1 开始)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 查找规则 - 找 #warp 的第一个子元素是不是 ele 标签, 强调顺序， 在子元素中的顺序必须是 1*/</span></span><br><span class="line"><span class="selector-id">#wrap</span> ele<span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>:first-child</p>
</li>
<li><p>:last-child</p>
</li>
<li><p>:nth-child(even) </p>
</li>
<li><p>:nth-child(odd) </p>
</li>
<li><p>:nth-last-child(index)</p>
<ul>
<li><code>从后往前 </code>数</li>
</ul>
</li>
<li><p>:only-child</p>
<ul>
<li>唯一的一个子元素</li>
</ul>
</li>
</ul>
</li>
<li><p>:nth-of-type(index)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 找到 #wrap 的子元素中的所有的 p,再在所有 p 中找第一个， p 的顺序可能不是第一位的*/</span></span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>:first-of-type</p>
</li>
<li><p>:last-of-type</p>
</li>
<li><p>:only-of-type</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 子元素中只能有一个 p 标签(可以有多个其他标签) */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:only-of-type</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>⚠️: nth-of-type(index) 以 <strong>元素属性</strong> 为中心</li>
</ul>
</li>
<li><p>:not</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-of-type</span>) &#123;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid pink;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>:empty</p>
<ul>
<li><p>没有内容(空格都不行)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="区分-nth-child-和-nth-of-type"><a href="#区分-nth-child-和-nth-of-type" class="headerlink" title="区分 nth-child 和 nth-of-type"></a>区分 nth-child 和 nth-of-type</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red; <span class="comment">/* 不会选中任何内容， 因为第一个子元素不是 li 类型*/</span></span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  </span></span><br><span class="line"><span class="css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red; <span class="comment">/* 会选中 2 ， 因为 2 是第一个 type 为 li 的子元素*/</span></span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义单选按钮"><a href="#自定义单选按钮" class="headerlink" title="自定义单选按钮"></a>自定义单选按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span> + <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">span</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><ul>
<li><p><strong>伪元素不存在 DOM 树上</strong>, 伪元素选择器可以让我们选择到 DOM 以外的元素</p>
</li>
<li><p>伪元素选择器</p>
<ul>
<li>::before</li>
<li>::after<ul>
<li>::after 和 ::before <code>必须有 content 属性</code></li>
</ul>
</li>
<li>::first-letter</li>
<li>::first-line</li>
<li><font color=#c00>::selection</font><ul>
<li>选中字体时的状态</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="单冒号和双冒号的区别"><a href="#单冒号和双冒号的区别" class="headerlink" title="单冒号和双冒号的区别"></a>单冒号和双冒号的区别</h3><ul>
<li>单冒号 <code>: </code> 用来表示伪类</li>
<li>双冒号 <code>::</code> 用来表示伪元素</li>
</ul>
<h2 id="声明的优先级"><a href="#声明的优先级" class="headerlink" title="声明的优先级"></a>声明的优先级</h2><ul>
<li>选择器的特殊属性由选择器本身的组件确定, 特殊性值表示为 4 个部分</li>
<li>一个选择器的具体特殊性如下确定<ol>
<li>id 选择器 —— 0, 1, 0, 0</li>
<li>类选择器 —— 0, 0, 1, 0</li>
<li><strong>属性选择器 —— 0, 0, 1, 0</strong></li>
<li>伪类 —— 0, 0, 1, 0</li>
<li>元素选择器 —— 0, 0, 0, 1</li>
<li>伪元素 —— 0, 0, 0, 1</li>
<li>通配符 —— 0, 0, 0, 0</li>
<li>内联 —— 1, 0, 0, 0</li>
<li>!important —— 放在分号的前面</li>
</ol>
</li>
</ul>
<h1 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h1><ul>
<li><p>自定义</p>
<ul>
<li>需要去服务器取, 增大网络负担</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;damu&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">fonts/baohaus93.ttf</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span> <span class="string">&quot;damu&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>FontLab Studio 生成字体工具</p>
</li>
<li><p><a href="https://icomoon.io/">IcoMoon</a></p>
</li>
<li><p><a href="https://www.iconfont.cn/">Iconfont</a></p>
</li>
</ul>
<h1 id="新的-UI-方案"><a href="#新的-UI-方案" class="headerlink" title="新的 UI 方案"></a>新的 UI 方案</h1><h2 id="文本新增样式"><a href="#文本新增样式" class="headerlink" title="文本新增样式"></a>文本新增样式</h2><ul>
<li>opacity</li>
<li>rgba()</li>
<li>文本阴影<ul>
<li>可以加多层</li>
<li>text-shadow: 颜色 水平偏移 垂直偏移 模糊度[, 颜色 水平偏移 垂直偏移 模糊度];</li>
</ul>
</li>
<li>文字描边<ul>
<li>只有 webkit 内核的浏览器才支持</li>
<li>-webkit-text-stroke: 4px pink;</li>
</ul>
</li>
<li>文字排版<ul>
<li>direction: ltr/rtl;</li>
<li>要配合 unicode-bidi: bidi-override; 使用</li>
</ul>
</li>
<li>溢出显示省略号<ul>
<li><strong>text-overflow: ellipsis;</strong></li>
<li>要配合 <strong>overflow: hidden; white-wrap: nowrap;</strong> 使用</li>
<li>出现省略号的条件 —— 盒子不能由内容撑开</li>
</ul>
</li>
</ul>
<h2 id="元素模糊"><a href="#元素模糊" class="headerlink" title="元素模糊"></a>元素模糊</h2><ul>
<li><p><strong>filter: blur(10px); —— 让整个元素模糊</strong></p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">使用参考</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            *&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#wrap</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span></span><br><span class="line"><span class="css">                <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#wrap</span> <span class="selector-id">#bg</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">                <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">img/avatar.jpg</span>) no-repeat;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span> ;</span></span><br><span class="line"><span class="css">                <span class="attribute">z-index</span>: -<span class="number">1</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">10px</span>);</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">24px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">24px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/avatar.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;64px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;64px&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="盒模型新增样式"><a href="#盒模型新增样式" class="headerlink" title="盒模型新增样式"></a>盒模型新增样式</h2><h3 id="盒模型阴影"><a href="#盒模型阴影" class="headerlink" title="盒模型阴影"></a>盒模型阴影</h3><ul>
<li>box-shadow:  水平偏移 垂直偏移 模糊度 [扩散大小] 颜色 [inset];</li>
<li>阴影可叠加</li>
</ul>
<h3 id="倒影"><a href="#倒影" class="headerlink" title="倒影"></a>倒影</h3><ul>
<li>-webkit-box-reflect: left / right / bottom / top [10px];</li>
</ul>
<h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><ul>
<li>resize: both / horizatal / vertical;</li>
<li>要配合 overflow: auto; 使用</li>
</ul>
<h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><ul>
<li>box-sizing: border-box;<ul>
<li>width 和 height 包含内容区、内边距和边框</li>
</ul>
</li>
</ul>
<h2 id="新增-UI-样式"><a href="#新增-UI-样式" class="headerlink" title="新增 UI 样式"></a>新增 UI 样式</h2><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><ul>
<li>border-radius: 50%/50px[, 50px, 50px, 50px];</li>
<li><strong>border-radius: 100px/150px;  椭圆</strong></li>
</ul>
<h3 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h3><ul>
<li><p>border-image-source</p>
<ul>
<li><p>使用一张图片来代替边框样式</p>
</li>
<li><p>值为 url()</p>
</li>
<li><p>要和 border 搭配使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">30px</span> solid;</span><br><span class="line"><span class="attribute">border-image-source</span>: <span class="built_in">url</span>(<span class="string">border.png</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>border-image-slice</p>
<ul>
<li>默认会将图片分割为 9 个区域 - 四个角、四边以及中心区域</li>
<li>值为百分数(基于图片)</li>
<li>border-image-slice: 33.33333333% [fill];</li>
</ul>
</li>
<li><p>border-image-repeat</p>
<ul>
<li>平铺</li>
<li>border-image-repeat: stretch / round / repeat;</li>
</ul>
</li>
<li><p>border-image-width</p>
<ul>
<li>定义图像边框宽度</li>
</ul>
</li>
<li><p>border-image-outset</p>
<ul>
<li>只能是正值</li>
<li>边框图片外扩距离</li>
</ul>
</li>
</ul>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul>
<li>background-image<ul>
<li>可以指定多背景, 前面的图片会覆盖后面的</li>
<li>background-image: url(img1.jpg), url(img2.jpg);</li>
</ul>
</li>
<li><font color=#c40>background-position</font><ul>
<li>值可以是 具体的值 / 百分比(<font color=#c40><strong>参照于背景区域的大小减去背景图片的大小</strong></font>) / 方位关键词</li>
</ul>
</li>
<li>background-attachment<ul>
<li>值 fixed(相对于视口) / scroll</li>
<li>⚠️值为 fixed 时, <strong>背景图在视口中固定定位, 但只在该元素范围内可见</strong></li>
</ul>
</li>
<li>background-origin<ul>
<li>背景图默认从 padding-box 开始渲染</li>
<li>取值 border-box / padding-box / content-box</li>
<li>⚠️ 可以和 background-clip 搭配做点击区域大于小图标区域的效果 (小图标来自雪碧图)</li>
</ul>
</li>
<li>background-clip<ul>
<li>从哪开始剪</li>
<li>取值 border-box / padding-box / content-box</li>
<li>⚠️: -webkit-background-clip: text;<ul>
<li>背景图剪切到文字内(文字 color 要设置透明)</li>
</ul>
</li>
</ul>
</li>
<li>background-size<ul>
<li>取值<ul>
<li>background-size: 100%;</li>
<li>background-size: 100% 100%;(可能会变形)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><h4 id="线性渐变-默认从上到下"><a href="#线性渐变-默认从上到下" class="headerlink" title="线性渐变 (默认从上到下)"></a>线性渐变 (默认从上到下)</h4><ul>
<li>渐变是背景图属性<ul>
<li>background-image: linear-gradient(red, green);</li>
<li>background-image: linear-gradient(to top, red, green);</li>
<li>background-image: linear-gradient(45deg, red, green);</li>
<li>background-image: linear-gradient(90deg, red 10%, green 20%);</li>
</ul>
</li>
<li>重复渐变<ul>
<li>background-image: repeating-linear-gradient(90deg, red 10%, green 20%);</li>
</ul>
</li>
<li>⚠️角度问题<ul>
<li>如果第一个参数是角度<ul>
<li>0deg —— 代表从下到上</li>
<li>90deg —— 代表从左到右</li>
<li>……</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/radial-gradient">径向渐变</a></h4><ul>
<li>background-image: radial-gradient(red, green);</li>
<li>background-image: radial-gradient(red 10%, green 30%, pink 50%);</li>
<li>background-image: radial-gradient(circle, red 10%, green 30%, pink 50%);</li>
<li>background-image: radial-gradient(circle at 10px 10px, red 10%, green 30%, pink 50%);</li>
</ul>
<h1 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h1><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties">可做动画的 CSS 属性</a></li>
<li>transition<ul>
<li>tradition-duration<ul>
<li>过渡时间, 以 s / ms 为单位</li>
<li>0s 必须带单位</li>
</ul>
</li>
<li>transition-property<ul>
<li>默认是 all</li>
</ul>
</li>
<li>transition-delay<ul>
<li>延迟时间</li>
</ul>
</li>
<li>transition-timing-function<ul>
<li>ease / ease-in / ease-out / linear / ease-in-out / <a href="https://cubic-bezier.com/#.17,.67,.83,.67">cubic-bezier()</a> / steps(5[, start])</li>
<li>steps()<ul>
<li>第一个参数: 必须为整数, 指定步数</li>
<li>第二个参数: 指定每一步的值发生的时间点(默认为 end)</li>
</ul>
</li>
</ul>
</li>
<li>当属性值的列表长度不一致时<ul>
<li>超出的情况下会被全部截掉</li>
<li>不够的时候, 关于时间的会重复列表, transition-timing-function 的时候使用的是默认值 ease</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="检测过渡是否完成"><a href="#检测过渡是否完成" class="headerlink" title="检测过渡是否完成"></a>检测过渡是否完成</h2><ul>
<li>当过渡完成时会触发一个事件, 这个事件是 transitionend<ul>
<li>必须通过 dom2 的方式绑定</li>
</ul>
</li>
<li>每一个拥有过渡的属性在其完成过渡时都会触发一次 transitionend 事件<ul>
<li>有几个过渡属性, transitionend 就会触发几次</li>
</ul>
</li>
<li>在过渡完成前设置元素的 display: none, transitionend 事件不会触发</li>
</ul>
<h2 id="过渡注意点"><a href="#过渡注意点" class="headerlink" title="过渡注意点"></a>过渡注意点</h2><ol>
<li><p>transitionend 在元素首次渲染还没有结束的情况下, 是不会触发的</p>
</li>
<li><p>过渡只关心元素的起始状态和结束状态, 没有办法获取元素在过渡中的每一帧</p>
</li>
<li><p>在绝大部分变换样式的切换时, 变换组合的个数或者位置不一样时, 是没有办法过渡的</p>
</li>
</ol>
<h2 id="过渡简写"><a href="#过渡简写" class="headerlink" title="过渡简写"></a>过渡简写</h2><ul>
<li>transition: 过渡样式 过渡时间 [过渡曲线 延迟];<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: width <span class="number">2s</span> <span class="number">3s</span>, height <span class="number">3s</span>;</span><br><span class="line"><span class="comment">/* height 用 3s 过渡完成后, width 才开始动画 */</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="2d-3d-变形"><a href="#2d-3d-变形" class="headerlink" title="2d/3d 变形"></a>2d/3d 变形</h1><h2 id="2D-变形"><a href="#2D-变形" class="headerlink" title="2D 变形"></a>2D 变形</h2><ul>
<li><p>旋转 (rotate)</p>
<ul>
<li>单位 deg</li>
<li>正值按顺时针方向</li>
</ul>
</li>
<li><p>平移 (translate)</p>
<ul>
<li>单位 px / %</li>
<li>translate 括号内若只有一个值表示的是 X 轴的位移</li>
</ul>
</li>
<li><p>倾斜 (skew)</p>
<ul>
<li>单位 deg</li>
</ul>
</li>
<li><p>缩放 (scale)</p>
<ul>
<li>不带单位</li>
</ul>
</li>
<li><p>元素基点 (transform-origin)</p>
<ul>
<li>transform-origin: left top;</li>
<li>transform-origin: 50px 50px;</li>
<li>transform-origin: 100% 100%;<ul>
<li>基于自身大小的百分比</li>
</ul>
</li>
</ul>
<blockquote>
<p>⚠️ transform-origin 的原点是基于元素自身的左上角的</p>
</blockquote>
</li>
</ul>
<h2 id="2d变换组合"><a href="#2d变换组合" class="headerlink" title="2d变换组合"></a>2d变换组合</h2><ul>
<li><p>变换的顺序 <strong>影响最终结果</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>) <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果不同 */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>) <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>⚠️: 在绝大部分变换样式切换时, <font color=#c40>如果变换函数的位置或个数不一致也不会触发过渡</font></p>
</li>
</ul>
<h2 id="3d-变形"><a href="#3d-变形" class="headerlink" title="3d 变形"></a>3d 变形</h2><h3 id="景深"><a href="#景深" class="headerlink" title="景深"></a>景深</h3><ul>
<li><p><strong>眼睛到显示器的距离</strong>, 让 3d 场景有近大远小的效果; </p>
<ul>
<li>景深越大, 元素离我们越远, 灭点越远, 元素变形越小</li>
</ul>
</li>
<li><p>加给做变换的元素的 <code>祖先元素</code>, 作用于后代元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">perspective</span>: <span class="number">100px</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>景深函数</p>
<ul>
<li><code>加给自身</code>, 且 <strong>必须放在首位</strong><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#inner</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">100px</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#inner</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">100px</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>景深基点 (视线角度)</p>
<ul>
<li><p>加给做变换的元素的 <code>祖先元素</code>, 作用于后代元素</p>
</li>
<li><p>用来控制眼睛位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">perspective-origin</span>: left top;</span><br></pre></td></tr></table></figure></li>
<li><p>默认值 50% 50%</p>
</li>
</ul>
</li>
<li><p>⚠️ 要避免景深叠加</p>
</li>
</ul>
<h3 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h3><ul>
<li>营造有层次的 3d 舞台 <ul>
<li>取值 <code>preserve-3d</code></li>
</ul>
</li>
<li>加给做变换的元素的 <code>父元素</code>, 作用于子元素</li>
</ul>
<h3 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a>transform-origin</h3><ul>
<li>设置元素基点</li>
<li>transform-origin: center center -50px;<ul>
<li>默认值: center center 0;</li>
</ul>
</li>
</ul>
<h3 id="隐藏背面"><a href="#隐藏背面" class="headerlink" title="隐藏背面"></a>隐藏背面</h3><ul>
<li>backface-visibility<ul>
<li>hidden  /visible</li>
</ul>
</li>
</ul>
<h3 id="3d-旋转"><a href="#3d-旋转" class="headerlink" title="3d 旋转"></a>3d 旋转</h3><ul>
<li>transform: rotate3d(1, 1, 1,  360deg);</li>
</ul>
<h3 id="3d-平移"><a href="#3d-平移" class="headerlink" title="3d 平移"></a>3d 平移</h3><ul>
<li>transform:translate3d(100px, 100px, 100px);</li>
<li>第三个参数(translateZ) <code>不能写百分数</code></li>
<li><strong>translateZ 需要配合景深才有作用</strong></li>
</ul>
<h3 id="3d-缩放"><a href="#3d-缩放" class="headerlink" title="3d 缩放"></a>3d 缩放</h3><ul>
<li>transform:scale3d(1, 1, 2);</li>
</ul>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>css3 动画指的是 <code>元素从一种样式逐渐过渡到另一种样式</code></p>
<ul>
<li><p>animation-name</p>
<ul>
<li>动画名称</li>
</ul>
</li>
<li><p>animation-duration</p>
<ul>
<li>动画时间</li>
</ul>
</li>
<li><p>animation-timing-function</p>
<ul>
<li>动画曲线 - 作用于一个关键帧周期, 而非整个动画周期</li>
<li>linear / ease / ease-in / ease-out / ease-in-out / steps(12[, start / end])</li>
<li><em>steps(12, start) - 看不到第一帧</em></li>
<li><em>steps(12, end) - 看不到最后一帧</em></li>
</ul>
</li>
<li><p>animation-delay</p>
<ul>
<li>延迟时间</li>
</ul>
</li>
<li><p>animation-iteration-count</p>
<ul>
<li>动画重复次数 (<em>动画延迟不会被循环</em>)</li>
<li>重复的是 <code>关键帧</code></li>
<li>具体数值 / infinite (无限次)</li>
</ul>
</li>
<li><p>animation-direction</p>
<ul>
<li>动画方向</li>
<li>normal / reverse (反转的是 <code>关键帧</code> 和 <code>动画曲线</code>)</li>
<li>alternate (往返运动) / alternate-reverse (<strong>必须和 infinite 一起使用才有效</strong>)</li>
</ul>
</li>
<li><p>animation-fill-mode</p>
<ul>
<li><strong>元素的开始位置和结束位置</strong></li>
<li>backfords (元素<strong>开始位置在 from 处</strong>) / forwards (元素结束后<strong>在 to 位置</strong>)</li>
<li>both (<strong>开始位置在 from 处, 结束位置在 to 处</strong>)</li>
</ul>
</li>
<li><p>animation-play-state</p>
<ul>
<li><p>开启 / 暂停动画</p>
</li>
<li><p>running (默认值) / paused</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span><span class="selector-pseudo">:hover</span> <span class="selector-id">#inner</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>@keyframes </p>
<ul>
<li>关键帧</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 百分数分的是时间 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>简写</p>
<ul>
<li>animation: 动画名称 动画时间 动画曲线 动画延迟 循环次数 动画方向 状态保持 启动暂停;</li>
<li>animation: move 3s ease 1s infinite alternate forwards;</li>
</ul>
</li>
</ul>
<h2 id="运用-steps-来做小动画"><a href="#运用-steps-来做小动画" class="headerlink" title="运用 steps() 来做小动画"></a>运用 steps() 来做小动画</h2><ol>
<li>数小图片有几帧 —— n</li>
<li>看图片的尺寸 —— w</li>
<li><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">     <span class="selector-tag">from</span> &#123;</span><br><span class="line">       <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-tag">to</span> &#123;</span><br><span class="line">       <span class="attribute">background-position</span>: -w <span class="number">0</span>; <span class="comment">/* 这里就是图片尺寸, 不需要减去一帧的宽度; 动画实际有 n+1 帧*/</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>4.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.icon &#123;</span><br><span class="line">    background: url(img.png) no-repeat;</span><br><span class="line">     background-position: 0 0;</span><br><span class="line">     animation: move 1s steps(n) infinite;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><p><font color=#c40>响应式布局的核心</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 规则 - 在某些条件下才起作用 */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>媒体查询一般 <code>写在 css 最下面</code></p>
</li>
<li><p>媒体类型</p>
<ul>
<li>all</li>
<li>screen</li>
<li>print</li>
</ul>
</li>
</ul>
<h2 id="媒体属性"><a href="#媒体属性" class="headerlink" title="媒体属性"></a>媒体属性</h2><ul>
<li><p>width /  height / device-width / -webkit-device-pixel-ratio / orientation(横/竖屏)</p>
<ul>
<li><p>width /  height / device-width / -webkit-device-pixel-ratio 都可加前缀 (min- / max-)</p>
</li>
<li><p>orientation: portrait / landscape;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* :后的值不要加引号 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">orientation</span>: portrait) &#123;</span><br><span class="line">    <span class="selector-id">#wrap</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1000px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#wrap</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul>
<li><p>and </p>
<ul>
<li>与, and 用来连接媒体类型和媒体属性<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设备像素比为2 且 为竖屏*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">2</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: portrait) &#123;</span><br><span class="line">    <span class="selector-id">#wrap</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>only</p>
<ul>
<li>老版本使用, 让老版本浏览器不响应</li>
</ul>
</li>
<li><p>,</p>
<ul>
<li>或<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设备像素比为2 或者 为竖屏*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">2</span>), (<span class="attribute">orientation</span>: portrait) &#123;</span><br><span class="line">    <span class="selector-id">#wrap</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>not</p>
<ul>
<li>取反<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不是像素比为2的设备 或者 为竖屏*/</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span> (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">2</span>) , (<span class="attribute">orientation</span>: portrait) &#123;</span><br><span class="line">    <span class="selector-id">#wrap</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h1><ol>
<li>HTML 规范</li>
<li>JS 规范<ul>
<li><a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm">ECMA 规范</a></li>
<li><a href="https://www.w3.org/DOM/">DOM 规范</a><ul>
<li>DOM 是独立于平台和语言的借口, 该借口为程序和脚本提供了对文档的内容、结构和样式的动态获取和更新的功能</li>
<li>BOM 没有规范</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://www.w3.org/Style/CSS/">CSS 规范</a></li>
</ol>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap</title>
    <url>/2016/06/17/05-Bootstrap/</url>
    <content><![CDATA[<h1 id="响应式-UI-框架"><a href="#响应式-UI-框架" class="headerlink" title="响应式 UI 框架"></a>响应式 UI 框架</h1><p><a href="https://v3.bootcss.com/">官网</a></p>
<ul>
<li>一套比较完整的用于前端页面构建的库</li>
<li>可以叫它 <code>前端 UI 框架</code>, 不能说它是前端框架</li>
<li><strong>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目</strong></li>
</ul>
<span id="more"></span>

<h2 id="为什么使用它-优点"><a href="#为什么使用它-优点" class="headerlink" title="为什么使用它?优点?"></a>为什么使用它?优点?</h2><ol>
<li><p>有自己的生态圈, 不断地更新迭代</p>
</li>
<li><p>提供了一套简洁、直观、强悍的组件</p>
</li>
<li><p>标准化的 html + css 编码规范</p>
</li>
<li><p>让开发更简单, 提高了开发效率 (<font color=#c40>只要加几个类就可以实现效果</font>)</p>
</li>
<li><p><strong>可扩展, 可自定义样式或修改默认样式</strong></p>
</li>
</ol>
<h2 id="normalize-css-和-cssret-css-的区别"><a href="#normalize-css-和-cssret-css-的区别" class="headerlink" title="normalize.css 和 cssret.css 的区别?"></a>normalize.css 和 cssret.css 的区别?</h2><ul>
<li>共同点<ul>
<li>都是重置样式库, 增强浏览器表现的一致性</li>
</ul>
</li>
<li>不同点<ul>
<li>normalize.css 不会重置本身已经在每个浏览器表现一致的元素<ul>
<li>eg. ul 在每个浏览器中都默认有黑点, 不会被重置 </li>
</ul>
</li>
<li>reset.css 可以根据需求去设置严肃的样式<ul>
<li>可以根据需求设置 ul 的 list-style: none;</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>bootstrap.css 默认已经引用了 normalize.css</strong>, 不需要我们再额外引入</p>
<h2 id="bootstrap-的使用"><a href="#bootstrap-的使用" class="headerlink" title="bootstrap 的使用"></a>bootstrap 的使用</h2><p>官方推荐在基本模版上进行修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基本模版 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="comment">&lt;!-- 文档申明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span> <span class="comment">&lt;!-- 文档语言声明(中文简体) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> <span class="comment">&lt;!-- 字符编码声明 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要求当前网页使用对应浏览器最高版本的内核来渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视口设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 目的: 优先加载解析 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap 样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li><a href="https://v3.bootcss.com/getting-started/#examples">实例模版</a><ul>
<li>我们一般可以直接下载实例进行修改<ul>
<li>方式一 <ul>
<li>打开选好的例子 —— 右键查看源代码 —— 保存</li>
</ul>
</li>
<li>方式二<ul>
<li>Get the source code for every example below by <a href="https://github.com/twbs/bootstrap/archive/v3.3.7.zip">downloading the Bootstrap repository</a>. Examples can be found in the <code>docs/examples/</code> directory.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <code>.container</code> 容器</p>
<ul>
<li>我们提供了两个作此用处的类 <code>.container</code> 和<code>.container-fluid</code><ul>
<li>注意，由于 padding 等属性的原因，<strong>这两种容器类不能互相嵌套</strong></li>
</ul>
</li>
</ul>
<h2 id="固定容器"><a href="#固定容器" class="headerlink" title="固定容器"></a>固定容器</h2><p><code>.container</code> 类用于固定宽度并支持响应式布局的容器</p>
<ul>
<li><strong>.container 容器左右默认有 15px 的 padding</strong> </li>
<li>宽度 1170px / 970px / 750px / auto (由<code>阈值</code>决定)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>阈值<ul>
<li>小于 768px            —— xs - 手机</li>
<li>大于等于 768px    —— sm - 平板</li>
<li>大于等于 992px    —— md - 中屏 PC</li>
<li>大于等于 1200px  —— lg - 大屏 PC</li>
</ul>
</li>
</ul>
<h2 id="流体容器"><a href="#流体容器" class="headerlink" title="流体容器"></a>流体容器</h2><p><code>.container-fluid</code> 类用于 100% 宽度，占据全部视口（viewport）的容器</p>
<ul>
<li>宽度 100%</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h1><p>Bootstrap 提供了一套响应式、移动设备优先的 <code>流式栅格系统</code>，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。它包含了易于使用的<a href="https://v3.bootcss.com/css/#grid-example-basic">预定义类</a>，还有强大的<a href="https://v3.bootcss.com/css/#grid-less">mixin 用于生成更具语义的布局</a>。</p>
<ul>
<li>bootstrap 通过一系列的行（row）与列（column）的组合来创建页面布局, 网页内容就可以放入这些创建好的布局中 —— 其实就是行和列布局<ul>
<li>默认一行分 12 列</li>
<li>container 容器默认有 15px 的 padding (水平方向)</li>
<li>row 容器默认有 -15px 的 margin (水平方向)</li>
<li>col 容器默认有 15px 的 padding (水平方向)</li>
</ul>
</li>
<li>@grid-gutter-width<ul>
<li>槽宽默认是 30px</li>
</ul>
</li>
</ul>
<h2 id="Bootstrap-栅格系统的工作原理"><a href="#Bootstrap-栅格系统的工作原理" class="headerlink" title="Bootstrap 栅格系统的工作原理"></a>Bootstrap 栅格系统的工作原理</h2><blockquote>
<ol>
<li><p>“行（row）”必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中;</p>
<p><strong>.row 默认有 -15px 的左右 margin</strong> (填充了 .container 左右的 15px 的 padding)</p>
</li>
<li><p>通过“行（row）”在水平方向创建一组“列（column）”</p>
</li>
<li><p>内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素;</p>
<p><strong>.col 默认有 15px 的左右 padding</strong></p>
<ul>
<li><p><code>.col-*-*</code></p>
<ul>
<li><p>第一个 * : 设备种类 (lg、md、sm、xs)</p>
<ul>
<li>lg    —— 大屏设备及以上生效</li>
<li>md —— 中屏设备及以上生效</li>
<li>sm  —— 小屏设备及以上生效</li>
<li>xs   —— 超小屏设备及以上生效</li>
</ul>
</li>
<li><p>第二个 * : 占 12 的几份​  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 在小屏及以上设备都生效, 都是均分 3 份 --&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>类似 <code>.row</code> 和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局</p>
</li>
<li><p>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 <code>margin</code> 从而抵消掉为 <code>.container</code> 元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code>。</p>
</li>
<li><p>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 <code>.col-xs-4</code> 来创建</p>
</li>
<li><p>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列</p>
</li>
<li><p>col 里面可以嵌套 row</p>
</li>
</ol>
</blockquote>
<h2 id="栅格系统基本使用"><a href="#栅格系统基本使用" class="headerlink" title="栅格系统基本使用"></a>栅格系统基本使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    大屏设备: 每行 6 等份(1行6列)</span></span><br><span class="line"><span class="comment">    中屏设备: 每行 4 等份(2行2列)</span></span><br><span class="line"><span class="comment">    小屏设备: 每行 3 等份(2行2列)</span></span><br><span class="line"><span class="comment">    超小屏设备: 每行 2 等份(3行2列)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-2 col-md-3 col-sm-4 col-xs-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="行-amp-列"><a href="#行-amp-列" class="headerlink" title="行 &amp; 列"></a>行 &amp; 列</h2><ul>
<li>行<ul>
<li>默认样式<ul>
<li>margin-left: -15px</li>
<li>margin-right: -15px</li>
</ul>
</li>
</ul>
</li>
<li>列<ul>
<li>默认样式<ul>
<li>position: relative</li>
<li>min-height: 1px</li>
<li>padding-left: -15px</li>
<li>padding-right: -15px</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h3><p>可以在 col 里前套 row</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-9&quot;</span>&gt;</span></span><br><span class="line">    Level 1: .col-sm-9</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-8 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">        Level 2: .col-xs-8 .col-sm-6</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-4 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">        Level 2: .col-xs-4 .col-sm-6</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="列偏移-col-md-offset-3"><a href="#列偏移-col-md-offset-3" class="headerlink" title="列偏移(.col-md-offset-3)"></a>列偏移(.col-md-offset-3)</h3><p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 <code>*</code> 选择器为当前元素增加了左侧的边距（margin）。例如，<code>.col-md-offset-4</code> 类将 <code>.col-md-4</code> 元素向右侧偏移了 4 个列（column）的宽度</p>
<ul>
<li><p>最终的实现相当于 <code>margin-left</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-md-offset-4&quot;</span>&gt;</span>.col-md-4 .col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-md-offset-3&quot;</span>&gt;</span>.col-md-3 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-md-offset-3&quot;</span>&gt;</span>.col-md-3 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6 col-md-offset-3&quot;</span>&gt;</span>.col-md-6 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%97%E5%81%8F%E7%A7%BB.png"></p>
</li>
</ul>
<h3 id="列排序-col-md-push-pull-3"><a href="#列排序-col-md-push-pull-3" class="headerlink" title="列排序(.col-md-push/pull-3)"></a>列排序(.col-md-push/pull-3)</h3><p>通过使用 <code>.col-md-push-*</code> 和 <code>.col-md-pull-*</code> 类就可以很容易的改变列（column）的顺序</p>
<ul>
<li><p>最终的实现相当于 <code>定位</code></p>
</li>
<li><p>push —— 往后推     pull —— 往前拉</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 col-md-push-3&quot;</span>&gt;</span>.col-md-9 .col-md-push-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-md-pull-9&quot;</span>&gt;</span>.col-md-3 .col-md-pull-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%88%97%E6%8E%92%E5%BA%8F.png"></p>
</li>
</ul>
<h2 id="栅格盒模型"><a href="#栅格盒模型" class="headerlink" title="栅格盒模型"></a>栅格盒模型</h2><ul>
<li>容器两边有 15px 的 padding<ul>
<li>为了让容器可以包裹住行</li>
</ul>
</li>
<li>行两边有 -15px 的 margin<ul>
<li>为了能使列嵌套行</li>
</ul>
</li>
<li>列两边有 15px 的 padding<ul>
<li>为了维护槽宽的规则</li>
</ul>
</li>
</ul>
<h2 id="自定义栅格系统"><a href="#自定义栅格系统" class="headerlink" title="自定义栅格系统"></a>自定义栅格系统</h2><ol>
<li><p>拷贝 bootstrap dist 目录中跟栅格有关的 less 文件</p>
<p><code>mixin/clearfix.less  mixin/grid.less   mixin/grid-framework.less  grid.less   variables.less</code></p>
</li>
<li><p>把 <code>mixin/grid-framework.less</code> 中的 <code>col-</code> 换成 <code>damu-col-</code></p>
</li>
<li><p>新建自己的 <code>damu.less</code></p>
</li>
<li><p>在 <code>damu.less</code> 中引入相关文件</p>
<p>⚠️ 先引入混入</p>
</li>
<li><p>编译 <code>damu.less</code> 生成 <code>damu.css</code> 文件即可</p>
</li>
<li><p>直接使用 <code>damu.css</code> 文件</p>
</li>
</ol>
<p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%85%E6%A0%BC.png"></p>
<h1 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h1><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能并使用这些工具类可以方便的 <code>针对不同设备展示或隐藏页面内容</code></p>
<ul>
<li><p>有针对性的使用这类工具类，从而避免为同一个网站创建完全不同的版本</p>
</li>
<li><p>可用的类</p>
<ul>
<li>.visible-xs-*<ul>
<li><code>*</code>  的取值可能是 inline、inline-block、block, 每个针对 CSS 中不同的 <code>display</code> 属性</li>
</ul>
</li>
<li>.hidden-xs-*</li>
</ul>
<p><img src="/images/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B7%A5%E5%85%B7%E5%8F%AF%E7%94%A8%E7%9A%84%E7%B1%BB.png"></p>
</li>
</ul>
<h1 id="Bootstrap-常用类"><a href="#Bootstrap-常用类" class="headerlink" title="Bootstrap 常用类"></a>Bootstrap 常用类</h1><p><a href="https://v3.bootcss.com/css/#helper-classes">常用类</a></p>
<ul>
<li>浮动相关<ul>
<li>pull-left</li>
<li>pull-right</li>
</ul>
</li>
<li>文本对齐<ul>
<li>text-left</li>
<li>text-right</li>
<li>text-center</li>
</ul>
</li>
<li>显示隐藏<ul>
<li>hidden-xs/sm/md/lg</li>
</ul>
</li>
</ul>
<h1 id="Bootstrap-常用组件"><a href="#Bootstrap-常用组件" class="headerlink" title="Bootstrap 常用组件"></a>Bootstrap 常用组件</h1><ul>
<li><p><a href="https://v3.bootcss.com/components/">常用组件</a></p>
<ul>
<li>由 html + css  组成的特定结构和样式的静态结构</li>
<li>js 插件<ul>
<li><a href="https://v3.bootcss.com/javascript/">怎么在组件中使用 js 功能</a></li>
<li>就是 <code>有交互功能</code> 的组件</li>
<li>建议使用压缩版的 js 文件</li>
<li><code>bootstrap.js</code> 和 <code>bootstrap.min.js</code> 都包含了所有插件，你在使用时，只需选择一个引入页面就可以了</li>
</ul>
</li>
</ul>
</li>
<li><p>无数可复用的组件，包括字体图标、下拉菜单、导航、警告框、弹出框等更多功能</p>
</li>
<li><p>按钮(组)、导航、下拉菜单、分页、弹出框、标签、徽章、巨幕、进度条、警告框、面板…ect</p>
</li>
<li><p>导航条和 collapsed 组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  类名 collapsed 折叠样式</span></span><br><span class="line"><span class="comment">  属性 data-toggle=&quot;collapse&quot; 声明是折叠组件</span></span><br><span class="line"><span class="comment">      data-target=&quot;.box&quot; 声明控制的目标元素</span></span><br><span class="line"><span class="comment">  其他</span></span><br><span class="line"><span class="comment">      aria-expanded=&quot;false&quot;  提供给屏幕阅读器使用的(特俗人群使用)</span></span><br><span class="line"><span class="comment">      class=&quot;sr-only&quot; 也是给屏幕阅读器使用的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-default&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;separator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://v3.bootcss.com/javascript/#collapse">collapsed 组件</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  属性 data-toggle=&quot;collapse&quot; 声明是折叠组件</span></span><br><span class="line"><span class="comment">      data-target=&quot;.box&quot;     声明控制的目标元素</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.box&quot;</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果是 a 标签, 控制的目标元素可以写在 href 里 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">href</span>=<span class="string">&quot;.box&quot;</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://v3.bootcss.com/javascript/#carousel">轮播图组件</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  slide 是否加上滑动效果</span></span><br><span class="line"><span class="comment">  data-ride=&quot;carousel&quot; 初始化轮播图</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;carousel-example-generic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide&quot;</span> <span class="attr">data-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;carousel-indicators&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span> <span class="attr">role</span>=<span class="string">&quot;listbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Controls --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;left carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-left&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;right carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-right&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://v3.bootcss.com/javascript/#affix">Affix 组件</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  距离顶部 60 的时候导航条固定在顶部, 或距离底部距离 200 的时候固定在顶部</span></span><br><span class="line"><span class="comment">  data-offset-top=&quot;60&quot; </span></span><br><span class="line"><span class="comment">  data-offset-bottom=&quot;200&quot;</span></span><br><span class="line"><span class="comment">  这 2 个写一个就可以</span></span><br><span class="line"><span class="comment">  如果该组件初始位置不在顶部, 还应该在 css 里加上 top: 0;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-spy</span>=<span class="string">&quot;affix&quot;</span> <span class="attr">data-offset-top</span>=<span class="string">&quot;60&quot;</span> <span class="attr">data-offset-bottom</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="覆盖-bootstrap-css-原有样式"><a href="#覆盖-bootstrap-css-原有样式" class="headerlink" title="覆盖 bootstrap.css 原有样式"></a>覆盖 bootstrap.css 原有样式</h1><ul>
<li>如果不确定能否盖过其优先级, 可以拷贝源码的相关区块的整片代码到自己的样式文件中, 再修改成想要的样式</li>
<li>如果想要针对功能覆盖(不影响本页面其他同组件样式)<ul>
<li>可以更改拷贝过来的模块名 (eg: .navbar-default =&gt; .wjs_nav)</li>
</ul>
</li>
<li>缺点<ul>
<li>会出现代码冗余</li>
</ul>
</li>
<li>如果 bootstrap 不能满足我们的需求, 需要自己使用媒体查询来设置宽度</li>
</ul>
<h1 id="Bootstrap-定制"><a href="#Bootstrap-定制" class="headerlink" title="Bootstrap 定制"></a>Bootstrap 定制</h1><ol>
<li><p><a href="https://v3.bootcss.com/customize/">线上定制</a></p>
</li>
<li><p>线下定制</p>
<ul>
<li>下载 bootstrap 源文件, 打开其 <code>less 文件夹</code> 进行修改<ul>
<li>新建自己的 <code>damu.less</code></li>
<li>引入 <code>bootsratp.less</code></li>
<li>重新声明自己想要的变量</li>
<li>编译 <code>damu.less</code></li>
<li>项目中引入 <code>damu.css</code> 即可</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><img src="/images/%E5%AE%9A%E5%88%B6.png"></p>
<h1 id="应用-bootstrap-步骤"><a href="#应用-bootstrap-步骤" class="headerlink" title="应用 bootstrap 步骤"></a>应用 bootstrap 步骤</h1><ol>
<li>起步 —— 基本模版 —— 拷贝并粘贴到自己的 html 中</li>
<li>找相似组件 —— 拷贝 —— 修改</li>
</ol>
<h1 id="Bootstrap-模版"><a href="#Bootstrap-模版" class="headerlink" title="Bootstrap 模版"></a>Bootstrap 模版</h1><p><a href="%5Bhttps://www.17sucai.com/search/bootstrap%E6%A8%A1%E6%9D%BF?%5D(https://www.17sucai.com/search/bootstrap%E6%A8%A1%E6%9D%BF?)">17素材网</a></p>
]]></content>
      <tags>
        <tag>UI 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础之DOM</title>
    <url>/2016/07/07/12-JS%E5%9F%BA%E7%A1%80%E4%B9%8BDOM/</url>
    <content><![CDATA[<h1 id="DOM介绍"><a href="#DOM介绍" class="headerlink" title="DOM介绍"></a>DOM介绍</h1><p><a href="http://www.w3school.com.cn/htmldom/index.asp">参考手册</a></p>
<p>Document Object Model 文档对象模型</p>
<ul>
<li>DOM 干嘛的? <ul>
<li>就是 <strong>操作网页</strong> 的</li>
<li>JS 通过 DOM 来对 HTML 文档进行操作</li>
</ul>
</li>
<li>文档<ul>
<li>表示的就是整个 HTML 网页文档</li>
</ul>
</li>
<li>对象<ul>
<li>将网页中的每一个部分都转换为一个对象</li>
</ul>
</li>
<li>模型<ul>
<li>使用模型来表示对象之间的关系, 方便我们获取对象</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h2 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h2><p>浏览器在加载页面时, 是按照从上到下的顺序加载的, 读取到一行就运行一行</p>
<blockquote>
<p>如果将 js 代码写到页面的上面, 在代码执行时, 页面还没有加载<br>把 js 代码写到页面最后, 是为了保证页面加载完毕后, 再执行 js 代码</p>
</blockquote>
<ul>
<li>onload 事件会在 <strong>页面加载完成之后</strong> 才触发<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点 (Node)"></a>节点 (Node)</h1><p>构成网页的最基本的组成部分, 网页中的每一个部分都可以称为节点</p>
<ul>
<li><p>常用节点分类</p>
<ul>
<li>文档节点 —— document (整个 HTML 文档)</li>
<li>元素节点 —— 标签</li>
<li>属性节点 —— 元素的属性</li>
<li>文本节点 —— 标签中的文本内容</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType">节点类型</a></li>
</ul>
</li>
<li><p>浏览器为我们提供了文档节点(document) , 这个对象是 window 的属性</p>
<p>document 可以在页面中直接使用, <code>文档节点代表的是整个网页</code></p>
</li>
</ul>
<h2 id="获取元素节点API"><a href="#获取元素节点API" class="headerlink" title="获取元素节点API"></a>获取元素节点API</h2><h3 id="通过-document-对象获取"><a href="#通过-document-对象获取" class="headerlink" title="通过 document 对象获取"></a>通过 document 对象获取</h3><table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>getElementById()</td>
<td>通过 id 获取 <strong>一个</strong> 元素对象</td>
</tr>
<tr>
<td>getElementsByTagName()</td>
<td>通过标签名获取 <strong>一组</strong> 元素对象</td>
</tr>
<tr>
<td>getElementsByName()</td>
<td>通过 name 属性获取 <strong>一组</strong> (<em>表单</em>)元素对象</td>
</tr>
<tr>
<td>getElementsByClassName()</td>
<td>通过类名获取 <strong>一组</strong> 元素对象</td>
</tr>
<tr>
<td><font color=#c00><strong>querySelector()</strong></font></td>
<td>返回 <strong>一个</strong> 元素对象 (需要 <strong>CSS 选择器作为参数</strong>)</td>
</tr>
<tr>
<td><font color=#c00><strong>querySelectorAll()</strong></font></td>
<td>返回 <strong>一组</strong> 元素对象</td>
</tr>
<tr>
<td>document.body</td>
<td>获取 body 元素</td>
</tr>
<tr>
<td>document.documentElement</td>
<td>获取 html 元素</td>
</tr>
<tr>
<td>document.all</td>
<td>获取所有元素</td>
</tr>
<tr>
<td>document.getElementsByTagName(‘*’)</td>
<td>同上</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;gender&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box div&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>⚠️ querySelectorAll 获取的是静态列表，如果 dom 结构发生改变(<em>新增元素</em>)，querySelectorAll 将获取不到任何元素 —— <em>如果改变 dom 结构，需要再次重新获取</em></p>
<h3 id="通过具体的元素节点获取"><a href="#通过具体的元素节点获取" class="headerlink" title="通过具体的元素节点获取"></a>通过具体的元素节点获取</h3><table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>getElementsByTagName()</td>
<td>返回当前节点的 <strong>指定标签名的后代节点</strong></td>
</tr>
<tr>
<td>childNodes (<strong>不常用</strong>)</td>
<td>属性, 返回当前节点的所有子节点 (包含文本节点)</td>
</tr>
<tr>
<td>children (<strong>常用</strong>)</td>
<td>属性, 返回当前节点的所有子元素 (不包含文本节点)</td>
</tr>
<tr>
<td>firstElementChild (IE8 不支持)</td>
<td>属性, 返回当前节点的第一个子元素</td>
</tr>
<tr>
<td>lastElementChild (IE8 不支持)</td>
<td>属性, 返回当前节点的最后一个子元素</td>
</tr>
<tr>
<td>parentNode</td>
<td>属性, 返回当前节点的父元素</td>
</tr>
<tr>
<td>parentElement</td>
<td>同上</td>
</tr>
<tr>
<td>previousElementSibling (IE8 不支持)</td>
<td>属性, 返回当前节点的前一个兄弟元素</td>
</tr>
<tr>
<td>nextElementSibling (IE8 不支持)</td>
<td>属性, 返回当前节点的后一个兄弟元素</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = ul.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fir = ul.firstElementChild</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pre = li.previousElementSibling</span><br></pre></td></tr></table></figure>

<h2 id="增删改节点方法"><a href="#增删改节点方法" class="headerlink" title="增删改节点方法"></a>增删改节点方法</h2><table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>createElement()</td>
<td>创建元素节点(需要一个 <code>标签名</code> 作为参数)</td>
</tr>
<tr>
<td>appendChild()</td>
<td>向父节点的最后添加新的子节点</td>
</tr>
<tr>
<td>insertBefore()</td>
<td>将节点插入到指定节点前边</td>
</tr>
<tr>
<td>replaceChild()</td>
<td>使用指定的节点替换已有的子节点</td>
</tr>
<tr>
<td>removeChild()</td>
<td>删除指定的子节点</td>
</tr>
<tr>
<td>remove()</td>
<td>删除自身</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">父节点.appendChild(子节点)</span><br><span class="line"></span><br><span class="line">父节点.insertBefore(新节点, 旧节点)</span><br><span class="line"></span><br><span class="line">父节点.replaceChild(新节点, 旧节点)</span><br><span class="line"></span><br><span class="line">父节点.removeChild(子节点)</span><br><span class="line"></span><br><span class="line">el.remove() <span class="comment">// 删除自身</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-innerHTML-也可以完成增删改节点操作"><a href="#使用-innerHTML-也可以完成增删改节点操作" class="headerlink" title="使用 innerHTML 也可以完成增删改节点操作"></a>使用 innerHTML 也可以完成增删改节点操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ul.innerHTML += <span class="string">&#x27;&lt;li&gt;苹果&lt;/li&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="获取-设置元素的属性"><a href="#获取-设置元素的属性" class="headerlink" title="获取/设置元素的属性"></a>获取/设置元素的属性</h2><ul>
<li><p>元素对象.属性名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素对象.value</span><br></pre></td></tr></table></figure></li>
<li><p>表单元素.disabled</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">input.disabled = <span class="literal">true</span>  <span class="comment">// 禁用</span></span><br><span class="line">input.disabled = <span class="literal">false</span> <span class="comment">// 启用</span></span><br></pre></td></tr></table></figure></li>
<li><p>class 是个例外</p>
<ul>
<li>读取 class 属性要使用 <code>元素对象.className</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">input.className</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h3><p>通过修改 class 属性来修改元素的样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box.className += <span class="string">&#x27; b2&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="添加-删除类"><a href="#添加-删除类" class="headerlink" title="添加/删除类"></a>添加/删除类</h3><p>通过 classList 属性来添加删除类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ele.classList.add(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">ele.classList.remove(<span class="string">&#x27;bar&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="获取元素节点的内部内容"><a href="#获取元素节点的内部内容" class="headerlink" title="获取元素节点的内部内容"></a>获取元素节点的内部内容</h2><ol>
<li>元素对象.innerHTML<ul>
<li>只能获取 <code>非自结束标签 (非单标签) </code>的内容</li>
</ul>
</li>
<li>元素对象.innerText<ul>
<li>只获取文本内容, 如果有标签, 会自动去除 html 标签</li>
</ul>
</li>
</ol>
<h1 id="操作-获取元素样式"><a href="#操作-获取元素样式" class="headerlink" title="操作/获取元素样式"></a>操作/获取元素样式</h1><table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>元素.style.样式名 = 值</td>
<td>设置的是 <strong>内联样式</strong>(具有较高的优先级，样式名使用 <strong>驼峰命名法</strong>)</td>
</tr>
<tr>
<td>元素.style.样式名</td>
<td>获取的是 <strong>内联样式</strong>, <strong>无法获取到 css 样式表中的样式</strong>，带单位</td>
</tr>
<tr>
<td>元素.currentStyle.样式名 <strong>(只有 IE 支持)</strong></td>
<td>获取 <code>当前显示的样式</code>; <strong>谁生效获取谁</strong>，只读，不可修改；<em>如果要修改, 必须通过 style 属性</em></td>
</tr>
<tr>
<td>getComputedStyle()</td>
<td>获取 <code>当前显示的样式</code>; window 的方法, 直接使用 **(IE8 不支持)**；获取到的样式是 <font color=#c00>只读的</font>, 不能修改; <em>如果要修改, 必须通过 style 属性</em></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box.style.width = <span class="string">&#x27;300px&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数 —— 要获取样式的元素</span></span><br><span class="line"><span class="comment">// 第二个参数 —— 一般传 null</span></span><br><span class="line"><span class="comment">// 返回一个对象, 对象中封装了当前元素的样式</span></span><br><span class="line"><span class="built_in">console</span>.log(getComputedStyle(box1, <span class="literal">null</span>).width) <span class="comment">// 100px</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取元素样式的兼容方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle ? getComputedStyle(element, <span class="literal">null</span>)[attr] : element.currentStyle[attr]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取-DOM-元素的尺寸-amp-位置"><a href="#获取-DOM-元素的尺寸-amp-位置" class="headerlink" title="获取 DOM 元素的尺寸&amp;位置"></a>获取 DOM 元素的尺寸&amp;位置</h1><h2 id="client-系列-padding-box"><a href="#client-系列-padding-box" class="headerlink" title="client 系列 (padding-box)"></a>client 系列 (padding-box)</h2><ul>
<li>clientHeight/clientWidth<ul>
<li>获取元素的 <strong><code>可见大小</code></strong></li>
<li>返回的是数值, <em>不带 px</em></li>
<li>包含 padding, 不包含 border</li>
<li><strong>只读的, 不能修改</strong></li>
</ul>
</li>
</ul>
<h2 id="offset-系列-border-box"><a href="#offset-系列-border-box" class="headerlink" title="offset 系列 (border-box)"></a>offset 系列 (border-box)</h2><ul>
<li>offsetWidth/offsetHeight<ul>
<li>获取元素的大小</li>
<li>包含 padding 和 border</li>
</ul>
</li>
<li>element.offsetParent<ul>
<li>获取当前元素的**<code>定位</code>**父元素</li>
<li>返回父元素对象</li>
<li>获取到离当前元素最近的 <strong>开启了定位</strong> 的祖先元素</li>
</ul>
</li>
<li>offsetLeft/offsetTop<ul>
<li>获取当前元素相对于其定位父元素的 <code>偏移量</code></li>
</ul>
</li>
</ul>
<h2 id="scroll-系列"><a href="#scroll-系列" class="headerlink" title="scroll 系列"></a>scroll 系列</h2><ul>
<li><p>scrollWidth/scrollHeight</p>
<ul>
<li>获取当前元素整个实际的大小</li>
</ul>
</li>
<li><p>element.scrollLeft</p>
<ul>
<li>获取当前元素水平滚动出去的距离</li>
</ul>
</li>
<li><p><strong>element.scrollTop</strong></p>
<ul>
<li>一个元素的 <code>scrollTop</code> 值是这个元素的 <strong>内容顶部</strong>（卷起来的）到它的视口可见内容（的顶部）的距离的度量</li>
<li>当一个元素的内容没有产生垂直方向的滚动条，那么它的 <code>scrollTop</code> 值为 <code>0</code></li>
<li><font color=#c00>当满足 ele.scrollHeight - ele.scrollTop = ele.clientHeight 时, 表示垂直滚动条已经到底了</font></li>
<li>⚠️ 网页向上卷曲出去的高度问题<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> st = <span class="built_in">document</span>.documentElement.scrollTop</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><a href="https://www.runoob.com/jsref/dom-obj-event.html">事件参考</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">事件汇总MDN</a><br>文档或浏览器窗口中发生的一些 <strong>特定的交互瞬间</strong>, 就是用户和浏览器之间的交互行为</p>
<ul>
<li>JS 和 HTML 之间的额交互是通过 <code>事件</code> 实现的</li>
<li>代表性事件<ul>
<li>点击、鼠标移入/出、键盘按下……</li>
<li>事件被触发时, 对应的函数执行</li>
</ul>
</li>
</ul>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>当事件响应函数被触发时, 浏览器每次都会将一个 <strong>事件对象</strong> 作为实参传递给响应函数</p>
<ul>
<li>在事件对象中, 封装了当前事件相关的一切信息, 比如:<font color=#c00>鼠标坐标、键盘哪个按键被按下、阻止事件冒泡、阻止浏览器默认行为、判断触发事件的对象…</font></li>
</ul>
<h3 id="event-对象常用属性"><a href="#event-对象常用属性" class="headerlink" title="event 对象常用属性"></a>event 对象常用属性</h3><ul>
<li><p>clientX/clientY</p>
<ul>
<li>鼠标相对于 <strong>当前可见窗口左上角</strong> 的坐标值</li>
</ul>
</li>
<li><p>pageX/pageY (IE8 不支持)</p>
<ul>
<li>鼠标相对于 <strong>页面左上角</strong> 的坐标值<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实时获取鼠标的坐标</span></span><br><span class="line">areaDiv.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event <span class="comment">// 兼容 IE8 写法</span></span><br><span class="line">    <span class="built_in">console</span>.log(e) <span class="comment">// [object MouseEvent]</span></span><br><span class="line">    <span class="keyword">var</span> x = e.clientX</span><br><span class="line">    <span class="keyword">var</span> y = e.clientY</span><br><span class="line">    </span><br><span class="line">    showMsg.innerHTML = <span class="string">&#x27;x=&#x27;</span> + x + <span class="string">&#x27;, y=&#x27;</span> + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>offsetX/offsetY</p>
<ul>
<li>鼠标相对于 <strong>事件元素左上角</strong> 的坐标值</li>
</ul>
</li>
<li><p>target</p>
<ul>
<li>返回触发此事件的元素</li>
</ul>
</li>
<li><p>keyCode</p>
<ul>
<li>对于 keydown 和 keyup 事件，返回按键编码</li>
</ul>
</li>
<li><p>cancelBubble</p>
<ul>
<li>阻止事件冒泡</li>
</ul>
</li>
<li><p>preventDefault()</p>
<ul>
<li>阻止浏览器默认行为, IE8 不支持</li>
</ul>
</li>
<li><p>⚠️在 IE8 中, 响应函数触发时, 浏览器不会传递事件对象; 而是将事件对象作为 window 的属性保存的</p>
<p><strong>window.event</strong></p>
</li>
<li><p>解决兼容性问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">event = event || <span class="built_in">window</span>.event   <span class="comment">// 兼容 IE8 写法</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="事件冒泡-Bubble"><a href="#事件冒泡-Bubble" class="headerlink" title="事件冒泡(Bubble)"></a>事件冒泡(Bubble)</h2><p>指的就是事件的向上传导, 当后代的元素被触发时, 其祖先元素的**<code>相同</code>**事件也会被触发</p>
<ul>
<li>在触发事件的元素(<em>后代元素</em>)的响应事件函数中 <strong>取消冒泡</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">event.stopPropagation()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a>事件委派</h2><p>将事件绑定给元素共同的 <code>祖先元素</code>, 这样当后代元素的事件触发时, 会一直冒泡到祖先元素<br>从而通过祖先元素的响应函数来处理事件</p>
<ol>
<li>只绑定一次事件, 即可应用到多个元素上; <font color=#c00><strong>即使元素是后添加的</strong></font></li>
<li>可以减少事件绑定次数, 提高性能</li>
</ol>
<ul>
<li><strong>event.target</strong><ul>
<li>返回触发事件的对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ul.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断触发事件的对象</span></span><br><span class="line">    <span class="keyword">if</span>(event.target.className === <span class="string">&#x27;link&#x27;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h2><p>使用 <code>对象.事件 = 响应函数</code> 的形式只能为一个元素的同一个事件绑定 <strong>一个</strong> 响应函数</p>
<ul>
<li><p>如何同时绑定多个?</p>
<ul>
<li><p><strong>addEventListener()</strong>  (IE8 不支持)</p>
<ul>
<li>第一个参数 —— 事件字符串(不带 on)</li>
<li>第二个参数 —— 事件处理函数</li>
<li>第三个参数 —— false (控制事件阶段)</li>
<li>当事件被触发时, 会按绑定顺序执行</li>
<li>回调函数中的 this 是绑定事件的对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;1&#x27;</span>)    </span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;2&#x27;</span>)    </span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>attachEvent() (IE8)</p>
<ul>
<li>第一个参数 —— 事件字符串(带 on)</li>
<li>第二个参数 —— 事件处理函数</li>
<li>当事件被触发时, 会按后绑定的先执行</li>
<li>回调函数中的 this 是 window<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.attachEvent(<span class="string">&#x27;onclick&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">btn.attachEvent(<span class="string">&#x27;onclick&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>兼容方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ele —— 要绑定事件的对象</span></span><br><span class="line"><span class="comment">// eventStr —— 事件字符串(不带 on)</span></span><br><span class="line"><span class="comment">// callback —— 回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">ele, eventStr, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele.addEventListener) &#123;</span><br><span class="line">        <span class="comment">// 大多数浏览器</span></span><br><span class="line">        ele.addEventListener(eventStr, callback, <span class="literal">false</span>)    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// IE8</span></span><br><span class="line">        ele.attachEvent(<span class="string">&#x27;on&#x27;</span> + eventStr, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback.call(ele)</span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bind(btn, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">bind(btn, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="事件的解绑"><a href="#事件的解绑" class="headerlink" title="事件的解绑"></a>事件的解绑</h2><p>dom 0 方式绑定的事件的解绑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.onclick = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>dom 2 方式绑定的事件的解绑 —— removeEventListener()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.removeEventListener(<span class="string">&#x27;transitionend&#x27;</span>, fn)</span><br></pre></td></tr></table></figure>

<h2 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h2><ol>
<li>捕获阶段 —— 从外向里</li>
<li>目标阶段 —— 最开始选择的那个元素</li>
<li>冒泡阶段 —— 从里向外</li>
</ol>
<h2 id="加载事件-onload"><a href="#加载事件-onload" class="headerlink" title="加载事件 onload"></a>加载事件 onload</h2><ul>
<li>onload <ul>
<li>页面/图片加载事件</li>
<li>在页面/图片元素完全 <code>渲染完毕</code> 才会执行</li>
</ul>
</li>
</ul>
<h2 id="鼠标事件-onmouse"><a href="#鼠标事件-onmouse" class="headerlink" title="鼠标事件 onmouse**"></a>鼠标事件 onmouse**</h2><ul>
<li>onmousemove </li>
<li>onmousedown</li>
<li>onmouseup</li>
<li>onmouseenter/onmouseleave</li>
</ul>
<h2 id="鼠标滚轮事件-onwheel"><a href="#鼠标滚轮事件-onwheel" class="headerlink" title="鼠标滚轮事件 onwheel"></a>鼠标滚轮事件 onwheel</h2><p><code>onwheel</code> 通常用于处理滑轮的滚动事件</p>
<p>触发条件 —— 鼠标滚轮、触摸板</p>
<ul>
<li>onwheel <ul>
<li>event.deltaX —— 横向滚动量</li>
<li>event.deltaY —— 纵向滚动量<ul>
<li>向下滚 &gt; 0</li>
<li>向上滚 &lt; 0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="滚动事件-onscroll"><a href="#滚动事件-onscroll" class="headerlink" title="滚动事件 onscroll"></a>滚动事件 onscroll</h2><p><code>onscroll</code> 用于处理某个对象内容的滚动</p>
<p>触发条件 —— 鼠标滚轮、上下键、拖动滚动条、触摸板</p>
<p>⚠️ 注意点</p>
<ol>
<li><p>不要给 body 添加 onscroll 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// window, 而不是 body, 且 body.scrollTop 的值永远为 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>获取页面滚动距离时，最好加给 document</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;scroll&#x27;</span>, <span class="built_in">document</span>.documentElement.scrollTop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>给其他元素添加 onscroll 事件需要指定高度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line"></span><br><span class="line">box.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;scroll&#x27;</span>, <span class="built_in">this</span>.scrollTop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="拖拽事件"><a href="#拖拽事件" class="headerlink" title="拖拽事件"></a>拖拽事件</h2><ul>
<li><p>拖拽流程</p>
<ul>
<li>1.鼠标在被拖拽元素上 <strong><code>按下</code></strong> 开始拖拽</li>
<li>2.鼠标 **<code>移动</code>**时, 被拖拽元素跟随鼠标移动</li>
<li>3.鼠标 **<code>松开</code>**时, 被拖拽元素固定在当前位置<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标按下时</span></span><br><span class="line">box.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置 box 捕获所有按下事件</span></span><br><span class="line">    box.setCapture &amp;&amp; box.setCapture() <span class="comment">// 兼容 IE8</span></span><br><span class="line">    <span class="keyword">var</span> distanceX = e.clientX - <span class="built_in">this</span>.offsetLeft</span><br><span class="line">    <span class="keyword">var</span> distanceY = e.clientY - <span class="built_in">this</span>.offsetTop</span><br><span class="line">    <span class="comment">// 鼠标拖动时</span></span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e = e || <span class="built_in">window</span>.event</span><br><span class="line">        <span class="keyword">var</span> left = e.clientX</span><br><span class="line">        <span class="keyword">var</span> top = e.clientY</span><br><span class="line">        box.style.left = left - distanceX + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        box.style.top = top - distanceY + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鼠标松开时</span></span><br><span class="line">    <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 取消鼠标拖动事件</span></span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 取消鼠标松开事件</span></span><br><span class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 取消对事件的捕获</span></span><br><span class="line">        box.releaseCapture &amp;&amp; box.releaseCapture() <span class="comment">// 兼容 IE8</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>当我们拖拽网页中的内容时, 浏览器会默认去搜索引擎中搜索内容, 此时导致拖拽功能异常, 这是浏览器的默认行为; 如果不希望发生这个行为, 可以通过 return false 来取消默认行为 (IE8 无效)</p>
</li>
</ul>
<h2 id="键盘事件-onkey"><a href="#键盘事件-onkey" class="headerlink" title="键盘事件 onkey**"></a>键盘事件 onkey**</h2><p>键盘事件 <font color=#c00><strong>一般会绑定给可以获取到焦点的对象(表单)或者 document</strong></font></p>
<ul>
<li><p>可以通过 keyCode 获取按键 Unicode 编码</p>
</li>
<li><p>onkeydown</p>
<ul>
<li>键盘按下</li>
<li>如果一直按着不松手, 则事件会一直触发 (<em>但是第一次会有卡顿,可用定时器解决</em>) <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定时器解决移动卡顿的例子--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取 box 元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义方向变量</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dir = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 速度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> speed = <span class="number">10</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 为 document 绑定键盘按下事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      e = e || <span class="built_in">window</span>.event</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 判断是否按下 ctrl</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (e.ctrlKey) &#123;</span></span><br><span class="line"><span class="javascript">        speed = <span class="number">200</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        speed = <span class="number">10</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 判断方向</span></span></span><br><span class="line"><span class="javascript">      dir = e.keyCode</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 为 document 绑定键盘松开事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      dir = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">switch</span> (dir) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="number">37</span>:</span></span><br><span class="line"><span class="javascript">          <span class="comment">// alert(&#x27;左&#x27;)</span></span></span><br><span class="line"><span class="javascript">          box.style.left = box.offsetLeft - speed + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">break</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="number">38</span>:</span></span><br><span class="line"><span class="javascript">          <span class="comment">// alert(&#x27;上&#x27;)</span></span></span><br><span class="line"><span class="javascript">          box.style.top = box.offsetTop - speed + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">break</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="number">39</span>:</span></span><br><span class="line"><span class="javascript">          <span class="comment">// alert(&#x27;右&#x27;)</span></span></span><br><span class="line"><span class="javascript">          box.style.left = box.offsetLeft + speed + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">break</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="number">40</span>:</span></span><br><span class="line"><span class="javascript">          <span class="comment">// alert(&#x27;下&#x27;)</span></span></span><br><span class="line"><span class="javascript">          box.style.top = box.offsetTop + speed + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">break</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="number">20</span>)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>onkeyup</p>
<ul>
<li>键盘松开<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event</span><br><span class="line">   <span class="comment">// console.log(e.keyCode)</span></span><br><span class="line">    <span class="keyword">if</span> (e.keyCode === <span class="number">89</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log (<span class="string">&#x27;y 被按下了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event </span><br><span class="line">    <span class="comment">// 不让输入数字</span></span><br><span class="line">    <span class="keyword">if</span> (e.keyCode &gt;=<span class="number">48</span> &amp;&amp; e.keyCode &lt;=<span class="number">57</span>) &#123;</span><br><span class="line">        <span class="comment">// 在 input 中输入内容, 属于 onkeydown 的默认行为; </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>   <span class="comment">// 如果取消了 onkeydown 的默认行为, 则无法在文本框中输入内容</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>keyCode</p>
<ul>
<li>按键编码</li>
</ul>
</li>
<li><p>altKey</p>
<ul>
<li>alt 是否被按下, 返回 true/false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(event.altKey &amp;&amp; event.keyCode === <span class="number">89</span>) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;alt 和 y 都被按下了&#x27;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>ctrlKey</p>
<ul>
<li>ctrl 是否被按下, 返回 true/false</li>
</ul>
</li>
<li><p>shiftKey</p>
<ul>
<li>shift 是否被按下, 返回 true/false</li>
</ul>
</li>
</ul>
<h2 id="右键菜单-oncontextmenu"><a href="#右键菜单-oncontextmenu" class="headerlink" title="右键菜单 oncontextmenu"></a>右键菜单 oncontextmenu</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 自定义右键菜单</span></span><br><span class="line">  <span class="comment">// 1.获取鼠标点的坐标</span></span><br><span class="line">  。。。</span><br><span class="line">  <span class="comment">// 2.设置给自定义菜单元素的 left/top</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 3.阻止默认的右键菜单</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="浏览器的默认行为"><a href="#浏览器的默认行为" class="headerlink" title="浏览器的默认行为"></a>浏览器的默认行为</h1><ol>
<li>a 链接的跳转</li>
<li>右键出现菜单</li>
<li>鼠标复制后搜索</li>
</ol>
<h1 id="阻止浏览器默认行为"><a href="#阻止浏览器默认行为" class="headerlink" title="阻止浏览器默认行为"></a>阻止浏览器默认行为</h1><p>阻止 dom0 的默认行为</p>
<ul>
<li><p><strong>return false</strong> 或 e.preventDefault() 都可以<br>阻止 dom2(通过 addEventListener 方式绑定的事件) 的默认行为</p>
</li>
<li><p><strong>只能使用 e.preventDefault()</strong></p>
<ul>
<li>IE8 不支持 e.preventDefault</li>
<li><font color=#c40>兼容写法</font><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">e.preventDefault &amp;&amp; e.preventDefault()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h1><p><a href="http://www.w3school.com.cn/jsref/dom_obj_window.asp">参考手册</a></p>
<ul>
<li>confirm(‘确认删除吗?’)<ul>
<li>带有确认和取消按钮</li>
<li>点击确认, 返回 true</li>
<li>点击取消, 返回 false<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (confirm(<span class="string">&#x27;确认删除吗?&#x27;</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="html-格式字符串转-js-字符串"><a href="#html-格式字符串转-js-字符串" class="headerlink" title="html 格式字符串转 js 字符串"></a>html 格式字符串转 js 字符串</h1><p><a href="https://www.html.cn/tool/html2js/">html2js</a></p>
]]></content>
      <tags>
        <tag>JS 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2016/06/08/02-CSS/</url>
    <content><![CDATA[<h1 id="CSS-Cascading-Style-Sheet"><a href="#CSS-Cascading-Style-Sheet" class="headerlink" title="CSS(Cascading Style Sheet)"></a>CSS(Cascading Style Sheet)</h1><p>层叠样式表，通过样式表对网页进行装饰</p>
<p><a href="http://www.w3school.com.cn/cssref/index.asp">CSS 参考手册</a></p>
<span id="more"></span>

<h2 id="样式表的组成"><a href="#样式表的组成" class="headerlink" title="样式表的组成"></a>样式表的组成</h2><ul>
<li><p>样式表由 <code>规则</code> 组成</p>
</li>
<li><p>规则由 <code>选择器 + 声明块</code> 组成</p>
</li>
<li><p>声明块由 <code>声明</code> 组成</p>
</li>
<li><p>声明由 <code>属性名 + 属性值</code> 组成</p>
</li>
</ul>
<p>浏览器读取编译 css 选择器的顺序 <code>从右向左</code></p>
<ul>
<li>匹配效率更高</li>
</ul>
<h1 id="包含块"><a href="#包含块" class="headerlink" title="包含块"></a>包含块</h1><p>就是之前理解的父元素的新解释</p>
<ul>
<li>对于浮动元素, 其包含块定义为<code>最近的父元素</code></li>
<li>对于定位元素<ul>
<li>absolute 定位的子元素, 其包含块是 <code>其最近的有定位的祖先元素</code></li>
<li>如果没有定位的祖先元素, 则其包含块定义为<code>初始包含块</code></li>
</ul>
</li>
<li>绝对定位参照于 <font color=#c00>包含块</font> 定位</li>
<li>固定定位参照于 <font color=#c40>视口</font></li>
</ul>
<h2 id="初始包含块"><a href="#初始包含块" class="headerlink" title="初始包含块"></a>初始包含块</h2><p>是一个视口大小的矩形</p>
<ul>
<li><strong>只有拖动系统滚动条, 初始包含块才会动</strong><ul>
<li>可以利用这点实现绝对定位模拟固定定位</li>
</ul>
</li>
</ul>
<h1 id="CSS写在哪里"><a href="#CSS写在哪里" class="headerlink" title="CSS写在哪里?"></a>CSS写在哪里?</h1><ol>
<li><p>内联样式  (只对当前标签起作用)</p>
<ul>
<li><p>写到元素的 style 属性当中</p>
</li>
<li><p>内联样式不方便复用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 16px;&quot;</span>&gt;</span></span><br><span class="line">    锄禾日当午</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>内部样式</p>
<ul>
<li><p>写到 head 标签的 style 标签里</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>外部样式  (推荐方式)</p>
<ul>
<li><p>写在单独的 .css 文件里</p>
</li>
<li><p>样式可以复用</p>
</li>
<li><p>通过 link 标签引入, 可以利用浏览器的缓存, 加快用户访问速度, 提高用户体验</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h1 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h1><p>选择器  声明块</p>
<ul>
<li>选择器 —— 选中页面中指定的元素</li>
<li>声明块 —— 紧跟在选择前后边, 使用一对 {} 括起来, 声明块中实际上是一组组的名值对, 这一组组的名值对我们称为声明, 一个声明块中可以写多个声明</li>
</ul>
<h1 id="CSS-基础选择器"><a href="#CSS-基础选择器" class="headerlink" title="CSS 基础选择器"></a>CSS 基础选择器</h1><h2 id="标签-元素-选择器"><a href="#标签-元素-选择器" class="headerlink" title="标签(元素)选择器"></a>标签(元素)选择器</h2><p>使用标签名做选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>通过元素的 class 属性来选中 <code>多个</code> 元素</p>
<ul>
<li>类名前边要加 .</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fs</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id  选择器"></a>id  选择器</h2><p>通过元素的 id  来选中<code>唯一</code>的元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#p1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>多个元素具有相同的样式</p>
<ul>
<li>选择器1, 选择器2, 选择器3  (<strong>逗号分隔</strong>)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.p</span>, <span class="selector-id">#p1</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="交集选择器-复合选择器"><a href="#交集选择器-复合选择器" class="headerlink" title="交集选择器  (复合选择器)"></a>交集选择器  (复合选择器)</h2><p>对元素的进一步过滤</p>
<ul>
<li><p>选择器1选择器2  (之间没有空格)</p>
</li>
<li><p>对 id 选择器来说, 不建议使用交集选择器</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.p3</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>选中页面中的所有元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>祖先元素 后代元素  (<strong>空格隔开</strong>)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h2><p>选择直接子元素</p>
<ul>
<li>父元素 &gt; 子元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h2><p>选择同级的兄弟节点</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 相邻的后一个兄弟元素(紧挨着) */</span></span><br><span class="line"><span class="selector-tag">span</span> + <span class="selector-tag">p</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 后边所有的兄弟元素 */</span> </span><br><span class="line"><span class="selector-tag">span</span> ~ <span class="selector-tag">p</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类专门用来表示元素的一种 <code>特殊的状态</code></p>
<ul>
<li>浏览器是通过 <code>历史记录</code> 来判断一个链接是否访问过</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 正常链接(未访问过) */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问过的链接 */</span></span><br><span class="line"><span class="comment">/* 只能设置字体颜色 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标经过的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选定的链接(点了还没放) */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取焦点 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>⚠️ <strong>:hover  和 :active  也可以设置给其它元素</strong></p>
<h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p>使用伪元素来表示元素中的一些 <strong><code>特殊位置</code></strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 指定元素的第一个字符 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指定元素的第一行 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标划过选中的文字样式 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;&#125;</span><br><span class="line"><span class="comment">/* 兼容火狐 */</span></span><br><span class="line"><span class="selector-tag">p</span>::-moz-selection &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指定元素前 (必须带 content 属性) */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;哈哈&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指定元素后 (必须带 content 属性) */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;哈哈&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>根据元素中的 <code>属性</code> 或 <code>属性值 </code> 来选取指定元素</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>例子</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>[attribute]</td>
<td>[target]</td>
<td>选择带有 target 属性所有元素</td>
</tr>
<tr>
<td>[attribute=value]</td>
<td>[target=_blank]</td>
<td>选择 target=”_blank” 的所有元素</td>
</tr>
<tr>
<td>[attribute*=value]</td>
<td>a[src*=”abc”]</td>
<td>选择其 src 属性中包含 “abc” 子串的每个 <a> 元素</td>
</tr>
<tr>
<td>[attribute^=value]</td>
<td>a[src^=”https”]</td>
<td>选择其 src 属性值以 “https” 开头的每个 <a> 元素</td>
</tr>
<tr>
<td>[attribute$=value]</td>
<td>a[src$=”.pdf”]</td>
<td>选择其 src 属性以 “.pdf” 结尾的所有 <a> 元素</td>
</tr>
</tbody></table>
<h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><p>先找 p 的父元素, 再看其父元素的第一个子元素是不是 p</p>
<ul>
<li>其它同理</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 第一个 p 元素 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 最后一个 p 元素 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第几个子元素是不是 p */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 偶数个子元素 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(even) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 奇数个子元素 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 父元素的子元素中的第一个类型为 p 的元素 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-of-type &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当前类型元素中的最后一个 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:last-of-type</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当前类型元素中的第几个 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(n) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="区分-nth-child-和-nth-of-type"><a href="#区分-nth-child-和-nth-of-type" class="headerlink" title="区分 nth-child 和 nth-of-type"></a>区分 nth-child 和 nth-of-type</h3><p>nth-child —— 父元素的的第几个是不是该元素</p>
<p>nth-of-type —— 父元素中的第几个该类型的元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>456<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="comment">/* 选不到任何元素，因为第一个元素是 p */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-of-type &#123;</span><br><span class="line">  <span class="comment">/* 可以选到 div */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="否定伪类选择器"><a href="#否定伪类选择器" class="headerlink" title="否定伪类选择器"></a>否定伪类选择器</h2><p>否定伪类可以从已选中的元素中剔除某些元素</p>
<ul>
<li>:not(选择器)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选中所有的 p, 不要类名为 hello 的 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.hello</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS样式的继承"><a href="#CSS样式的继承" class="headerlink" title="CSS样式的继承"></a>CSS样式的继承</h1><p>后代元素继承祖先元素的样式</p>
<ul>
<li>利用继承可以将 <code>一些基本样式设置</code> 给祖先元素, 这样所有的后代元素都会自动继承这些样式</li>
</ul>
<h2 id="能被继承的样式"><a href="#能被继承的样式" class="headerlink" title="能被继承的样式"></a>能被继承的样式</h2><ol>
<li><p>文本颜色、字号</p>
</li>
<li><p>text- 、font-、line- 这些开头的</p>
</li>
</ol>
<h1 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h1><p>当样式发生冲突的时候, 谁的优先级高的显示谁</p>
<ul>
<li>优先级相同时, 以后面的那个为准</li>
</ul>
<p>优先级排序</p>
<ul>
<li>!important  &gt;  行内  &gt;  id 选择器  &gt;  类选择器  &gt;  标签选择器  &gt;  通配符选择器  &gt;  继承<ul>
<li>!important  写在分号前  <code>color: red !important;</code></li>
</ul>
</li>
</ul>
<h1 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h1><table>
<thead>
<tr>
<th>样式</th>
<th>属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>字体颜色</td>
<td>color</td>
<td></td>
</tr>
<tr>
<td>字体大小</td>
<td>font-size</td>
<td>设置的不是文字本身的大小 (每个文字都在一个框中, 设置的字体大小是框的大小)</td>
</tr>
<tr>
<td>字体</td>
<td>font-family</td>
<td>网页中的字体分为 5 大类(serif  / sans-serif / monospace / cursive / fantasy)</td>
</tr>
<tr>
<td>字体粗细</td>
<td>font-weight</td>
<td>400 —— normal; 700 —— bold</td>
</tr>
<tr>
<td>小型大写字母</td>
<td>font-variant</td>
<td>将所有字母都以大写字母显示, 但是小型大写字母要比大写字母要小一些;normal —— 默认值, 正常显示; small-caps —— 小型大写字母</td>
</tr>
</tbody></table>
<p>⚠️ font-family 注意事项</p>
<ol>
<li><p>一般将大分类放在 font-family 的<code>最后</code></p>
</li>
<li><p>当采用某种具体的字体时, 如果浏览器支持, 则使用该字体; 否则使用默认字体</p>
</li>
<li><p>可以指定多个字体, 多个字体之间用逗号隔开; </p>
</li>
<li><p><strong>字体名称中带空格的, 要把字体名引号引起来</strong></p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif, arial, <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字体样式简写"><a href="#字体样式简写" class="headerlink" title="字体样式简写"></a>字体样式简写</h2><p><code>font: italic bold 30px/行高 &quot;微软雅黑&quot;</code></p>
<ol>
<li><p>斜体、加粗、小型大写字母没有顺序要求, 也可以不写; 如果不写, 则使用默认值</p>
</li>
<li><p>行高也可以不写; 如果不写, 则使用默认值</p>
</li>
<li><p>大小和字体 <code>必须写</code>, 字体必须是<code>最后一个</code>, 大小是 <code>倒数第二个</code></p>
</li>
</ol>
<h2 id="自定义字体图标的使用"><a href="#自定义字体图标的使用" class="headerlink" title="自定义字体图标的使用"></a>自定义字体图标的使用</h2><ol>
<li>先声明自定义字体的名称和源文件</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;wjs&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">../fonts/MiFie-Web-Font.svg</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">../fonts/MiFie-Web-Font.eot</span>) <span class="built_in">format</span>(<span class="string">&#x27;eot&#x27;</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">../fonts/MiFie-Web-Font.ttf</span>) <span class="built_in">format</span>(<span class="string">&#x27;ttf&#x27;</span>),</span><br><span class="line">         <span class="built_in">url</span>(<span class="string">../fonts/MiFie-Web-Font.woff</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义使用字体图标的类</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wjs_icon</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: wjs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wjs_icon_phone</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;\e980&#x27;</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在 html 中使用字体图标</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;wjs_icon wjs_icon_phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="如何获得自定义图标的编码-就是-content-的内容呢"><a href="#如何获得自定义图标的编码-就是-content-的内容呢" class="headerlink" title="如何获得自定义图标的编码(就是 content 的内容呢?)"></a>如何获得自定义图标的编码(就是 content 的内容呢?)</h2><p>如果是下载第三方图标, 下载时会附带</p>
<p>如果是自己做的图标, <a href="https://icomoon.io/">iconMoon在线字体生成</a></p>
<h1 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h1><ul>
<li>行高  <ul>
<li>line-height<ul>
<li>可以接收一个大小  (带 px)</li>
<li>可以接收一个数值  (基于自身字体大小的倍数)</li>
<li>可以接收一个百分数  (基于自身字体大小)</li>
</ul>
</li>
<li><strong>对于<code>单行文本</code>, 可以设置行高和父元素高度一致, 可以使单行文本在父元素中<code>垂直居中</code></strong></li>
<li>行间距 = 行高 - 字体大小</li>
</ul>
</li>
<li>大小写<ul>
<li>text-transform<ul>
<li>none —— 默认值, 正常显示</li>
<li>capitalize —— 单词首字母大写  (以空格来识别单词)</li>
<li>uppercase —— 所有字母都大写</li>
<li>lowercase —— 所有字母都小写</li>
</ul>
</li>
</ul>
</li>
<li>文本修饰<ul>
<li>text-decoration<ul>
<li>none —— 默认值, 正常显示</li>
<li>underline —— 下划线</li>
<li>overline —— 上划线</li>
<li>line-through ——划过文本的线</li>
</ul>
</li>
</ul>
</li>
<li>字符间距 和 单词间距<ul>
<li>letter-sapcing<ul>
<li>normal ——  默认值, 正常显示</li>
<li><em>length</em> —— 自定义数值</li>
</ul>
</li>
<li>word-spacing  (对中文无效)<ul>
<li>normal ——  默认值, 正常显示</li>
<li><em>length</em> —— 自定义数值</li>
</ul>
</li>
</ul>
</li>
<li>文本对齐<ul>
<li>text-align<ul>
<li>left —— 左对齐</li>
<li>right —— 右对齐</li>
<li>center —— 居中</li>
<li>justify —— 两端对齐  (调整文本之间的空格大小来达到两端对齐)</li>
</ul>
</li>
</ul>
</li>
<li>首行缩进<ul>
<li>text-indent<ul>
<li><em>length</em> —— 自定义值(2em), 可以为负值 </li>
<li>% —— 基于父元素宽度缩进</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="边框样式"><a href="#边框样式" class="headerlink" title="边框样式"></a>边框样式</h1><ul>
<li>border-width —— 边框宽度</li>
<li>border-color —— 边框颜色</li>
<li>border-style —— 边框样式<ul>
<li>none ——无边框</li>
<li>solid - 实线</li>
<li>dotted - 点线</li>
<li>dashed - 虚线</li>
<li>double - 双线</li>
</ul>
</li>
</ul>
<p><code>简写</code>:  border: 1px solid #ccc;</p>
<h2 id="border-的实际应用"><a href="#border-的实际应用" class="headerlink" title="border 的实际应用"></a>border 的实际应用</h2><ol>
<li><p>3/4 圆环做 loading 效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  * &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 3/4 圆环 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="built_in">rgb</span>(<span class="number">204</span>, <span class="number">204</span>, <span class="number">204</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">border-right-color</span>: transparent;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>三角形(<em>各种方向三角形</em>) <a href="https://www.jb51.net/article/42513.htm">参考</a></p>
<p><img src="/images/border-triangle.jpg"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#triangle-up</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-down</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-topleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-topright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-bottomleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-bottomright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="input-的-placeholder-的样式"><a href="#input-的-placeholder-的样式" class="headerlink" title="input 的 placeholder 的样式"></a>input 的 placeholder 的样式</h1><p>使用伪元素  <code>input::input-placeholder</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder &#123;</span><br><span class="line">    color: <span class="number">#fb4747</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>::-webkit-input-placeholder &#123;</span><br><span class="line">    color: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="设置-hr-的样式"><a href="#设置-hr-的样式" class="headerlink" title="设置 hr 的样式"></a>设置 hr 的样式</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">hr &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h1><ol>
<li><p>像素 px</p>
<ul>
<li>我们在网页中使用最多的单位, 1px 相当于屏幕中的一个点</li>
</ul>
</li>
<li><p>百分比 %</p>
<ul>
<li><p>根据父元素来计算</p>
</li>
<li><p>当父元素的属性值发生变化, 子元素也会跟着改变</p>
</li>
</ul>
</li>
<li><p>em</p>
<ul>
<li><p>相对于 <code>当前元素</code> 的字体大小来计算, 1em = 1 个 font-size</p>
</li>
<li><p>当元素的字体大小改变时, em 也会随之改变</p>
</li>
</ul>
</li>
<li><p>rem</p>
<ul>
<li>基于 html 字体大小 1rem = html 的字体大小</li>
</ul>
</li>
</ol>
<h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>CSS 处理网页时, 它认为每个元素都包含在一个看不见的盒子里</p>
<p><img src="http://www.w3school.com.cn/i/ct_boxmodel.gif"></p>
<ul>
<li><p>一个盒子我们分成几个部分</p>
<ul>
<li><p>内容区 (content)</p>
<ul>
<li>子元素默认在父元素的<code>内容区</code></li>
<li>width —— 内容区的宽度</li>
<li>height —— 内容区的高度</li>
</ul>
</li>
<li><p>内边距 (padding)</p>
</li>
<li><p>边框 (border)</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>外边距 (margin)<ul>
<li><code>不会影响可见框大小</code>, 只会影响盒子的位置</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>盒子的大小由内容区、边框 和 内边距决定</strong></p>
</blockquote>
<h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p>盒子与其它盒子之间的距离</p>
<p>写法 —— margin: 上 右 下 左</p>
<ul>
<li><p>margin 还可以设置成 auto, 一般只设置给水平方向的 margin; </p>
<p>如果<code>只</code>设置给 左/右外边距中的一个, 则外边距会设置成最大; </p>
</li>
<li><p>由于网页中的盒子都是靠上靠左摆放的, 所以注意, <strong><code>当我们设置上、左外边距时, 会导致盒子自身的位置发生变化; 而设置右、下边距, 会导致其他盒子位置发生变化</code></strong></p>
</li>
</ul>
<h3 id="块级元素水平居中"><a href="#块级元素水平居中" class="headerlink" title="块级元素水平居中"></a>块级元素水平居中</h3><p>给块级元素设置 margin: 0 auto; <em>可以让其在父元素中水平居中</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    123</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  heiht: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="margin-top-重叠问题"><a href="#margin-top-重叠问题" class="headerlink" title="margin-top 重叠问题"></a>margin-top 重叠问题</h3><p>**<code>垂直外边距</code>**的重叠问题 </p>
<ul>
<li>在网页中, <code>垂直方向</code> 的 <code>相邻</code> 外边距会发生垂直外边距的重叠<ul>
<li><code>兄弟元素</code>之间的相邻垂直外边距会<code>取较大值</code>, 而不是求和</li>
<li><code>父子元素</code>之间的垂直外边距相邻了, 则子元素的外边距会设置给父元素<ul>
<li>解决方法1 —— 给父元素设置 border-top: 1px solid #333;</li>
<li>解决方法2 —— 给父元素设置 overflow: hidden;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="内联-行内-元素的盒模型"><a href="#内联-行内-元素的盒模型" class="headerlink" title="内联(行内)元素的盒模型"></a>内联(行内)元素的盒模型</h2><ol>
<li><p>不能设置 width、height</p>
</li>
<li><p>可以设置内边距 (padding)</p>
<ul>
<li><p>可以设置 <strong>水平方向</strong>的内边距</p>
</li>
<li><p>也可以设置垂直方向的内边距, 但是不会影响网页的布局 (通常不用)</p>
</li>
</ul>
</li>
<li><p>可以设置边框 (border)</p>
<ul>
<li><p><strong>水平方向</strong>的边框没有问题</p>
</li>
<li><p>垂直方向的不会影响到网页布局 (通常不用)</p>
</li>
</ul>
</li>
<li><p>可以设置<strong>水平方向</strong>外边距 (margin)</p>
<ul>
<li><code>不支持</code>垂直方向的外边距</li>
</ul>
</li>
</ol>
<h3 id="display-和-visibility"><a href="#display-和-visibility" class="headerlink" title="display 和 visibility"></a>display 和 visibility</h3><ul>
<li>display<ul>
<li>修改元素的类型</li>
<li>none —— 不显示<ul>
<li>使用该方式隐藏的元素不显示在页面中, 也<code>不占位置</code></li>
</ul>
</li>
<li>inline —— 将一个元素作为内联元素显示</li>
<li>block —— 将一个元素作为块元素显示</li>
<li>inline-block —— 将一个元素作为行内块元素显示<ul>
<li>⚠️ 转为行内块的元素内容如果是纯文本且没有设置 width<ul>
<li><em>若纯文本没有换行, 则该行内块的宽度为文本实际宽度</em></li>
<li><em>若纯文本换行了, 则该行内块的宽度为父元素宽度</em></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>visibility<ul>
<li>元素是否可见</li>
<li>visible —— 可见</li>
<li>hidden —— 不可见<ul>
<li>元素只是在页面中不可见, 仍然<code>占位置</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><ul>
<li>设置父元素如何处理溢出的内容<ul>
<li>visible —— 默认值, 溢出部分显示</li>
<li>hidden —— 溢出部分不显示</li>
<li>scroll —— 显示滚动条 (无论是否溢出)</li>
<li>auto —— 溢出时才添加滚动条</li>
</ul>
</li>
</ul>
<h3 id="浏览器默认样式"><a href="#浏览器默认样式" class="headerlink" title="浏览器默认样式"></a>浏览器默认样式</h3><p>清除浏览器默认样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 性能不是很好, 不常用 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>文档流处在网页的最底层, 它表示的是一个页面中的位置</p>
<p>我们所创建的元素默认都处在文档流中</p>
<ul>
<li><p>元素在文档流中的特点</p>
<ul>
<li>块元素<ul>
<li>独占一行, 默认<code>自上向下</code>排列</li>
<li>块元素在文档流中<code>默认宽度</code>是父元素的 100%</li>
<li>块元素在文档流中<code>默认高度</code> 由内容决定</li>
</ul>
</li>
<li>内联元素<ul>
<li>只占自身的大小, 默认<code>从左向右</code>排列</li>
<li>内联元素的宽度和高度都由内容撑开</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>float 使元素浮动, 脱离文档流</p>
<ul>
<li>left —— 左浮动</li>
<li>right —— 右浮动</li>
</ul>
<p>浮动的特点：</p>
<ol>
<li><p>浮动只会影响它 <code>后面的元素</code></p>
</li>
<li><p>浮动的元素不会超过它上边的兄弟元素</p>
</li>
<li><p>浮动的元素 <code>不会盖住文字</code>, 文字会自动环绕在浮动元素的周围</p>
<ul>
<li>所以, 可以通过设置浮动来做 <code>文字环绕图片</code> 效果</li>
</ul>
</li>
<li><p>浮动元素的默认宽高由内容撑开</p>
</li>
</ol>
<h3 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h3><p>在文档流中, 父元素的高度默认由子元素撑开</p>
<ul>
<li><p>当子元素浮动以后, 子元素脱离文档流, 导致父元素高度塌陷, 影响网页布局</p>
<ul>
<li><p>解决方法1: 给父元素加 overflow: hidden;</p>
</li>
<li><p>解决方法2: 额外标签法 (不常用) </p>
<ul>
<li>在高度塌陷的元素的最后, 添加一个空的 div 子元素, 对其加 clear: both;</li>
</ul>
</li>
<li><p>解决方法3: 伪类元素 ::after (<font color=#c00><code>推荐使用</code></font>)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;     <span class="comment">/* 添加一个行内元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;  <span class="comment">/* 转为块级 */</span></span><br><span class="line">    <span class="attribute">clear</span>: both;     <span class="comment">/* 清除两侧浮动 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 兼容 IE6 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>解决方法4: 双伪元素 (可以解决浮动引起的<font color=#c00>父元素高度塌陷问题</font> 和 <font color=#c00>父子元素垂直外边距重叠问题</font>)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="clear-只对块级元素起作用"><a href="#clear-只对块级元素起作用" class="headerlink" title="clear (只对块级元素起作用)"></a>clear (只对块级元素起作用)</h3><p>清除其他浮动(兄弟)元素对当前元素的影响 (位置不会顶上去)</p>
<ul>
<li>none: 默认值</li>
<li>left —— 清除左侧浮动元素对当前元素的影响</li>
<li>right —— 清除右侧浮动元素对当前元素的影响</li>
<li>both —— 清除两侧浮动元素对当前元素的影响, 其实是清除影响大的</li>
</ul>
<h3 id="BFC-Block-Formatting-Context"><a href="#BFC-Block-Formatting-Context" class="headerlink" title="BFC(Block Formatting Context)"></a>BFC(Block Formatting Context)</h3><p>根据 W3C 的标准, 在页面中的元素都有一个隐含的属性, 叫 BFC (<code>块级格式化环境</code>)</p>
<ul>
<li>该属性可以设置打开或关闭, 默认时关闭的;</li>
</ul>
<p>当开启元素的 BFC 后, 元素将会有如下特性:</p>
<ol>
<li><p>父元素的垂直外边距不会和子元素重叠</p>
</li>
<li><p>开启 BFC 的元素不会被浮动元素所覆盖 (会显示在浮动元素的同一行)</p>
</li>
<li><p>开启 BFC 的元素可以包含浮动的子元素, 高度不会塌陷</p>
</li>
</ol>
<p>开启 BFC 的方式</p>
<ul>
<li>设置元素浮动 (不好用)</li>
<li>设置元素绝对定位 (不好用)</li>
<li>设置元素为 inline-block (不好用)</li>
<li>设置元素 overflow: hidden/auto; (常用)</li>
</ul>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>将指定的元素摆放到页面的额任意位置</p>
<ul>
<li><p>通过定位可以任意摆放元素</p>
</li>
<li><p>position  (<font color=#c00><code>子绝父相</code></font>)</p>
<ul>
<li>static —— 默认值, 不开启定位</li>
<li>relative —— 相对定位<ul>
<li>相对于元素原来在文档流中的位置进行定位</li>
<li>相对定位的元素不会脱离文档流, <code>不会影响网页布局</code></li>
<li>相对定位会使元素提高一个层级</li>
<li><font color=#cc0000>相对定位*<code>不会改变元素的性质</code>*  (块还是块, 内联还是内联)</font></li>
</ul>
</li>
<li>absolute —— 绝对定位<ul>
<li>绝对定位会使元素脱离文档流</li>
<li>偏移量是<font color=#c00>相对于离它最近的<code>开启了相对定位</code>的祖先元素</font></li>
<li>一般开启了子元素的绝对定位, 都会开启父元素的相对定位</li>
<li>绝对定位会使元素提升一个层级</li>
<li>绝对定位会改变元素性质, 会使元素具有<font color=#c00>行内块</font>属性</li>
</ul>
</li>
<li>fixed —— 固定定位<ul>
<li>相对于<code>浏览器窗口</code></li>
<li>开启了固定定位的元素不会随网页滚动而滚动</li>
</ul>
</li>
</ul>
</li>
<li><p>left、top、right、bottom  (开启了非 static 定位才有效)</p>
<ul>
<li>偏移量</li>
</ul>
</li>
<li><p>z-index  (开启了非 static 定位才有效) </p>
<ul>
<li>层级  (整数)</li>
<li>如果定位元素的层级是一样的, 则后面的会盖住前面的</li>
<li><font color=#c00>父元素的层级再高, 也不会盖住子元素</font></li>
<li>没有定位的元素, 不能使用 z-index</li>
</ul>
</li>
</ul>
<h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><p>透明度</p>
<ul>
<li>opacity: 0.5  (0-1之间的小数)</li>
</ul>
<p>IE8 以下使用</p>
<ul>
<li>filter: alpha(opacity=50)</li>
</ul>
<h3 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h3><ul>
<li><p>背景颜色</p>
<ul>
<li>background-color</li>
</ul>
</li>
<li><p>背景图片</p>
<ul>
<li>background-image<ul>
<li>url(图片地址)</li>
</ul>
</li>
</ul>
</li>
<li><p>背景图片平铺</p>
<ul>
<li>background-repeat<ul>
<li>no-repeat —— 不平铺</li>
<li>repeat-x —— 水平方向平铺</li>
<li>repeat-y —— 垂直方向平铺</li>
</ul>
</li>
</ul>
</li>
<li><p>背景图片位置</p>
<ul>
<li>background-position<ul>
<li>top、left、right、bottom、center 中的两个值来指定背景图片位置<ul>
<li>如果只指定了一个值, 那么第二个值默认为 center</li>
</ul>
</li>
<li>x px  y px<ul>
<li>第一个值是水平位置, 第二个值是垂直位置</li>
<li>如果只指定一个值, 第二个默认为 50%</li>
</ul>
</li>
<li>x%  y%<ul>
<li>第一个值是水平位置, 第二个值是垂直位置</li>
<li>如果只指定一个值, 第二个默认为 50%</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>背景图片滚动</p>
<ul>
<li>background-attachment<ul>
<li>scroll —— 默认值</li>
<li>fixed —— 背景图片固定在某一位置, 不随页面滚动<ul>
<li><font color=#c00>此时背景图片的定位永远相对于浏览器窗口</font></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>背景简写</p>
<ul>
<li>background: #ccc url() center center no-repeat fixed;</li>
<li>没有顺序要求, 也没有数量要求, 如果不写就采用默认值</li>
</ul>
</li>
<li><p>相对路径写在哪就是相对于哪个文件</p>
</li>
</ul>
<h3 id="背景图片切换时的闪烁问题"><a href="#背景图片切换时的闪烁问题" class="headerlink" title="背景图片切换时的闪烁问题"></a>背景图片切换时的闪烁问题</h3><ul>
<li>原因<ul>
<li>背景图片是以外部资源的形式加载进网页的, 浏览器每加载一个外部资源就需要单独发送一次请求, 但是我们的外部资源并不是同时加载的, 浏览器会在资源被使用时采取加载资源</li>
</ul>
</li>
<li>解决方法<ul>
<li><font color=#c00>精灵图 (sprite) </font> (把多个背景图拼在一张图上, 减少请求次数, 提高访问效率, 提高用户体验)</li>
<li>再通过 background-position 设置为负值来切换显示的图片的位置</li>
</ul>
</li>
</ul>
<h1 id="CSS-Hack-不推荐"><a href="#CSS-Hack-不推荐" class="headerlink" title="CSS Hack(不推荐)"></a>CSS Hack(不推荐)</h1><ul>
<li><p>指的是<code>一段特俗的代码</code>, 只在某些浏览器下识别, 而在其他浏览器下不识别</p>
<p>通过这种方式, 为一些浏览器设置一些特俗的代码</p>
</li>
<li><p>条件 hack</p>
<ul>
<li><p>只对 ie 浏览器有效, 其他浏览器都会将它识别为注释</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!-- 只会出现在 IE6 中 --&gt;</span><br><span class="line">&lt;!--<span class="selector-attr">[if IE 6]</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;远离 IE6 &lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span>--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只会出现在 IE9 以下 --&gt;</span><br><span class="line">&lt;!--<span class="selector-attr">[if lt IE 9]</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;IE9 以下显示 &lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span>--&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>属性 hack</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    _background-<span class="attribute">color</span>: red; <span class="comment">/* 只有 ie6 及以下可识别 */</span> </span><br><span class="line">    *<span class="attribute">background-color</span>: red; <span class="comment">/* 只有 ie7 及以下可识别 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: red\<span class="number">0</span>; <span class="comment">/* 只有 ie8 以上可识别 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><p>id 和 class 命名规范</p>
<ul>
<li>尽量英文</li>
<li>驼峰命名法  或  _ 连接  或  -连接</li>
</ul>
<h1 id="解决-IE6-的-png-问题"><a href="#解决-IE6-的-png-问题" class="headerlink" title="解决 IE6 的 png 问题"></a>解决 IE6 的 png 问题</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 处理ie6的png问题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script type=&quot;text/javascript&quot; src=&quot;js/DD_belatedPNG_0.0.8a-min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;script type=&quot;text/javascript&quot;&gt;DD_belatedPNG.fix(&quot;div,img,a,h1&quot;);&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="IE6-双边距问题"><a href="#IE6-双边距问题" class="headerlink" title="IE6 双边距问题"></a>IE6 双边距问题</h1><p>浮动的元素设置外边距, 在 IE6 里会变线双倍边距问题</p>
<ul>
<li>解决: <strong>display: inline;</strong></li>
</ul>
<h1 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h1><ul>
<li>left、top、right、bottom、width、height<ul>
<li>默认值为 <code>auto</code></li>
</ul>
</li>
<li>margin、padding<ul>
<li>默认值为 <code>0</code></li>
</ul>
</li>
<li>border-width<ul>
<li>默认值为 <code>中等大小</code></li>
</ul>
</li>
</ul>
<h2 id="auto-和-100-的区别"><a href="#auto-和-100-的区别" class="headerlink" title="auto 和 100% 的区别"></a>auto 和 100% 的区别</h2><p>width:auto 包含 margin-left/margin-right 的属性值</p>
<ul>
<li>width:auto 总是占据整行，不会出现滚动条</li>
</ul>
<p>width:100% 并不包含 margin-left margin-right 的属性值，直接取其父容器的宽度加上含 margin-left /margin-right的值</p>
<ul>
<li>width:100% 如果设置了 margin 就会出现滚动条</li>
</ul>
<h1 id="百分比参照谁"><a href="#百分比参照谁" class="headerlink" title="百分比参照谁?"></a>百分比参照谁?</h1><p>width、height</p>
<ul>
<li>参照父元素(包含块)的 width、height</li>
</ul>
<p>margin、padding</p>
<ul>
<li><font color=#c40><strong>参照父元素(包含块)的 width</strong></font></li>
</ul>
<h1 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h1><p>两边固定, 中间自适应</p>
<ul>
<li><p>定位实现(移动端用)</p>
</li>
<li><p>浮动实现</p>
</li>
</ul>
<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>两边固定, 中间自适应</p>
<ul>
<li><p>当中列要完整显示</p>
</li>
<li><p>当中列要优先加载</p>
</li>
<li><p>技术点</p>
<ul>
<li>1.浮动搭建完整的布局框架</li>
<li>2.margin 为负值, 调整旁边两列的位置(使三列布局到一行上)</li>
<li>3.使用相对定位, 调整旁边两列的位置到两头</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;   </span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">min-width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">right</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">      <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>不用定位</p>
<ul>
<li><p>与圣杯的区别</p>
<ul>
<li>如何处理中间列的位置<ul>
<li>圣杯用相对定位处理两侧的元素; </li>
<li>双飞翼把主列嵌套在一个父级块中</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;   </span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">min-width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.middle</span> <span class="selector-class">.m-inner</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">      <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-inner&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="等高布局-伪等高"><a href="#等高布局-伪等高" class="headerlink" title="等高布局(伪等高)"></a>等高布局(伪等高)</h1><p>margin 才能确定边界</p>
<ul>
<li><p>核心</p>
<ul>
<li>padding-bottom: 10000px;</li>
<li>margin-bottom: -10000px;</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125; </span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding-bottom</span>: <span class="number">10000px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-bottom</span>: -<span class="number">10000px</span>;</span></span><br><span class="line"><span class="css">    &#125;  </span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">      <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">      box1<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box1<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box1<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box1<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box1<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box1<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box1<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box1<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">      box2<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box2<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box2<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      box2<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="禁止系统默认滚动条"><a href="#禁止系统默认滚动条" class="headerlink" title="禁止系统默认滚动条"></a>禁止系统默认滚动条</h1><p>默认的滚动条在 <code>文档</code> 身上, 不是 html, 也不是 body</p>
<ul>
<li><p>方便自定义滚动条</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⚠️</p>
<ul>
<li>浏览器默认的滚动条是 <strong><code>文档</code></strong> 的, 不是 html 的, 也不是 body 的</li>
<li>如果单独给 html 或者 body 设置 overflow: scroll , 滚动条还是会加给 <code>文档</code></li>
<li>只有当 html 和 body 都设置 overflow: scroll, html 的滚动条会加给文档 ; body 的滚动条会加给 body</li>
</ul>
</li>
</ul>
<h2 id="使用绝对定位模拟固定定位"><a href="#使用绝对定位模拟固定定位" class="headerlink" title="使用绝对定位模拟固定定位"></a>使用绝对定位模拟固定定位</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            *&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">overflow</span>: hidden; <span class="comment">/* 禁用系统滚动条 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">overflow</span>: auto; <span class="comment">/* 滚动条是给body的, 拖动body的滚动条初始包含块不会随着动 */</span></span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#test</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">                <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 1000px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Sticky-Footer"><a href="#Sticky-Footer" class="headerlink" title="Sticky Footer"></a>Sticky Footer</h1><p>粘连布局</p>
<ul>
<li><p>我们有一块内容 <main></p>
</li>
<li><p>当 <main> 的高度足够长的时候,  <footer> 应该紧跟在 <main> 元素的后面</p>
</li>
<li><p>当 <main> 的高度比较小的时候, 我们希望这个 <footer> 粘贴在页面底部</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;    </span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">min-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">    &#125;  </span></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    &#125; </span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      main<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h1><p>Box Formatting Context —— 块级格式化上下文</p>
<ul>
<li><p>是一个独立的渲染区域, 只有 <code>块级元素</code> 参与, 它规定了内部的 <code>块级元素</code> 如何布局</p>
</li>
<li><p>BFC 的布局规则</p>
<ul>
<li>内部的 box 会在垂直方向, 一个接一个地放置</li>
<li>BFC 的区域不会与 float box 重叠</li>
<li>内部的 box 垂直方向的距离由 margin 决定, 属于同一个 BFC 的相邻的两个 box 的垂直 margin 会发生重叠</li>
<li>计算 BFC 的高度时, 浮动元素也参与计算(清除浮动)</li>
<li>BFC 就是页面上一个隔离的独立容器, 容器里的子元素不会影响到外面的元素</li>
</ul>
</li>
<li><p>BFC 什么时候出现(开启)?</p>
<ul>
<li>根元素</li>
<li>float 不为 none</li>
<li>position 为 absolute 或 fixed</li>
<li>overflow 不为 visible</li>
<li>disable 为 inline-block</li>
</ul>
</li>
</ul>
<h2 id="BFC-实现两列布局"><a href="#BFC-实现两列布局" class="headerlink" title="BFC 实现两列布局"></a>BFC 实现两列布局</h2><p>一列固定宽度, 另一列自适应</p>
<ul>
<li><p>原理</p>
<ul>
<li><p>BFC 的区域不会与 float box 重叠</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="检测低版本-IE-函数"><a href="#检测低版本-IE-函数" class="headerlink" title="检测低版本 IE 函数"></a>检测低版本 IE 函数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIE</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">document</span>.creatElement(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    b.innerHTML = <span class="string">&#x27;&lt;!--[if IE&#x27;</span> + n + <span class="string">&#x27;]&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> b.getElementsByTagName(<span class="string">&#x27;i&#x27;</span>).length === <span class="number">1</span>    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h1><ul>
<li><p>已知宽高的元素</p>
<ul>
<li><p>方案一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>方案二</p>
<ul>
<li><strong>绝对定位盒子的特性</strong><ul>
<li>水平方向上 —— left + right + width + padding + margin = 包含块的宽度</li>
<li>垂直方向上 —— top + bottom + height + padding + margin = 包含块的高度</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>未知宽高的元素水平垂直居中</p>
<ul>
<li><p>transform: translate(-50%, -50%)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">      <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">      skahsajsjjjslasjaljlajjlj<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      skahsajsjjjslasjaljlajjlj<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      skahsajsjjjslasjaljlajjlj<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>图片水平垂直居中</p>
<ul>
<li>vertical-align —— 只对 <code>行内块</code> 起作用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;timg.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h1><p>单行溢出显示省略号</p>
<ul>
<li><p>元素得 <code>设置宽度</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">      <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap; <span class="comment">/* 不换行 */</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>多行显示省略号</p>
<ul>
<li><p>可以指定显示几行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">overflow</span> : hidden;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;  // 指定几行</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>
<h1 id="cssreset"><a href="#cssreset" class="headerlink" title="cssreset"></a>cssreset</h1><p><a href="https://cssreset.com/">cssreset</a></p>
</li>
</ul>
<h1 id="通用-css-重置文件-base-css"><a href="#通用-css-重置文件-base-css" class="headerlink" title="通用 css 重置文件 base.css"></a>通用 css 重置文件 base.css</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* reset css */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* common css */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m_l10</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m_r10</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m_t10</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m_b10</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p_l10</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p_r10</span> &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p_t10</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p_b10</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.f_l</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.f_r</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b_l</span> &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b_r</span> &#123;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b_t</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b_b</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[class^=<span class="string">&quot;icon_&quot;</span>]</span>,</span><br><span class="line"><span class="selector-attr">[class*=<span class="string">&quot; icon_&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../images/sprites.png</span>) no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">200px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.more</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">9px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">9px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础之ES标准</title>
    <url>/2016/06/23/08-JS%E5%9F%BA%E7%A1%80%E4%B9%8BES%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<h1 id="JavaScript-教程"><a href="#JavaScript-教程" class="headerlink" title="JavaScript 教程"></a>JavaScript 教程</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">MDN JS 教程</a><br><a href="http://javascript.ruanyifeng.com/">阮一峰 JS教程</a></p>
<h2 id="什么是语言"><a href="#什么是语言" class="headerlink" title="什么是语言?"></a>什么是语言?</h2><p>人和计算机交流的工具, 我们通过语言来控制、操作计算机</p>
<h2 id="JS-是什么"><a href="#JS-是什么" class="headerlink" title="JS 是什么"></a>JS 是什么</h2><p>诞生于 1995 年, 前身是 LiveScript, 前期主要用于 <strong>网页验证</strong></p>
<ul>
<li><font color=#c00>一种运行在客户端的脚本语言(不需编译, 直接运行)</font></li>
<li>作用<ul>
<li>解决浏览器和用户之间的交互问题</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li><p>解释型语言</p>
<ul>
<li>不需编译, 直接运行</li>
</ul>
</li>
<li><p>动态类型语言</p>
<ul>
<li>变量可以保存任意类型的数据</li>
</ul>
</li>
<li><p>基于对象的语言</p>
</li>
</ol>
<h2 id="JS-的三个部分"><a href="#JS-的三个部分" class="headerlink" title="JS 的三个部分"></a>JS 的三个部分</h2><p>ECMAScript(标准) —— js 的基本语法<br>DOM —— 文档对象模型       =&gt;   如何通过 js 去操作网页<br>BOM —— 浏览器对象模型    =&gt;   如何通过 js 去操作浏览器</p>
<h2 id="几个输出语句"><a href="#几个输出语句" class="headerlink" title="几个输出语句"></a>几个输出语句</h2><ol>
<li><p>alert(‘哈哈’)</p>
<ul>
<li>弹出消息框</li>
</ul>
</li>
<li><p>prompt()</p>
<ul>
<li>弹出一个带输入框的提示框</li>
<li>该函数需要一个字符串作为参数, 该字符串为提示框的提示文字</li>
<li>用户输入的内容会作为该函数的返回值, 返回值为 <code>string 类型</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = prompt(<span class="string">&#x27;请输入小米的成绩:&#x27;</span>)</span><br><span class="line">alert(score)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入三个数, 按从小到大输出</span></span><br><span class="line"><span class="keyword">var</span> num1  = +prompt(<span class="string">&#x27;请输入第一个数:&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> num2  = +prompt(<span class="string">&#x27;请输入第二个数:&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> num3  = +prompt(<span class="string">&#x27;请输入第三个数:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (num1 &lt; num2 &amp;&amp; num1 &lt; num3) &#123;</span><br><span class="line">    <span class="comment">// num1 最小</span></span><br><span class="line">    <span class="keyword">if</span> (num2 &lt; num3) &#123;</span><br><span class="line">        alert(num1 + <span class="string">&#x27;,&#x27;</span> + num2 + <span class="string">&#x27;,&#x27;</span> + num3)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(num1 + <span class="string">&#x27;,&#x27;</span> + num3 + <span class="string">&#x27;,&#x27;</span> + num2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num2 &lt; num1 &amp;&amp; num2 &lt; num3) &#123;</span><br><span class="line">    <span class="comment">// num2 最小</span></span><br><span class="line">    <span class="keyword">if</span> (num1 &lt; num3) &#123;</span><br><span class="line">        alert(num2 + <span class="string">&#x27;,&#x27;</span> + num1 + <span class="string">&#x27;,&#x27;</span> + num3)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(num2 + <span class="string">&#x27;,&#x27;</span> + num3 + <span class="string">&#x27;,&#x27;</span> + num1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// num3 最小</span></span><br><span class="line">    <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">        alert(num3 + <span class="string">&#x27;,&#x27;</span> + num1 + <span class="string">&#x27;,&#x27;</span> + num2)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(num3 + <span class="string">&#x27;,&#x27;</span> + num2 + <span class="string">&#x27;,&#x27;</span> + num1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>document.write(‘hello’)</p>
<ul>
<li>向 body 中写入内容</li>
</ul>
</li>
<li><p>console.log(‘hello’)</p>
<ul>
<li>向控制台输出内容</li>
</ul>
</li>
<li><p>console.time(‘test’)</p>
<ul>
<li>开启一个定时器</li>
</ul>
</li>
<li><p>console.timeEnd(‘test’)</p>
<ul>
<li>终止定时器</li>
<li>在一段代码开始地方写上 console.time(‘test’), 结束地方写上 console.timeEnd(‘test’)</li>
<li>可以测试这一段代码执行所花费的时间 <code>test: 4.03ms</code></li>
</ul>
</li>
</ol>
<h2 id="JS-代码写在哪里"><a href="#JS-代码写在哪里" class="headerlink" title="JS 代码写在哪里?"></a>JS 代码写在哪里?</h2><ol>
<li><p>可以写在标签的 onclick 属性中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;alert(&#x27;点我干嘛&#x27;)&quot;</span>&gt;点点&lt;/button&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>可以写在超链接的 href 中, 点击超链接时执行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;点我干嘛?&#x27;)&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  // 不跳转</span><br></pre></td></tr></table></figure></li>
<li><p>可以写在 script 标签里</p>
</li>
<li><p>可以写在外部, html 里引入</p>
<ul>
<li>方便在不同的页面中引入, 也可以利用到 浏览器的缓存机制</li>
</ul>
</li>
</ol>
<h2 id="JS-代码风格问题"><a href="#JS-代码风格问题" class="headerlink" title="JS 代码风格问题"></a>JS 代码风格问题</h2><p><a href="https://standardjs.com/rules-zhcn.html">JavaScript Standard Style</a></p>
<p>​   ⚠️ <code>(、[、</code> 开头的语句前边记得要加上<code>;</code></p>
<p><a href="https://github.com/airbnb/javascript">Airbnb</a></p>
<h1 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h1><ol>
<li><p>字面量和变量</p>
<ul>
<li>字面量 —— 不可改变的值 (具体的值 1、2、null、true)</li>
</ul>
</li>
<li><p>变量</p>
<ul>
<li><p>变量可以 <font color=#c00>用来保存字面量</font>, 而且变量的值是可以改变的</p>
</li>
<li><p>更方便我们使用, 所以我们在开发中都是 <code>使用变量去保存一些字面量</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>js 注释</p>
<ul>
<li>//      —— 单行注释</li>
<li>/**/  —— 多行注释</li>
</ul>
</li>
<li><p>标识符</p>
<ul>
<li>变量名、函数名、属性名都叫标识符 (<em>自己命名的</em>)</li>
<li>标识符可以包含字母、数字、下划线、$, <font color=#c00>不能以数字开头</font></li>
<li>一般使用驼峰命名法</li>
<li>标识符不能是关键字或保留字</li>
<li><font color=#c00>js 中严格区分大小写</font></li>
</ul>
</li>
</ol>
<p><img src="/images/%E5%85%B3%E9%94%AE%E5%AD%97%E4%BF%9D%E7%95%99%E5%AD%97.png"></p>
<h1 id="JS-的数据类型"><a href="#JS-的数据类型" class="headerlink" title="JS 的数据类型"></a>JS 的数据类型</h1><p>就是指字面量的类型，js 中一共 <code>6 种</code> 数据类型</p>
<h2 id="基本数据类型-5-种"><a href="#基本数据类型-5-种" class="headerlink" title="基本数据类型 (5 种)"></a>基本数据类型 (5 种)</h2><ol>
<li><p>String</p>
<ul>
<li><p>使用字符串需要引号, 推荐使用单引号</p>
</li>
<li><p>可以外边用单引号, 里边用双引号; (也可以外边双, 里边单)</p>
</li>
<li><p>可以使用 \ 作为转义字符</p>
<ul>
<li><p><code>\n</code> 表示换行</p>
</li>
<li><p><code>\\</code>表示斜杠</p>
</li>
<li><p><code>\双引号</code> 表示双引号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;我说:\&quot;我没吃饭\&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;\\&quot;</span>  \</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>Number</p>
<ul>
<li>JS 中的数值都是 Number 类型 (包括整数和小数)</li>
<li>数值的最大值 —— Number.MAX_VALUE      数值的最小值 —— Number.MIN_VALUE</li>
<li>Infinity —— 正无穷      </li>
<li>-Infinity —— 负无穷<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">Infinity</span> <span class="comment">// 字面量, 直接使用</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">Infinity</span>  <span class="comment">// &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>a. <strong>NaN</strong> —— 也是一个特殊的数字, 表示的是 not a number<br>b. 浮点数进行计算, 可能得到一个不正确的结果<br>c. 二进制数 以 0b 开头 (0b10) ;   八进制数 以 0 开头 (012) ;   十六进制数 以 0x 开头 (0x123)</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Boolean</p>
<ul>
<li>只有两个 true / false</li>
<li>主要用来做 <strong>逻辑判断</strong></li>
</ul>
</li>
<li><p>Null</p>
<ul>
<li>Null 类型的值只有一个 null</li>
<li>null 专门用来表示为空的 <strong>对象</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Undefined</p>
<ul>
<li>Undefined 类型的值只有一个 undefined</li>
<li>声明一个变量, 但不给它赋值, 它的值就是 undefined<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">// &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p>⚠️  这 5 种属于基本数据类型(<strong>单一的值, 值和值之间没有任何联系</strong>); Object 属于引用数据类型</p>
<h3 id="基本数据类型之间的转换"><a href="#基本数据类型之间的转换" class="headerlink" title="基本数据类型之间的转换"></a>基本数据类型之间的转换</h3><h4 id="其他类型转换为-String-类型"><a href="#其他类型转换为-String-类型" class="headerlink" title="其他类型转换为 String 类型"></a>其他类型转换为 String 类型</h4><ol>
<li><p>调用<font color=#c00>.toString()方法</font></p>
<ul>
<li>该方法不会影响原变量, 它会返回 <strong>转换的结果</strong></li>
<li><strong>null 和 undefined 没有 .toString() 方法</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(a.toString()) <span class="comment">// &#x27;123&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>String() 函数</p>
<ul>
<li>该方法不会影响原变量, 它会返回 <strong>转换的结果</strong></li>
<li>可以转换 null 和 undefined<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(a)) <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(<span class="literal">null</span>)) <span class="comment">// &#x27;null&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color=#c00><strong>我们可以为任何数据类型 + ‘’, 就可以将其转为 String 类型</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">123</span></span><br><span class="line">c = c + <span class="string">&#x27;&#x27;</span>  <span class="comment">// &#x27;123&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="其他类型转换为-Number-类型"><a href="#其他类型转换为-Number-类型" class="headerlink" title="其他类型转换为 Number 类型"></a>其他类型转换为 Number 类型</h4><ol>
<li><p>Number() 函数</p>
<ul>
<li>如果是纯数字的字符串, 则直接转为数字</li>
<li>如果字符串中有非数字的内容, 则转换为 NaN</li>
<li>如果字符串为空, 则转换为 0</li>
<li>布尔类型 true 转换为 1;  false 转换为 0</li>
<li>null 转换为 0</li>
<li><strong>undefined 转换为 NaN</strong>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;543&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(a)) <span class="comment">// 543</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>)) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color=#c00>parseInt()</font></p>
<ul>
<li>将任意类型数据转为 <code>整数</code></li>
<li><strong>会先将要转换的数据转为字符串</strong>, 再转为整数</li>
<li>parseInt(a, 10)  可以使用第二个参数来表示要转换的进制<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;123abc456&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(a)) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">10.2</span>)   <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;abc&#x27;</span>)) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">true</span>)) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">null</span>)) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="literal">undefined</span>)) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;070&#x27;</span>, <span class="number">10</span>)) <span class="comment">// 70</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>parseFloat()</p>
<ul>
<li>将任意类型数据转为 <code>浮点数</code></li>
<li><strong>也会先将要转换的数据转为字符串</strong>, 再返回 <code>字符串</code> 中的有效部分 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;123.45abc456&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(a)) <span class="comment">// 123.45</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><font color=#c00><strong>可以对其他数据类型 加 +(正号); 或者 * 1; 或者 /1; 或者 -0 将其转为数字类型</strong></font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;12&#x27;</span></span><br><span class="line">a = +a <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span></span><br><span class="line">b = b * <span class="number">1</span> <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span></span><br><span class="line">c = c - <span class="number">0</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="将其他数据类型转换为-Boolean-类型"><a href="#将其他数据类型转换为-Boolean-类型" class="headerlink" title="将其他数据类型转换为 Boolean 类型"></a>将其他数据类型转换为 Boolean 类型</h4><ol>
<li><p>Boolean() 函数</p>
<ul>
<li><strong>0、NaN、空串、null、undefined 转 boolean 都是 false</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(a)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>对任意类型的数据进行 <code>两次逻辑非运算</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = !!<span class="number">2</span>       <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> b = !!<span class="string">&#x27;hello&#x27;</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p><font color=#c00><strong>Object</strong></font> —— 对象属于一种复合的数据类型, 在对象中可以保存多个不同数据类型的属性</p>
<h2 id="基本数据类型-和-引用数据类型-的区别"><a href="#基本数据类型-和-引用数据类型-的区别" class="headerlink" title="基本数据类型 和 引用数据类型 的区别"></a>基本数据类型 和 引用数据类型 的区别</h2><ol>
<li>基本数据类型的<font color=#c00>值直接存储在栈内存里</font>, 值与值之间是独立存在的, 修改一个变量不会影响其他变量</li>
<li>引用数据类型的<font color=#c00>值保存在堆内存里</font>, 而<font color=#c00>变量在栈内存保存的是对象的地址</font></li>
<li>赋值的区别<ul>
<li>基本数据类型赋值  ==&gt;  值传递</li>
<li>引用数据类型赋值  ==&gt;  引用(地址)传递</li>
<li>基本数据类型比较  ==&gt;  比较值</li>
<li>引用数据类型比较  ==&gt;  比较引用(地址)</li>
</ul>
</li>
</ol>
<h1 id="常用运算符-8-种"><a href="#常用运算符-8-种" class="headerlink" title="常用运算符 (8 种)"></a>常用运算符 (8 种)</h1><p>也叫操作符, 可以对一个或多个值进行运算, 并获取运算结果</p>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>typeof 就是一个运算符, 可以用来获得一个值的类型</p>
<ul>
<li>它将该值的类型 <font color=#c00><strong>以字符串的形式返回</strong></font><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>) <span class="comment">// &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p><code>+、-、*、/、%</code></p>
<ul>
<li>不会改变原变量的值</li>
<li>对非 Number 类型的值进行计算, <strong>会将这些值转换为 Number</strong> (字符串 + 除外), 然后再运算<ul>
<li>所以, <font color=#c00><strong>可以对其他数据类型 * 1; 或者 /1; 或者 -0 将其转为数字类型</strong></font></li>
<li><font color=#c00>只有字符串 + 的时候特殊; <font color=#c00><strong>任何值和字符串进行 + 操作, 会进行字符串拼接</strong></font></font><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="literal">true</span> + <span class="literal">false</span></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="number">100</span> - <span class="literal">true</span> <span class="comment">// 99</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="number">100</span> - <span class="string">&#x27;1&#x27;</span>  <span class="comment">// 99, 先将字符串 &#x27;1&#x27; 转为数字 1, 再运算(和 + 不同)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="number">2</span> * <span class="string">&#x27;8&#x27;</span> <span class="comment">// 16</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> res = <span class="number">2</span> * <span class="literal">null</span> <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="string">&#x27;2&#x27;</span> * <span class="number">1</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p><code>++、--、+(正)、-(负)</code></p>
<ul>
<li><p>只需一个操作数</p>
</li>
<li><p>++、– **会立即 **使 <code>原变量</code> 的值自增/减 1</p>
<ul>
<li><strong>a++ 的值等于原值</strong></li>
<li><strong>++a 的值等于自增后的值</strong></li>
<li>⚠️ a 是变量; 而 a++ 是一个表达式, 也可以作为一条语句<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(a++) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(++a) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">20</span></span><br><span class="line">d = d++</span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>+</code>  取正数</p>
<ul>
<li>不会对数字产生影响</li>
<li><font color=#c00>可以把非数字类型转换为数字类型</font><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = +<span class="string">&#x27;12&#x27;</span> <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="number">1</span> + +<span class="string">&#x27;2&#x27;</span> + <span class="number">3</span> <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>-</code>  取反</p>
<ul>
<li>对非数字会先进行转换为数字类型, 再取反<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = -<span class="literal">true</span> <span class="comment">// -1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = -<span class="string">&#x27;18&#x27;</span> <span class="comment">// -18</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><code>&amp;&amp;、||、!</code></p>
<ul>
<li>用来做逻辑判断</li>
<li>非 Boolean 类型数据会先转为 Boolean 类型</li>
</ul>
<ol>
<li><p>!  </p>
<ul>
<li><font color=#c00>返回布尔值</font></li>
<li>将操作数转为布尔值再取反</li>
<li>可以对一个非布尔类型数据进行 <code>两次 ! 操作将其转为布尔值</code></li>
</ul>
</li>
<li><p>&amp;&amp; 、|| </p>
<ul>
<li>将第一个操作数转换为布尔值, 然后再运算</li>
</ul>
</li>
<li><p>&amp;&amp;、|| 还可以用作 <strong>短路运算</strong></p>
<ul>
<li>fn &amp;&amp; fn()</li>
<li>a || a = 20<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非运算</span></span><br><span class="line"><span class="keyword">var</span> a = !<span class="number">2</span>  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> b = !<span class="number">0</span>  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> c = !!<span class="number">2</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 与运算 </span></span><br><span class="line"><span class="comment">// 如果第一个为 true, 则返回后边的值</span></span><br><span class="line"><span class="keyword">var</span> ret = <span class="number">1</span> &amp;&amp; <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(ret) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 与运算 </span></span><br><span class="line"><span class="comment">// 如果第一个为 false, 则直接返回第一个值</span></span><br><span class="line"><span class="keyword">var</span> ret = <span class="number">0</span> &amp;&amp; <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(ret) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或运算 </span></span><br><span class="line"><span class="comment">// 如果第一个为 true, 则直接返回第一个值</span></span><br><span class="line"><span class="keyword">var</span> ret = <span class="number">1</span> || <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(ret) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或运算 </span></span><br><span class="line"><span class="comment">// 如果第一个为 false, 则返回后边的值</span></span><br><span class="line"><span class="keyword">var</span> ret = <span class="number">0</span> || <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(ret) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><code>=、+=、-=、*=、/=、%=</code></p>
<ul>
<li>将右侧的值赋值给左侧的变量<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">a += <span class="number">1</span>  <span class="comment">// 等价于 a = a + 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p><code>&gt; 、 &lt; 、 &gt;= 、 &lt;= 、 == 、 != 、=== 、 !==</code></p>
<ul>
<li><font color=#c00>返回布尔值</font></li>
<li>比较两个值之间的大小关系</li>
<li><strong>对于非数字进行比较时, 会先将其转为数字, 再进行比较</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="number">5</span> &gt; <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt; <span class="literal">true</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li><p><strong>任何值和 NaN 比较, 结果都是 false</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &gt; <span class="string">&#x27;hello&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
<li><p><font color=#c00>如果两侧都是字符串</font>, 会 <code>比较其字符编码(Unicode 编码)</code>, 一位一位进行比较, 如果两位一样, 再比较下一位  (可以进行英文名排序)</p>
<ul>
<li><strong>⚠️ 在比较两个字符串型的数字时, 一定要转型</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span> &gt; <span class="string">&#x27;5&#x27;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span> &gt; +<span class="string">&#x27;5&#x27;</span>) <span class="comment">// true, 加 + 转型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;abc&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用 == 时, 如果两个值类型不同, 会自动做类型转换, 再进行比较</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> == <span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span> == <span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NaN 不和任何值相等, 包括它本身</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断 b 的值是否是 NaN</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(b == <span class="literal">NaN</span>) <span class="comment">// false, 无法判断 b 是否为 NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(b)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>=== 和 !== </p>
<ul>
<li><strong>===不会做类型转换, 类型不同直接返回 false</strong></li>
<li><strong>!==不会做类型转换, 类型不同直接返回 true</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span> === <span class="number">1</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> === <span class="literal">null</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="条件运算符-三元运算符"><a href="#条件运算符-三元运算符" class="headerlink" title="条件运算符  (三元运算符)"></a><font color=#c00>条件运算符  (三元运算符)</font></h2><p>条件表达式 ? 表达式 1  : 表达式 2</p>
<ul>
<li>如果条件表达式的值为非布尔值, 则先将其转为布尔值<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> max = a &gt; b ? a : b</span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> ? alert(<span class="string">&#x27;11&#x27;</span>) : alert(<span class="string">&#x27;22&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 3 个数中的最大值</span></span><br><span class="line"><span class="keyword">var</span> max = a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span> ? alert(<span class="string">&#x27;hehe&#x27;</span>) : alert(<span class="string">&#x27;haha&#x27;</span>) <span class="comment">// &#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>同时声明所个变量时使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><blockquote>
<p> .  &gt;  new  &gt;  ()  &gt;   ++   &gt;   算数   &gt;   关系   &gt;   逻辑( <em>! &gt; &amp;&amp; &gt; ||</em>)   &gt;   赋值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">1</span> || <span class="number">2</span> &amp;&amp; <span class="number">3</span> </span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><p>我们的程序是由一条一条的语句构成的</p>
<ul>
<li>语句是按照 <code>自上向下</code> 的顺序执行的</li>
</ul>
<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><p>根据一定的条件控制程序的执行流程</p>
<h3 id="if-语句-条件判断语句"><a href="#if-语句-条件判断语句" class="headerlink" title="if 语句 (条件判断语句)"></a>if 语句 (条件判断语句)</h3><ol>
<li>if (条件表达式) { 语句 }<ul>
<li>会先对条件表达式进行求值判断</li>
</ul>
</li>
<li>if (条件表达式) { 语句 } else { 语句 }</li>
<li>if (条件表达式) { 语句 } else if { 语句 } else { 语句 }</li>
<li>⚠️ if 条件表达式如果是赋值表达式的情况<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a = <span class="number">10</span>) &#123; <span class="comment">// 赋值表达式是恒成立的, 相当于 if (true)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hehe&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="switch-语句-条件分支语句"><a href="#switch-语句-条件分支语句" class="headerlink" title="switch 语句 (条件分支语句)"></a>switch 语句 (条件分支语句)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (条件表达式) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> 表达式:</span><br><span class="line"></span><br><span class="line">        语句......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> 表达式:</span><br><span class="line"></span><br><span class="line">        语句......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">        语句......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>执行时, 依次将 case 后的表达式的值与 switch 条件表达式的值进行 <code>全等(===)比较</code><ul>
<li>如果比较结果为 true, 则执行 case 后的语句<ul>
<li>如果没有 break, 则往后的语句都会执行</li>
<li>所以, <strong>一般都会在语句后加 break</strong></li>
</ul>
</li>
<li>如果比较结果为 fasle, 则继续向下比较</li>
<li>如果所有的比较结果都为 false, 则执行 default 后的语句</li>
</ul>
</li>
<li>switch 语句和 if 语句的功能是重复的, 使用 switch 也可以实现 if 的功能<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 60 分以上及格</span></span><br><span class="line"><span class="keyword">var</span> score = <span class="number">67</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="built_in">parseInt</span>(score / <span class="number">10</span>)) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;及格&#x27;</span>)  </span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;不及格&#x27;</span>)  </span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;及格&#x27;</span>)  </span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;不及格&#x27;</span>)  </span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>反复地执行一段代码多次</p>
<h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>while (循环条件) { 循环体 }</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> money = <span class="number">1000</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(money &lt; <span class="number">5000</span>) &#123;</span><br><span class="line">  money *= <span class="number">1.05</span></span><br><span class="line">  count++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(count)</span><br></pre></td></tr></table></figure>

<ol>
<li><p><font color=#c00>break 关键字可以立即终止离它最近的循环</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(n &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n++)</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// 退出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 1 2 </span></span><br></pre></td></tr></table></figure></li>
<li><p><font color=#c00>continue 关键字跳过本次循环</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出: 0 1 3 4</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h3><p>do {</p>
<p>​   循环体</p>
<p>} while (条件表达式)</p>
<ul>
<li><strong>循环体至少执行一次</strong></li>
</ul>
<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>for (初始化表达式 1 ; 表达式 2 ; 更新表达式 3) { 循环体 }</p>
<ul>
<li><p>初始化表达式只会执行一次</p>
</li>
<li><p>可以把初始表达式放在外边</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>可以为循环语句加一个标识, 来标识当前循环</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">break</span> outer <span class="comment">// 终止外层循环, 内层也不会再执行</span></span><br><span class="line">        <span class="built_in">console</span>.log(j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出 1-100 之间的质数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span> <span class="comment">// 判断 是不是质数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">2</span>; j &lt;= <span class="built_in">Math</span>.sqrt(i); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i / j == <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span> <span class="comment">// 不是质数</span></span><br><span class="line">            <span class="keyword">break</span> <span class="comment">// 终止内层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象(Object)"></a>对象(Object)</h1><ol>
<li>以后看到的数据如果不是基本类型的都是 Object 类型</li>
<li>基本数据类型都是单一的值<ul>
<li>值和值之间没有任何联系, 不能成为一个整体</li>
</ul>
</li>
<li>对象 —— 一种复合的数据类型, 在对象中可以保存多个不同类型的数据</li>
</ol>
<h2 id="对象的分类-3-种"><a href="#对象的分类-3-种" class="headerlink" title="对象的分类 (3 种)"></a>对象的分类 (3 种)</h2><ol>
<li><p>内置对象</p>
<ul>
<li>由 ES 标准中定义的对象, 在任何的 ES 的实现中都可以使用</li>
<li><code>Math、String、Number、Boolean、Function、Object、etc</code></li>
</ul>
</li>
<li><p>宿主对象</p>
<ul>
<li>由 <code>JS 运行环境</code>提供的对象, 目前来讲主要指 <code>由浏览器提供</code> 的对象</li>
<li>BOM、DOM<ul>
<li>document、console</li>
</ul>
</li>
</ul>
</li>
<li><p>自定义对象</p>
<ul>
<li>由开发人员自己创建的对象</li>
</ul>
</li>
</ol>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><ol>
<li><p>构造函数创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数是专门用来创建对象的函数</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加属性</span></span><br><span class="line">obj.name = <span class="string">&#x27;章三&#x27;</span></span><br><span class="line">obj.age = <span class="number">18</span></span><br><span class="line">obj.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除对象的属性 - delete</span></span><br><span class="line"><span class="keyword">delete</span> obj.age</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断对象中是否有某属性 - in 运算符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;gender&#x27;</span> <span class="keyword">in</span> obj) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
<li><p>字面量创建对象</p>
<ul>
<li>属性名可以加引号, 也可以不加</li>
<li>如果使用一些特殊的名字(有空格/下划线等), 必须加引号<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加属性</span></span><br><span class="line">obj.name = <span class="string">&#x27;里斯&#x27;</span></span><br><span class="line">obj.age = <span class="number">18</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li><p>如果 <strong>使用特殊的属性名或者变量</strong>, 不能使用 . 的方式</p>
<ul>
<li>需要使用另一种方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 特殊的属性名</span></span><br><span class="line">obj[<span class="string">&#x27;123&#x27;</span>] = <span class="number">789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量值作为属性名</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[n]) <span class="comment">// 789</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>js 对象的属性值, 可以是任意数据类型</p>
<ul>
<li>函数作为对象的属性值, 就称这个函数是这个对象的方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">obj.sayHello()  <span class="comment">// 调用 obj 的 sayHello 方法</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h2><p>for in 遍历对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key + <span class="string">&#x27;---&#x27;</span> + obj[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JavaScript Object Notation ——  JS 对象表示法</p>
<ul>
<li><font color=#c00><strong>JSON 就是特殊格式的字符串</strong></font>, <ul>
<li>这个字符串可以被任意语言所识别, 并且可以转换为任意语言中的对象</li>
<li>JSON 在开发中主要用来做 <code>数据的交互</code></li>
</ul>
</li>
<li>JSON 和 JS 对象的格式一样, 只不过<font color=#c00> <strong>JSON 字符串中的属性名必须加双引号</strong></font></li>
</ul>
<h3 id="JSON-分类"><a href="#JSON-分类" class="headerlink" title="JSON 分类"></a>JSON 分类</h3><ol>
<li><p>对象形 —— ‘{}’ </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;章三&quot;, &quot;age&quot;: 18&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>数组形 —— ‘[]’</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="string">&#x27;[1, 2, 3, &quot;hello&quot;]&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="JSON-中允许的值"><a href="#JSON-中允许的值" class="headerlink" title="JSON 中允许的值"></a>JSON 中允许的值</h3><ol>
<li>字符串</li>
<li>数值</li>
<li>布尔值</li>
<li>null</li>
<li><em>对象(普通), 不包含函数对象</em></li>
<li>数组</li>
</ol>
<p>⚠️ 不能有 <code>undefined</code> 和 <code>函数</code></p>
<h3 id="JSON-字符串-转-JS-对象"><a href="#JSON-字符串-转-JS-对象" class="headerlink" title="JSON 字符串 转 JS 对象"></a>JSON 字符串 转 JS 对象</h3><p>在 JS 中, 为我们提供来一个工具类 JSON</p>
<ul>
<li>这个对象可以帮助我们将一个 JSON 字符串转为 JS 对象, 也可以将一个  JS 对象转为 JSON 字符串</li>
</ul>
<ol>
<li><p><font color=#c00><strong>JSON.parse()</strong></font></p>
<ul>
<li>将 JSON 字符串转为 JS 对象</li>
<li><code>需要一个 JSON 字符串作为参数</code>, 返回一个 JS 对象</li>
</ul>
</li>
<li><p><font color=#c00><strong>JSON.stringify()</strong></font></p>
<ul>
<li>将 JS 对象转换为 JSON字符串</li>
<li><code>需要一个 JS 对象作为参数</code></li>
</ul>
</li>
<li><p>eval() (不常用)</p>
<ul>
<li>这个函数 <code>可以直接执行将一段字符串形式的 JS 代码, 并将结果返回</code></li>
<li>如果字符串中含有大括号, 它会将大括号当成是代码块; 如果不希望将其当成代码块解析, 则需要给字符串加括号<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;alert(&quot;hello&quot;)&#x27;</span></span><br><span class="line"><span class="built_in">eval</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;章三&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">&#x27;(&#x27;</span> + obj + <span class="string">&#x27;)&#x27;</span>)) <span class="comment">// &#123; name: &#x27;章三&#x27; &#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数也是一个对象, 里边保存的是可执行代码</p>
<ul>
<li>函数中可以 <strong>封装一些功能(代码段), 在需要时可以调用这些代码</strong></li>
<li>使用 typeof 检查一个函数对象时, 结果是 <code>function</code></li>
<li>封装到函数中的代码 <font color=#c00>不会立即执行, 只有在调用时执行</font></li>
</ul>
<h2 id="函数的创建"><a href="#函数的创建" class="headerlink" title="函数的创建"></a>函数的创建</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.构造函数创建</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;console.log(&quot;hello world&quot;)&#x27;</span>)</span><br><span class="line">fun() <span class="comment">// 调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.函数声明方式创建</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2.</span>..]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun) <span class="comment">// &#x27;function fun() &#123;...&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.使用函数表达式的方式来创建</span></span><br><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span> (<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2.</span>..]</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>形参 —— 在函数<font color=#c00>声明时</font>, 形参就相当于在函数内部声明了对应的变量, 但是并没有赋值</p>
<p>实参 —— 在函数<font color=#c00>调用时</font>, () 中指定的参数;  实参将会赋值给对应的形参</p>
<ul>
<li>调用函数时, 如果实参的数量少于形参, 则没有对应实参的形参将会是 <code>undefined</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y)</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>) <span class="comment">// NaN, y 默认是 undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>使用 return 关键字来设置函数的返回值</p>
<ul>
<li><p>return 后的值将会作为函数的执行结果返回</p>
</li>
<li><p>return 之后的语句都不会执行</p>
</li>
<li><p>如果 return 后不跟任何值或者没有 return , 函数将返回 <strong>undefined</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret = sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log (ret) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li>
<li><p>返回值可以是 <strong>任意数据类型</strong>, 也可以是一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hehe&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f3()() <span class="comment">// &#x27;hehe&#x27;</span></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> a = f3()</span><br><span class="line">a()</span><br></pre></td></tr></table></figure></li>
<li><p>return 可以结束整个函数</p>
</li>
</ul>
<h2 id="立即执行函数-IFEE"><a href="#立即执行函数-IFEE" class="headerlink" title="立即执行函数 (IFEE)"></a>立即执行函数 (IFEE)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只会执行一次</span></span><br><span class="line"><span class="comment">// 相当于 函数对象()</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;匿名函数&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>指一个变量的作用范围</p>
<h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><ol>
<li><p><font color=#c00>直接写在 script 标签中的代码, 都在全局作用域</font></p>
</li>
<li><p>全局作用域在页面打开时创建, 在页面关闭时销毁</p>
</li>
<li><p>全局作用域中有一个<strong>全局对象 window</strong>, 可以直接使用, 它代表的是浏览器窗口</p>
</li>
<li><p><strong>在全局作用域中创建的变量都会作为 window 对象的属性保存</strong></p>
</li>
<li><p>在全局作用域中创建的函数都会作为 window 的方法保存</p>
</li>
<li><p>全局作用域中的变量都是全局变量</p>
<ul>
<li>在页面的任意部分都可以访问到</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">window</span>.fun(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">// &#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数-局部-作用域"><a href="#函数-局部-作用域" class="headerlink" title="函数(局部)作用域"></a>函数(局部)作用域</h2><p>在 <code>函数内部</code> 创建的变量</p>
<ol>
<li>调用函数时创建函数作用域, 函数执行完毕, 函数作用域销毁</li>
<li><strong>在函数作用域中可以访问全局变量, 在全局作用域中, 无法访问到函数作用域的变量</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fun() <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>在函数作用域中操作一个变量时, 会先在自身作用域中查找</p>
<ul>
<li>如果自身作用域中有, 则直接使用</li>
<li>如果自身作用域中没有, 则在上一级作用域中查找<ul>
<li>直到全局作用域, 如果全局作用域还是没有</li>
<li>则报错: <code>变量 is not defined</code></li>
</ul>
</li>
</ul>
</li>
<li><p>在函数中要使用全局的变量可以使用 <code>window.</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// 20</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a) <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在函数作用域中也有 <code>声明提前</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h1><h2 id="变量的声明提前"><a href="#变量的声明提前" class="headerlink" title="变量的声明提前"></a>变量的声明提前</h2><ol>
<li>使用 var 声明的变量, 会 <code>在所有的代码执行之前被声明, 不会被赋值</code></li>
<li>如果声明变量时不使用 var , 则变量不会被声明提前, 会成为 window 的属性<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line">a = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// error: a is not defined</span></span><br><span class="line">a = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(d) </span><br><span class="line">  d = <span class="number">100</span> <span class="comment">// 不会提前, 相当于 window.d = 100</span></span><br><span class="line">&#125;</span><br><span class="line">fun() <span class="comment">// d is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h2><ol>
<li><code>使用函数声明方式创建的函数</code>, 它会在所有的代码执行之前就被创建, 可以在声明前调用</li>
<li>使用函数表达式创建的函数, 不会被声明提前, 不能在声明前调用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fun() <span class="comment">// 我是 fun 函数</span></span><br><span class="line">fun2() <span class="comment">// error: undefined is not a function</span></span><br><span class="line"><span class="built_in">console</span>.log(fun2) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 会被提前创建</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fun 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会被提前创建</span></span><br><span class="line"><span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fun2 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="this-对象"><a href="#this-对象" class="headerlink" title="this 对象"></a>this 对象</h1><p>解析器在调用函数时, 每次都会向函数内部传递两个隐含的参数 —— this &amp; arguments</p>
<ul>
<li>this 指向的是一个对象 (函数执行的上下文对象)</li>
<li><font color=#c00><strong>根据函数调用方式</strong> 的不同, this 会指向不同的对象</font><ul>
<li><strong>以函数的形式调用时, this 永远都是 window</strong></li>
<li><strong>以方法的形式调用时, this 就是调用方法的对象</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;章三&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: fun</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以函数的形式调用</span></span><br><span class="line">fun()  <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以方法的形式调用时</span></span><br><span class="line">obj.sayHello() <span class="comment">// obj</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="总结-this"><a href="#总结-this" class="headerlink" title="总结 this"></a><font color=#c00><strong>总结 this</strong></font></h2><ol>
<li><p>以函数形式调用时, this 是 window</p>
</li>
<li><p>以对象方法的形式调用时, this 是调用方法的对象</p>
</li>
<li><p>以 new 构造函数形式调用时, this 是新创建的那个对象</p>
<ul>
<li>⚠️ <code>Foo()  和 new Foo() 的区别 —— 前者 this - window, 而后者 this - 实例对象</code></li>
</ul>
</li>
<li><p>使用 call() 和 apply() 时, this 是指定的那个对象</p>
</li>
<li><p>在事件响应函数中, 事件给谁绑定, this 就是谁</p>
</li>
</ol>
<h1 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h1><p>在 <code>调用函数时</code>, 浏览器每次都会向函数传递两个隐藏参数 —— this &amp; arguments</p>
<ul>
<li><p>arguments 是一个 <strong>类数组对象</strong>(不是数组), 用来 <strong>保存实参</strong></p>
<ul>
<li>可以通过索引操作数据, 也可以获取长度</li>
<li>arguments.length —— 实参的个数</li>
<li>arguments[0] —— 第一个实参</li>
<li>arguments[1] —— 第二个实参……<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 3  1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>arguments.callee 属性</p>
<ul>
<li>对应一个函数对象, 就是 <font color=#c40><strong>当前正在执行的函数对象</strong></font></li>
<li>callee关键字的定义<ul>
<li>在函数内部使用，代表当前函数的引用(名字)</li>
<li>callee关键字的作用 —— 降低代码的耦合度(<em>一处代码修改尽量少地引起其他代码的变化</em>)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jiecheng</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//return n * jiecheng(n-1);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//callee 可以保证外部名称的变化，不会引起内部代码的修改，代码耦合度降低</span></span><br><span class="line">  <span class="keyword">return</span> n * <span class="built_in">arguments</span>.callee(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jc = jiecheng </span><br><span class="line">jiecheng = <span class="literal">null</span></span><br><span class="line">jc(<span class="number">4</span>) <span class="comment">// 24</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="工厂模式创建对象"><a href="#工厂模式创建对象" class="headerlink" title="工厂模式创建对象"></a>工厂模式创建对象</h1><p>可以大批量生成对象</p>
<ul>
<li>这种方式生成的对象的类型都是 ‘object’, 无法区分出不同类型的对象(因为它们都是通过 new Object() 创建的)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个新的对象</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  <span class="comment">// 添加属性</span></span><br><span class="line">  obj.name = name</span><br><span class="line">  obj.age = age</span><br><span class="line">  obj.gender = gender</span><br><span class="line">  obj.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回新的对象</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = createPerson(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> obj2 = createPerson(<span class="string">&#x27;ls&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> obj3 = createPerson(<span class="string">&#x27;ww&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>专门用来创建对象的, <strong>构造函数名首字母要大写</strong></p>
<ul>
<li><p>构造函数和普通函数的区别就是 <code>调用方式的不同</code></p>
<ul>
<li>普通函数是直接调用</li>
<li><font color=#c00>构造函数需要使用 new 关键字来调用</font></li>
</ul>
</li>
<li><p>构造函数的执行流程</p>
<blockquote>
<ol>
<li>立刻创建一个新的对象 (在内存中开辟一块空间)</li>
<li>将函数中的 this 指向新建的对象</li>
<li>逐行执行构造函数中的代码</li>
<li>将新建的对象作为返回值返回</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">    <span class="built_in">this</span>.gender = gender</span><br><span class="line">    <span class="built_in">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">&#x27;章三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">&#x27;里斯&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 per1 是不是 Person 的实例</span></span><br><span class="line"><span class="built_in">console</span>.log(per1 <span class="keyword">instanceof</span> Person) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用同一个构造函数创建的对象, 我们称为同一类对象</p>
<ul>
<li>通过该构造函数创建的对象, 叫做这个构造函数的一个实例</li>
</ul>
</li>
<li><p>构造函数创建的对象类型为 对应的构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(per1) <span class="comment">// Person &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per1 <span class="keyword">instanceof</span> Person) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型 prototype"></a>原型 prototype</h2><p>我们所创建的每一个函数, 解析器都会向函数中添加一个属性 prototype</p>
<ul>
<li><p>这个属性对应着一个对象, 就是<font color=#c00><strong>原型对象</strong></font></p>
</li>
<li><p>如果函数作为普通函数调用, prototype 没有任何作用;</p>
<p>当函数以构造函数的形式调用时, 它所创建的对象中都会有一个隐含的属性, 指向该构造函数的原型对象;</p>
<p>我们可以通过 <code>__proto__</code> 来访问该属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass()</span><br><span class="line"><span class="built_in">console</span>.log(mc.__proto__ == MyClass.prototype)</span><br></pre></td></tr></table></figure></li>
<li><p>原型对象就相当于一个<font color=#c00>公共的区域</font>, 所有同一个类的实例都可以访问到这个原型对象</p>
</li>
<li><p>我们可以将对象中共有的内容, 统一设置到原型对象中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MyClass.prototype.a = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">MyClass.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当我们访问一个对象的属性或方法时, 会先在对象自身中寻找</p>
<ul>
<li>如果有则直接使用</li>
<li>如果没有, 则会去原型对象中寻找</li>
</ul>
<p><img src="/images/%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.png"></p>
</li>
<li><p>创建构造函数时, 可以将 <strong>共有的属性和方法统一添加到原型对象中</strong></p>
<ul>
<li>避免污染全局作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">MyClass.prototype.name = <span class="string">&#x27;我是原型中的name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass()</span><br><span class="line">mc.age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 in 检查对象是否含有某个属性时, 如果对象中没有, 但原型上有, 也会返回 true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> mc) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用对象的 hasOwnProperty() 检查自身是否含有某属性</span></span><br><span class="line"><span class="built_in">console</span>.log(mc.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
<li><p>⚠️ 原型对象也是对象, 它也有原型</p>
<ul>
<li>当我们使用一个对象的属性或方法时, 会先在自身中寻找<ul>
<li>自身如果有, 则直接使用</li>
<li>如果没有, 则去原型对象中寻找<ul>
<li>如果原型对象中有, 则使用之</li>
<li>如果没有, 则去原型的原型对象中寻找 <code>mc.__proto__.__proto__</code></li>
<li>直到找到 Object 构造函数的原型 <code>null</code>; 如果依然没有, 则返回 <code>undefined</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype) <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>原型链最多只有两级</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(mc.__proto__.__proto__) <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mc.__proto__.__proto__.__proto__) <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li>
<li><p>当我们直接在页面中打印一个对象时, 默认输出的是对象的 toString() 方法的返回值</p>
<ul>
<li>如果我们不希望输出 ‘[object Object]’, 可以为对象添加一个 toString() 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">    <span class="built_in">this</span>.gender = gender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;章三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per) <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆写 toString() 方法</span></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JOSN.stringify(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(per) <span class="comment">// &#123; &#x27;name&#x27;: &#x27;章三&#x27;, &#x27;age&#x27;: &#x27;18&#x27;, &#x27;gender&#x27;: &#x27;男&#x27; &#125;, </span></span><br><span class="line"><span class="comment">//相当于 console.log(per.toString())</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="call-和-apply"><a href="#call-和-apply" class="headerlink" title="call() 和 apply()"></a>call() 和 apply()</h1><p>函数对象的方法, 需要 **函数对象 **来调用</p>
<ul>
<li><p>当函数调用 call() 和 apply() 时, 函数都会立即执行</p>
</li>
<li><p>在调用 call() 和 apply() 时, 可以将一个对象指定为第一个参数;</p>
<p><code>此时这个对象将会成为函数执行时的 this</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;章三&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;里斯&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj1.sayHello()  <span class="comment">// &#x27;章三&#x27;</span></span><br><span class="line">obj1.sayHello.apply(obj2)  <span class="comment">// &#x27;里斯&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>call() 可以将实参在对象之后依次传递  <strong>fun.call(obj, 2, 3)</strong></p>
</li>
<li><p>apply() 需要将实参封装到一个数组里  <strong>fun.apply(obj, [2, 3])</strong></p>
</li>
</ul>
<h1 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h1><p><font color=#c00><strong>数组也是一个对象</strong></font>, 和普通对象功能类似, 也是用来存储一些值的</p>
<ol>
<li><p>不同的是, 普通对象是使用字符串作为属性名的</p>
<ul>
<li>而数组是 <strong>使用数字作为索引</strong> 来操作元素的</li>
</ul>
</li>
<li><p>数组的储存性能比普通对象好</p>
</li>
<li><p><font color=#c00>数组中的元素可以是任意数据类型</font></p>
</li>
<li><p>如果读取不存在的索引, 返回 <code>undefined</code></p>
</li>
<li><p>typeof(arr) 结果是 <code>object</code> </p>
</li>
</ol>
<h2 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.构造函数创建</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.字面量创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h2 id="数组-常用-属性"><a href="#数组-常用-属性" class="headerlink" title="数组(常用)属性"></a>数组(常用)属性</h2><p>.length</p>
<ul>
<li><p>对于 <strong>连续</strong> 的数组, arr.length 获取的是数组的长度 (元素的个数)</p>
</li>
<li><p>对于 <strong>不连续</strong> 的数组, arr.length 获取的是最大索引值 + 1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line">arr[<span class="number">10</span>] = <span class="number">11</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li>
<li><p>设置数组的长度</p>
<ul>
<li>数组名.length = 10</li>
<li>如果设置的长度大于原数组的长度, 多出的会空出来 (2, 3, 4, , , , )</li>
<li>如果设置的长度小于原数组的长度, 多出的会被舍弃</li>
</ul>
</li>
</ul>
<h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><p>见 10-JS基础之数组的常用方法</p>
<h1 id="几个内置对象"><a href="#几个内置对象" class="headerlink" title="几个内置对象"></a>几个内置对象</h1><h2 id="Date-对象"><a href="#Date-对象" class="headerlink" title="Date 对象"></a>Date 对象</h2><p>在 JS 中使用 Date 对象来表示一个时间</p>
<ul>
<li><p>创建一个 Date 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// 当前代码执行时的时间 &#x27;Sat Dec 03 2019 10:12:14 GMT+0800(中国标准时间)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建指定的时间对象, 传递一个时间字符串</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;12/03/2019 11:10:02&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>日期的格式</p>
<ul>
<li>月 / 日 / 年  时:分:秒</li>
</ul>
</li>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>getDate()</td>
<td>当前日期对象的日</td>
</tr>
<tr>
<td>getDay()</td>
<td>当前日期对象的星期几 (<strong>返回 0-6 的值, 0 表示周日</strong>)</td>
</tr>
<tr>
<td>getMonth()</td>
<td>当前日期对象的月 (<strong>返回 0-11 的值, 0 表示一月</strong>)</td>
</tr>
<tr>
<td>getFullYear()</td>
<td>当前日期对象的年</td>
</tr>
<tr>
<td>getHour()</td>
<td>当前日期对象的时</td>
</tr>
<tr>
<td>getTime()</td>
<td>指定日期对象的时间戳(从 1970 年 1 月 1 日 到当前日期的毫秒数)</td>
</tr>
<tr>
<td>Date.now()</td>
<td>获取 <code>当前</code> 的时间戳 (毫秒)</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = d.getDate() <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time = <span class="built_in">Date</span>.now()  <span class="comment">// 1480649189517</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h2><p><strong><code>Math 和其他对象不同, 不是构造函数</code></strong></p>
<ul>
<li><p>它是一个工具类, 不需要创建对象, <font color=#c40>直接使用</font></p>
</li>
<li><p>常用属性</p>
<ul>
<li>Math.PI</li>
</ul>
</li>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>API</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Math.abs(a)</td>
<td>绝对值</td>
</tr>
<tr>
<td>Math.ceil(x)</td>
<td>向上取整(<em>小数位有值就进 1</em>)</td>
</tr>
<tr>
<td>Math.floor(x)</td>
<td>向下取整</td>
</tr>
<tr>
<td>Math.round(x)</td>
<td>四舍五入取整</td>
</tr>
<tr>
<td><strong>Math.Random()</strong></td>
<td>返回 0 ~ 1 之间的随机数</td>
</tr>
<tr>
<td>Math.max(x, y,……)</td>
<td>最大值</td>
</tr>
<tr>
<td>Math.min(x, y,……)</td>
<td>最小值</td>
</tr>
<tr>
<td>Math.pow(x, y)</td>
<td>x 的 y 次幂</td>
</tr>
<tr>
<td>Math.sqrt(x)</td>
<td>x 的 开方</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.2</span>))  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.9</span>))  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.5</span>))  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 x ~ y 之间的随机数</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="built_in">Math</span>.Random() * (y - x)) + x</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h2><p>在底层, 字符串是以 <strong>字符数组</strong> 的形式保存的</p>
<p>常用属性和方法见 10-JS基础之字符串常用方法</p>
<h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>JS 中为我们提供了三个包装类, 通过这些包装类可以 <code>将基本数据类型转为对象</code></p>
<ol>
<li><p>String()</p>
<ul>
<li>将一个基本数据类型的字符串转为 string 对象</li>
</ul>
</li>
<li><p>Number()</p>
<ul>
<li>将一个基本数据类型的数值转为 number 对象</li>
</ul>
</li>
<li><p>Boolean()</p>
<ul>
<li>将一个基本数据类型的布尔值转为 boolean 对象</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num) <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="正则表达式-RegExp-对象"><a href="#正则表达式-RegExp-对象" class="headerlink" title="正则表达式 RegExp 对象"></a>正则表达式 RegExp 对象</h1><p><a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp">参考手册</a></p>
<p><font color=#c00>用于定义一些字符串的规则</font></p>
<ul>
<li>计算机可以根据正则表达式, 来<em>检查一个字符串是否符合规则</em></li>
</ul>
<h2 id="创建正则表达式对象"><a href="#创建正则表达式对象" class="headerlink" title="创建正则表达式对象"></a>创建正则表达式对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.构造函数创建</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;i&#x27;</span>)  <span class="comment">// 检查一个字符串是否含有 a</span></span><br><span class="line"><span class="comment">// 第一个参数 正则表达式     第二个参数 匹配模式 i(忽略大小写) / g(全局匹配)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> reg) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(reg) <span class="comment">// &#x27;/a/&#x27;</span></span><br><span class="line">reg.test(<span class="string">&#x27;ba&#x27;</span>) <span class="comment">// true  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.字面量方式创建</span></span><br><span class="line"><span class="comment">// 语法: var 变量名 = /正则表达式/匹配模式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><ul>
<li><p>|  ——  或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a|b/</span></span><br><span class="line">reg.test(<span class="string">&#x27;bc&#x27;</span>) <span class="comment">// true, 测试一个字符串是否有 a 或者 b</span></span><br></pre></td></tr></table></figure></li>
<li><p>方括号</p>
<ul>
<li><p>[ab]  ——  查找中括号内的字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a[bde]c/</span></span><br><span class="line"><span class="comment">// 判断一个字符串是否含有 abc 或 adc 或 aec</span></span><br></pre></td></tr></table></figure></li>
<li><p>[a-z]  ——  任意一个小写字母</p>
</li>
<li><p>[A-Z]  ——  任意一个大写字母</p>
</li>
<li><p>[A-z]  ——  任意一个字母</p>
</li>
<li><p>[^ab ] —— 查找中括号之外的自负</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^ab]/</span> <span class="comment">// 查找 ab 之外的字符</span></span><br><span class="line">reg.test(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">&#x27;b&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>[0-9] —— 任意一个数字</p>
</li>
</ul>
</li>
<li><p>量词 (只对它前边的一个内容起作用)</p>
<ul>
<li><p>{n}  —— 正好出现 n 次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a&#123;3&#125;/</span> <span class="comment">// aaa</span></span><br><span class="line"></span><br><span class="line">reg.test(<span class="string">&#x27;aaac&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(ab)&#123;3&#125;/</span> <span class="comment">// ababab</span></span><br></pre></td></tr></table></figure></li>
<li><p>{1, 3} —— 出现 1-3 次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a&#123;1, 3&#125;/</span> <span class="comment">// 1-3 个 a</span></span><br><span class="line"></span><br><span class="line">reg.test(<span class="string">&#x27;aac&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>{3,} —— 3次以上</p>
</li>
<li><p>a+—— 至少一个a</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab+c/</span> <span class="comment">// b 至少得有一个</span></span><br><span class="line"></span><br><span class="line">reg.test(<span class="string">&#x27;abbbcs&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>a* —— 0 或多个a</p>
</li>
<li><p>a? —— 0 或 1 个a</p>
</li>
<li><p>^a —— 以 a 开头</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a/</span></span><br><span class="line"></span><br><span class="line">reg.test(<span class="string">&#x27;abs&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>a$ —— 以 a 结尾</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a|a$/</span> <span class="comment">// 以 a 开头或以 a 结尾</span></span><br><span class="line"></span><br><span class="line">reg.test(<span class="string">&#x27;ab&#x27;</span>) </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>元字符</p>
<ul>
<li><p>. —— 表示任意字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/./</span></span><br><span class="line">reg.test(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>\w —— 表示任意字母 / 数字 / 下划线</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/</span></span><br><span class="line">reg.test(<span class="string">&#x27;_&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>\W —— 除了字母 / 数字 / 下划线</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\W/</span></span><br><span class="line">reg.test(<span class="string">&#x27;@@@@&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>\d —— 表示任意数字</p>
</li>
<li><p>\D —— 除了数字</p>
</li>
<li><p>\s —— 空格</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\s/</span></span><br><span class="line">reg.test(<span class="string">&#x27;12 3&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
<li><p>\S —— 除了空格</p>
</li>
<li><p>\b —— 单词边界</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\bchild\b/</span></span><br><span class="line">reg.test(<span class="string">&#x27;hello children&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>⚠️<strong>如果在正则表达式中同时使用 ^ 和 $ , 则要求字符串必须完全符合正则规则</strong></p>
</li>
<li><p>在正则表达式中使用 \ 作为转义字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\./</span></span><br><span class="line">reg.test(<span class="string">&#x27;a.b&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h3><ol>
<li><p>test()</p>
<ul>
<li><p><strong>检查</strong> 一个字符串是否符合正则规则</p>
</li>
<li><p>返回 true / false</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">reg.test(str)</span><br><span class="line"></span><br><span class="line">reg.test(<span class="string">&#x27;bbc&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><font color=#c40>字符串和正则相关的方法</font><ul>
<li>见 10-JS 基础之字符串常用方法</li>
</ul>
</li>
</ol>
<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手机号</span></span><br><span class="line"><span class="keyword">var</span> phoneReg = <span class="regexp">/^1[3-9][0-9]&#123;9&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 电子邮件的正则 (只是参考,不是标准)</span></span><br><span class="line"><span class="keyword">var</span> mailReg = <span class="regexp">/^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除字符串前面和后面的多个空格(保留中间的空格)</span></span><br><span class="line"><span class="comment">// var str = &#x27;   he  llo   &#x27;</span></span><br><span class="line">str = str.replace(<span class="regexp">/^\s*|\s*$/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>JS 的程序执行速度是非常快的</p>
<p>如果希望一段程序, 每隔一段时间执行一次, 可以使用<code>定时调用</code></p>
<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>setInterval(function() {}, 1000)</p>
<ul>
<li><em>可以将一个函数每隔一段时间执行一次</em></li>
<li>第一个参数 —— 回调函数, 该函数每隔一段时间被调用一次</li>
<li>第二个参数 —— 时间间隔, 单位是 ms</li>
<li>返回一个数字, 作为定时器的唯一标识<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">clearInterval</span>(timer)</span><br><span class="line">timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  p.innerHTML = num++</span><br><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval"></a>clearInterval</h2><p>clearInterval()</p>
<ul>
<li><p>关闭一个定时器</p>
</li>
<li><p>需要 <code>一个定时器的标识</code> 作为参数</p>
</li>
<li><p>可以接收任意参数</p>
<ul>
<li>如果接收的是有效的定时器标识, 则停止对应的定时器</li>
<li>如果是无效的值 (undefined / null), 不做任何操作</li>
</ul>
</li>
<li><p><font color=#c00>在开启一个定时器之前应先关闭定时器, 避免多次点击造成执行速度变快的问题</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn01 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn01&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> btn02 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn02&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imgs = [<span class="string">&#x27;01.jpg&#x27;</span>, <span class="string">&#x27;02.jpg&#x27;</span>, <span class="string">&#x27;03.jpg&#x27;</span>, <span class="string">&#x27;04.jpg&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span></span><br><span class="line">btn01.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 先清除定时器</span></span><br><span class="line">  <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">  <span class="comment">// 开启定时器</span></span><br><span class="line">  timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    index++</span><br><span class="line">      index %= imgs.length</span><br><span class="line">      img.src = imgs[index]</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn02.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 关闭定时器</span></span><br><span class="line">  <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="setTimeout-延时调用"><a href="#setTimeout-延时调用" class="headerlink" title="setTimeout 延时调用"></a>setTimeout 延时调用</h2><p>不马上执行, 隔多久之后再执行, <font color=#c00>只会执行一次</font></p>
<ul>
<li>setTimeout(function() {}, 1000)<ul>
<li>开启延时调用</li>
</ul>
</li>
<li>clearTimeout()<ul>
<li>关闭延时调用</li>
</ul>
</li>
</ul>
<h1 id="垃圾回收-GC"><a href="#垃圾回收-GC" class="headerlink" title="垃圾回收(GC)"></a>垃圾回收(GC)</h1><p>程序运行过程中也会产生垃圾, 所以我们需要一个 <code>垃圾回收的机制</code>, 来处理程序运行过程中的垃圾</p>
<ul>
<li><p>当一个对象没有任何的变量或属性对它进行引用, 此时我们将永远无法操作该对象</p>
<ul>
<li>此时这种对象就是垃圾, 这种对象过多会占用大量的内存空间, 导致程序运行变慢</li>
</ul>
</li>
<li><p>JS 有 <code>自动</code> 的垃圾回收机制, 会自动将这些垃圾销毁</p>
<ul>
<li>我们要做的只是 <strong>将不再使用的对象设置为 null 即可</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">......</span><br><span class="line">obj = <span class="literal">null</span> </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="使用-Unicode-字符"><a href="#使用-Unicode-字符" class="headerlink" title="使用 Unicode 字符"></a>使用 Unicode 字符</h1><p>在 JS 中使用</p>
<ul>
<li>\u2620  (\u 后跟 十六进制数)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;\u0031&#x27;</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>在 HTML 中使用</p>
<ul>
<li>&amp;#编码; (&amp;# 后跟 十进制数)<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="symbol">&amp;#9760;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> ☠️</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>\u 开头和 &amp;#x 开头是一样的 都是16进制 unicode 字符的写法；&amp;# 则是 unicode 字符的10进制的写法</p>
</blockquote>
]]></content>
      <tags>
        <tag>JS 基础</tag>
      </tags>
  </entry>
</search>
